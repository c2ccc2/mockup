<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLib</name>
    </assembly>
    <members>
        <member name="M:CommonLib.CronHelper.CronOp.GetDescription(System.String,System.String)">
            <summary>
            获取cron的表达式描述
            </summary>
            <param name="cronString"></param>
            <param name="lang">语言 zh-CN  en   ja </param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.CronHelper.CronOp.GetNextTime(System.String,System.String)">
            <summary>
                获取cron表达式的下一次执行时间     
            </summary>
            <param name="cronString"> "* * * * *"</param>
            <param name="timezone"> 时区</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.CronHelper.CronOp.GetNextTimeList(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            获取在时间段内符合cron表达式的时间列表
            </summary>
            <param name="cronString">cron表达式</param>
            <param name="beginDt">开始时间</param>
            <param name="endDt">结束时间</param>
            <param name="timezone">时区</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.DependencyInjection.ServiceCollectionExtensions.AddFamilyBucket(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CommonLib.DependencyInjection.WXQBuilder})">
            <summary>
            添加全家桶服务
            </summary>
            <param name="services"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.DiagnosticReport.AssemblyDetails">
            <summary>
            表示程序集信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.Name">
            <summary>
            程序集全名
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.IsGAC">
            <summary>
            是否从GAC中加载
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.Is64Bit">
            <summary>
            是否是64位
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.IsOptimized">
            <summary>
            是否是Release模式下生成的
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.Framework">
            <summary>
            程序集对应的FrameWork版本
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.Location">
            <summary>
            程序集对应的文件路径,如: "C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll"
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.AssemblyDetails.CodeBase">
            <summary>
            程序集对应的文件地址,如: "file:///C:/windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CommonLib.DiagnosticReport.DiagnosticReport" -->
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.#ctor(CommonLib.DiagnosticReport.DiagnosticReportType)">
            <summary>
            Creates a new instance of the <see cref="T:CommonLib.DiagnosticReport.DiagnosticReport"/>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.Timestamp">
            <summary>
            诊断报告生成的时间
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.TimeTaken">
            <summary>
            诊断报告生成花费的时间
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.Type">
            <summary>
            诊断报告类型
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.SystemDetails">
            <summary>
            操作系统信息报告 <c>System</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.ProcessDetails">
            <summary>
            当前进程信息报告 <c>Process</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.DriveDetails">
            <summary>
            硬盘信息报告 <c>Drives</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.Assemblies">
            <summary>
            程序集信息报告 <c>Assemblies</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.EnvironmentVariables">
            <summary>
            环境变量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DiagnosticReport.NetworkingDetails">
            <summary>
            网络信息报告 <c>Networks</c>.
            </summary>
        </member>
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.Generate(CommonLib.DiagnosticReport.DiagnosticReportType)">
            <summary>
            根据指定的报告类型生成诊断报告 <see cref="T:CommonLib.DiagnosticReport.DiagnosticReport"/>.
            </summary>
        </member>
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.ToString">
            <summary>
            生成格式化的诊断报告文字 <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.GetFQDN">
            <summary>
            获取计算机全限定域名( <c>FQDN</c> , <c>Fully Qualified Domain Name</c>) <see href="http://stackoverflow.com/questions/804700/how-to-find-fqdn-of-local-machine-in-c-net"/>
            </summary>
            <remarks>关于FQDN: <see href="https://baike.baidu.com/item/FQDN/5102541"/></remarks>
            <returns></returns>
        </member>
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.GetProcessorNameWindows">
            <summary>
            Returns the full CPU name using the registry. See <see href="http://stackoverflow.com/questions/2376139/get-full-cpu-name-without-wmi"/>
            </summary>
            <returns>The CPU Name</returns>
        </member>
        <member name="M:CommonLib.DiagnosticReport.DiagnosticReport.GetPhysicallyInstalledSystemMemory(System.Int64@)">
            <summary>
            <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/cc300158(v=vs.85).aspx"/>
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.DiagnosticReportType">
            <summary>
            诊断报告类型
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.System">
            <summary>
            包含操作系统信息
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.Process">
            <summary>
            包含当前进程
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.Drives">
            <summary>
            包含磁盘信息
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.Assemblies">
            <summary>
            包含所有加载的程序集信息
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.EnvironmentVariables">
            <summary>
            包含环境变量
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.Networks">
            <summary>
            包含所有网卡信息
            </summary>
        </member>
        <member name="F:CommonLib.DiagnosticReport.DiagnosticReportType.Full">
            <summary>
            包含操作系统、当前进程、磁盘、程序集、环境变量和网卡信息
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.DriveDetails">
            <summary>
            当前电脑的磁盘分区信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.Name">
            <summary>
            分区名称,比如: <c>C:\</c>
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.Type">
            <summary>
            分区类型,比如: <c>Fixed, CDRom</c>
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.Format">
            <summary>
            分区格式,比如: <c>NTFS</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.Label">
            <summary>
            分区标签,比如: <c>新加卷</c>
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.TotalCapacityInGigaBytes">
            <summary>
            分区总容量，单位: GB
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.FreeCapacityInGigaBytes">
            <summary>
            这个分区所有可用的容量，单位: GB
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.DriveDetails.AvailableCapacityInGigaBytes">
            <summary>
            这个分区在当前用户下可用的容量，单位: GB
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.Ensure">
            <summary>
            当条件不满足时将抛出 <see langword="throw"/> 异常的Helper类。
            </summary>
            <remarks>常用在单元测试或参数合法性校验中</remarks>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.That``1(System.Boolean,System.String)">
            <summary>
            确保给定表达式为 <see langword="true"/>.
            </summary>
            <typeparam name="TException">引发的异常类型</typeparam>
            <param name="condition">测试/确保条件</param>
            <param name="message">异常消息</param>
            <exception>
            当 <cref>TException</cref><paramref name="condition"/> is <see langword="false"/> 时抛出。
            </exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.That(System.Boolean,System.String)">
            <summary>
            确保给定 <paramref name="condition"/> 是 <see langword="true"/>。
            </summary>
            <param name="condition">测试条件</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentException">
            当 <paramref name="condition"/> 为 <see langword="false"/> 时抛出。
            </exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.Not``1(System.Boolean,System.String)">
            <summary>
            确保给定 <paramref name="condition"/> 是 <see langword="false"/>。
            </summary>
            <typeparam name="TException">引发的异常类型</typeparam>
            <param name="condition">测试条件</param>
            <param name="message">异常消息</param>
            <exception>当 <paramref name="condition"/> 为 <see langword="false"/> 时抛出。</exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.Not(System.Boolean,System.String)">
            <summary>
            确保给定 <paramref name="condition"/> 是 <see langword="false"/>。
            </summary>
            <param name="condition">测试条件</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentException">
            当 <paramref name="condition"/> 为 <see langword="false"/> 时抛出。
            </exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.NotNull``1(``0,System.String)">
            <summary>
            确保给定 <see langword="object"/> 不为空。
            </summary>
            <typeparam name="T">给定的类型 <see langword="object"/> 。</typeparam>
            <param name="value"><see langword="object"/> 的值，以检查 <see langword="null"/> 引用。</param>
            <param name="argName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当 <paramref name="value"/> 为空时抛出</exception>
            <returns><typeparamref name="T"/>。</returns>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.Equal``1(``0,``0,System.String)">
            <summary>
            确保给定对象相等。
            </summary>
            <typeparam name="T">要比较的对象类型</typeparam>
            <param name="left">左边的项</param>
            <param name="right">右边的项</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentException">
            当 <paramref name="left"/> 不等于 <paramref name="right"/> 时抛出
            </exception>
            <remarks>空值将导致抛出异常</remarks>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.NotEqual``1(``0,``0,System.String)">
            <summary>
            确保给定的对象不相等。
            </summary>
            <typeparam name="T">要比较的对象类型</typeparam>
            <param name="left">左边的项</param>
            <param name="right">右边的项</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentException">
            当 <paramref name="left"/> 等于 <paramref name="right"/> 时抛出
            </exception>
            <remarks>空值将导致抛出异常</remarks>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            确保给定的 <paramref name="collection"/> 不为null或空。
            </summary>
            <typeparam name="T">集合类型。</typeparam>
            <param name="collection">检查集合。</param>
            <param name="message">异常消息</param>
            <returns>评估的集合。</returns>
            <exception cref="T:System.ArgumentNullException">当 <paramref name="collection"/> 为null时抛出。</exception>
            <exception cref="T:System.ArgumentException">当 <paramref name="collection"/> 为空时抛出。</exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.NotNullOrEmptyOrWhiteSpace(System.String,System.String)">
            <summary>
            确保给定的字符串不是 <see langword="null"/> 或为空或空白。
            </summary>
            <param name="value"><c>字符串</c><paramref name="value"/> 检查。</param>
            <param name="message">异常消息</param>
            <returns>如果不为null，空白或空白，则返回的值。</returns>
            <exception cref="T:System.ArgumentException">当 <paramref name="value"/> 为null，空白或空白时抛出。</exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.Exists(System.IO.DirectoryInfo)">
            <summary>
            确保给定 <see cref="T:System.IO.DirectoryInfo"/> 存在。
            </summary>
            <param name="directoryInfo">表示要检查是否存在的目录的DirectoryInfo对象。</param>
            <returns>如果目录存在，则返回DirectoryInfo。</returns>
            <exception cref="T:System.ArgumentNullException">当 <paramref name="directoryInfo"/> 为空时抛出。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            当 <paramref name="directoryInfo"/> 未找到时抛出。
            </exception>
            <exception cref="T:System.IO.IOException">磁盘驱动器等设备尚未准备就绪。</exception>
        </member>
        <member name="M:CommonLib.DiagnosticReport.Ensure.Exists(System.IO.FileInfo)">
            <summary>
            确保给定 <paramref name="fileInfo"/> 存在。
            </summary>
            <param name="fileInfo">代表要检查是否存在的文件的FileInfo对象。</param>
            <returns>如果文件存在，则返回FileInfo。</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="fileInfo"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">当 <paramref name="fileInfo"/> 不存在时抛出。</exception>
        </member>
        <member name="T:CommonLib.DiagnosticReport.NetworkDetails">
            <summary>
            表示所有网卡的信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.DHCPScope">
            <summary>
            获取 <c>DHCP</c> 范围名
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.Domain">
            <summary>
            获取计算机域名
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.Host">
            <summary>
            获取计算机名
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.IsWINSProxy">
            <summary>
            判断当前计算机是否是 <c>Windows Internet Name Service</c> (WINS) 代理
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.NodeType">
            <summary>
            获取当前系统NetBIOS类型 ( <c>Network Basic Input/Output System</c>)
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkDetails.InterfaceDetails">
            <summary>
            当前系统所有的网卡信息
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.NetworkInterfaceDetails">
            <summary>
            表示单个网卡信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkInterfaceDetails.MAC">
            <summary>
            网卡Mac地址 ( <c>Media Access Control</c>)
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkInterfaceDetails.Interface">
            <summary>
            网卡信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.NetworkInterfaceDetails.Addresses">
            <summary>
            网卡上绑定的所有IP地址信息
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.IPAddressDetails">
            <summary>
            IP地址配置信息
            </summary>
        </member>
        <member name="M:CommonLib.DiagnosticReport.IPAddressDetails.From(System.Net.IPAddress)">
            <summary>
            Returns a <see cref="T:CommonLib.DiagnosticReport.IPAddressDetails"/> from the given <paramref name="ipAddress"/>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.AddressFamily">
            <summary>
            当前IP配置的 <seealso cref="P:CommonLib.DiagnosticReport.IPAddressDetails.AddressFamily"/>
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.IsIPv6Multicast">
            <summary>
            是否是IPv6多播地址
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.IsIPv6LinkLocal">
            <summary>
            是否是IPv6回环地址
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.IsIPv6SiteLocal">
            <summary>
            是否是IPv6本机地址
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.IsIPv6Teredo">
            <summary>
            是否是IPv6 Teredo地址 <seealso href="https://baike.baidu.com/item/teredo/1908883"/>
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.IsIPv4MappedToIPv6">
            <summary>
            是否为 IPv4 映射的 IPv6 地址
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.IPAddressDetails.AsString">
            <summary>
            字符串表示IP地址
            </summary>
        </member>
        <member name="M:CommonLib.DiagnosticReport.IPAddressDetails.ToString">
            <summary>
            用IP地址的字符串表示当前对象
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.ProcessDetails">
            <summary>
            当前进程信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.PID">
            <summary>
            当前进程ID
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.Name">
            <summary>
            当前进程名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.Started">
            <summary>
            当前进程启动的时间
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.LoadedIn">
            <summary>
            当前进程运行的持续时间
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.IsOptimized">
            <summary>
            当前进程的入口程序集是否以Release模式编译
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.Is64Bit">
            <summary>
            当前进程是否是64位
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.IsServerGC">
            <summary>
            是否启用了服务器垃圾回收
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.IsLargeAddressAware">
            <summary>
            当前进程是否运行在 <c>Large Address Aware</c> 模式
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ThreadPoolMinWorkerCount">
            <summary>
            线程池中最少的辅助线程数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ThreadPoolMaxWorkerCount">
            <summary>
            线程池中最大的辅助线程数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ThreadPoolMinCompletionPortCount">
            <summary>
            线程池中最少的I/O线程数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ThreadPoolMaxCompletionPortCount">
            <summary>
            线程池中最大的I/O线程数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ModuleName">
            <summary>
            进程的模块名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ModuleFileName">
            <summary>
            进程的模块文件路径
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ProductName">
            <summary>
            程序上标记的产品名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.OriginalFileName">
            <summary>
            程序上原来的名称(创建程序文件时)
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.FileName">
            <summary>
            程序运行的文件名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.FileVersion">
            <summary>
            程序运行的文件版本号
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.ProductVersion">
            <summary>
            与程序一起发行的产品的版本
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.Language">
            <summary>
            进程运行的语言环境
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.Copyright">
            <summary>
            程序的版权声明
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.WorkingSetInMegaBytes">
            <summary>
            进程运行占用的空间 单位: MB (包含用户空间和内核空间)
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.IsInteractive">
            <summary>
            进程是否在用户交互模式下运行
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.ProcessDetails.CommandLine">
            <summary>
            进程运行的命令行参数
            </summary>
        </member>
        <member name="T:CommonLib.DiagnosticReport.SystemDetails">
            <summary>
            当前操作系统信息
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.OSName">
            <summary>
            操作系统名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.OSType">
            <summary>
            操作系统类型 <c>Windows, Linux 或 OSX</c>.
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.Is64BitOS">
            <summary>
            是否是64位操作系统
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.DotNetFrameworkVersion">
            <summary>
            当前运行的 <c>.NET</c> 版本
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.MachineName">
            <summary>
            计算机名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.FQDN">
            <summary>
            计算机全限定名(含域名)
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.User">
            <summary>
            当前程序以哪个用户运行
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.CPU">
            <summary>
            CPU名称
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.CPUCoreCount">
            <summary>
            CPU的核心数量
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.InstalledRAMInGigaBytes">
            <summary>
            安装的内存大小 单位: GB
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.SystemDirectory">
            <summary>
            操作系统目录 如: C:\Windows
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.CurrentDirectory">
            <summary>
            当前进程运行目录 如: E:\gitee\DotNetCommon\bin\Debug\netcoreapp3.0
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.RuntimeDirectory">
            <summary>
            <c>CLR</c> 环境所在目录 如: C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.1.8\
            </summary>
        </member>
        <member name="P:CommonLib.DiagnosticReport.SystemDetails.Uptime">
            <summary>
            电脑开机时间
            </summary>
        </member>
        <member name="M:CommonLib.Download.WgetHelper.DownLoadWebsite(System.String,System.String,System.String,System.String)">
            <summary>
            通过wget方式下载网站 </summary> <param name="websiteUrl">网址 如 https://www.mgdc81.com/</param>
            <param name="fileSavePath">下载文件保存路径 如e:\\website</param> <param
            name="downloadLogFilePath">下载网站的日志文件保存路径 如e:\\websitelog.log</param> /// <param
            name="wgetExePath">wget程序路径 默认@"C:\Windows\System32\wget.exe" </param> /// <param
            name="isWaaitForExit">是否等待程序结束 默认否</param>
        </member>
        <member name="M:CommonLib.Download.WgetHelper.DownloadIsSuccess(System.String)">
            <summary>
            wget是否下载成功 通过判断日志文件的最后一行内容是否为Downloaded开头
            </summary>
            <param name="downloadLogFilePath">日志文件路径</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Expressions.Operator">
            <summary>
            查询操作符
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.Contains">
            <summary>
            模糊匹配
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.Operator.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="T:CommonLib.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:CommonLib.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化一个<see cref="T:CommonLib.Expressions.ParameterRebinder"/>类型的实例
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:CommonLib.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数表达式</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="F:CommonLib.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数表达式
            </summary>
        </member>
        <member name="F:CommonLib.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化一个<see cref="T:CommonLib.Expressions.PredicateExpressionBuilder`1"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},CommonLib.Expressions.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},CommonLib.Expressions.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.Append(System.String,CommonLib.Expressions.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.Append(System.String,CommonLib.Expressions.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:CommonLib.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Extensions.BooleanExtension">
            <summary>
            布尔值(<see cref="T:System.Boolean"/>) 扩展
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToLower(System.Boolean)">
            <summary>
            将布尔值转换为小写字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToYesNoString(System.Boolean)">
            <summary>
            将布尔值转换为等效的字符串表示形式（Yes、No）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToBinaryTypeNumber(System.Boolean)">
            <summary>
            将布尔值转换为二进制数字类型（true:1、false:0）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToChineseString(System.Boolean)">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToChineseString(System.Boolean,System.String,System.String)">
            <summary>
            将布尔值转换为等效中文字符串表示形式
            </summary>
            <param name="value">值</param>
            <param name="trueStr">为True时的中文</param>
            <param name="falseStr">为False时的中文</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToChineseString(System.Nullable{System.Boolean})">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.ToChineseString(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <param name="trueStr">为True时的中文</param>
            <param name="falseStr">为False时的中文</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfTrue``1(System.Boolean,``0)">
            <summary>
            结果为true时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfTrue``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为true时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfTrue(System.Boolean,System.Action)">
            <summary>
            结果为true时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfTrue(System.Nullable{System.Boolean},System.Action)">
            <summary>
            结果为true时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfFalse``1(System.Boolean,``0)">
            <summary>
            结果为false时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfFalse``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为false时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfFalse(System.Boolean,System.Action)">
            <summary>
            结果为false时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:CommonLib.Extensions.BooleanExtension.IfFalse(System.Nullable{System.Boolean},System.Action)">
            <summary>
            结果为false时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:CommonLib.Extensions.ByteExtension.Max(System.Byte,System.Byte)">
            <summary>
            获取两个数中最大值
            </summary>
            <param name="value1">值1</param>
            <param name="value2">值2</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.ByteExtension.Min(System.Byte,System.Byte)">
            <summary>
            获取两个数中最小值
            </summary>
            <param name="value1">值1</param>
            <param name="value2">值2</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.In(System.Char,System.Char[])">
            <summary>
            判断当前字符是否在目标字符数组中
            </summary>
            <param name="this">字符</param>
            <param name="values">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.NotIn(System.Char,System.Char[])">
            <summary>
            判断当前字符是否不在目标字符数组中
            </summary>
            <param name="this">字符</param>
            <param name="values">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.Repeat(System.Char,System.Int32)">
            <summary>
            重复拼接字符
            </summary>
            <param name="this">字符</param>
            <param name="repeatCount">重复数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.GetAsciiCode(System.Char)">
            <summary>
            获取ASCII编码
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.IsChinese(System.Char)">
            <summary>
            是否中文字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.IsLine(System.Char)">
            <summary>
            是否行标识
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.IsDoubleByte(System.Char)">
            <summary>
            是否双字节字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.ToDBC(System.Char)">
            <summary>
            转换为半角字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CharExtension.ToSBC(System.Char)">
            <summary>
            转换为全角字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.WithInIndex(System.Array,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.WithInIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">数组</param>
            <param name="index">索引</param>
            <param name="dimension">数组维度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.CombineArray``1(``0[],``0[])">
            <summary>
            合并数组，合并两个数组到一个新的数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="combineWith">源数组</param>
            <param name="arrayToCombine">目标数组</param>
            <example>
            	<code>
            		int[] arrayOne = new[] { 1, 2, 3, 4 };
            		int[] arrayTwo = new[] { 5, 6, 7, 8 };
            		Array combinedArray = arrayOne.CombineArray&lt;int&gt;(arrayTwo);
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.ClearAll(System.Array)">
            <summary>
            清空数组内容
            </summary>
            <param name="source">源数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.ClearAll``1(``0[])">
            <summary>
            清空数组内容
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">源数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.ClearAt(System.Array,System.Int32)">
            <summary>
            清除数组中指定索引的内容
            </summary>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.ClearAt``1(``0[],System.Int32)">
            <summary>
            清除数组中指定索引的内容
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="index">索引</param>
            <param name="length">复制长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="index">索引</param>
            <param name="length">复制长度</param>
            <param name="padToLength">是否填充指定长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Boolean)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="length">复制长度</param>
            <param name="padToLength">是否填充指定长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将byte[]转换成字符串，默认字符编码：<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToHexString(System.Byte[])">
            <summary>
            将byte[]转换成16进制字符串表示形式
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToInt(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToLong(System.Byte[])">
            <summary>
            将byte[]转换成long
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToBase64String(System.Byte[])">
            <summary>
            将byte[]转换成Base64字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.ToMemoryStream(System.Byte[])">
            <summary>
            将byte[]转换成内存流
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ByteArrayExtension.Copy(System.Byte[0:,0:])">
            <summary>
            复制一份二维数组的副本
            </summary>
            <param name="bytes">二维数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加项。如果未包含，则添加
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="item">项</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加项集合。如果未包含，则添加
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="items">项集合</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            添加项。如果未包含
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="predicate">条件</param>
            <param name="itemFactory">获取项函数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            移除项。指定集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="items">集合项</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            移除项。按条件移除
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加批量项。
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="values">值</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.Sort``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            排序
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.ReplaceItems``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            替换项
            </summary>
            <typeparam name="TItem">项类型</typeparam>
            <typeparam name="TNewItem">新项类型</typeparam>
            <param name="collection">集合</param>
            <param name="newItems">新项集合</param>
            <param name="createItemAction">创建项操作</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.CollectionExtension.ReplaceItems``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            替换项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="newItems">新项集合</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取指定Key对应的Value，若未找到则返回默认值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            批量添加键值对到字典中
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="values">键值对集合</param>
            <param name="replaceExisted">是否替换已存在的键值对</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            获取指定键的值，不存在则按指定委托添加值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="setValue">添加值的委托</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            获取指定键的值，不存在则按指定委托添加值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="addFunc">添加值的委托</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns>排序后的字典</returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            对指定的字典进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="comparer">比较器，用于排序字典</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典进行排序，根据值元素进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            根据Value反向查找Key
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            尝试将键值对添加到字典中。如果不存在，则添加；存在，不添加也不抛异常
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.ToHashTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将字典转换成哈希表
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.Reverse``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定字典进行颠倒键值对，创建新字典（值为键，键为值）
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转换成只读字典
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对指定集合中的每个元素执行指定操作
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="action">操作</param>
        </member>
        <member name="M:CommonLib.Extensions.Collections.EnumerableExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.EnumerableExtension.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的结合</param>
            <param name="separator">分隔符，默认为逗号</param>
            <returns>拼接后的字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.EnumerableExtension.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            将集合展开并转为字符串，循环集合每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separator">分隔符，默认为逗号</param>
            <returns>拼接后的字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.InsertIfNotExists``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            插入项。如果不存在，则插入
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="index">索引</param>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.InsertIfNotExists``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入项。如果不存在，则插入
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="startIndex">开始位置索引</param>
            <param name="items">列表项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            获取第一匹配项的索引
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="comparison">条件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.Join``1(System.Collections.Generic.IList{``0},System.Char)">
            <summary>
            将列表连接为字符串，根据指定的字符进行分割
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="joinChar">分割符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            将列表连接为字符串，根据指定的字符串进行连接
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="joinString">分割字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.EqualsAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            是否完全相等
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">待比较列表</param>
            <param name="other">待比较列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取列表指定范围的列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">列表</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Collections.ListExtension.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取列表指定范围的列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">列表</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="step">递增值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全获取值，当值为null时，不会抛出异常
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">可空值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.Value(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.Value``1(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.Description(System.Enum)">
            <summary>
            获取枚举描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            转换为用分隔符连接的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号"'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.IsMatch(System.String,System.String)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中找到匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">规则</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.GetMatch(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.GetMatchingValues(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns> 一个集合，包含有关匹配项的字符串值</returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定一个给定的正则表达式模式的所有匹配的字符串返回的枚举
            </summary>
            <param name="value">输入字符串</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns>匹配字符串的枚举</returns>
        </member>
        <member name="M:CommonLib.Extensions.Common.CommonExtension.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定指定的正则表达式模式的所有匹配项
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ClearAll(System.Array)">
            <summary>
                An Array extension method that clears the array.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BinarySearch(System.Array,System.Object)">
            <summary>
                Searches an entire one-dimensional sorted  for a specific element, using the  interface implemented by each
                element of the  and by the specified object.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
                Searches a range of elements in a one-dimensional sorted  for a value, using the  interface implemented by
                each element of the  and by the specified value.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
                Searches an entire one-dimensional sorted  for a value using the specified  interface.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or- null to use the  implementation
                of each element.
            </param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
                Searches a range of elements in a one-dimensional sorted  for a value, using the specified  interface.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or- null to use the  implementation
                of each element.
            </param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
                Sets a range of elements in the  to zero, to false, or to null, depending on the element type.
            </summary>
            <param name="array">The  whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Copy(System.Array,System.Array,System.Int32)">
            <summary>
                Copies a range of elements from an  starting at the first element and pastes them into another  starting at
                the first element. The length is specified as a 32-bit integer.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from an  starting at the specified source index and pastes them to another
                starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Copy(System.Array,System.Array,System.Int64)">
            <summary>
                Copies a range of elements from an  starting at the first element and pastes them into another  starting at
                the first element. The length is specified as a 64-bit integer.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="length">
                A 64-bit integer that represents the number of elements to copy. The integer must be between
                zero and , inclusive.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
                Copies a range of elements from an  starting at the specified source index and pastes them to another
                starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">
                A 64-bit integer that represents the number of elements to copy. The integer must be between
                zero and , inclusive.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the entire one-
                dimensional .
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the first occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the range of elements
                in the one-dimensional  that extends from the specified index to the last element.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that extends from  to the last element,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the range of elements
                in the one-dimensional  that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that starts at  and contains the
                number of elements specified in , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.LastIndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the entire one-
                dimensional .
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the last occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements
                in the one-dimensional  that extends from the first element to the specified index.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that extends from the first element to ,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements
                in the one-dimensional  that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that contains the number of elements
                specified in  and ends at , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Reverse(System.Array)">
            <summary>
                Reverses the sequence of the elements in the entire one-dimensional .
            </summary>
            <param name="array">The one-dimensional  to reverse.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
                Reverses the sequence of the elements in a range of elements in the one-dimensional .
            </summary>
            <param name="array">The one-dimensional  to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array)">
            <summary>
                Sorts the elements in an entire one-dimensional  using the  implementation of each element of the .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Array)">
            <summary>
                Sorts a pair of one-dimensional  objects (one contains the keys and the other contains the corresponding
                items) based on the keys in the first  using the  implementation of each key.
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
                Sorts the elements in a range of elements in a one-dimensional  using the  implementation of each element of
                the .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
                Sorts a range of elements in a pair of one-dimensional  objects (one contains the keys and the other contains
                the corresponding items) based on the keys in the first  using the  implementation of each key.
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Collections.IComparer)">
            <summary>
                Sorts the elements in a one-dimensional  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
                Sorts a pair of one-dimensional  objects (one contains the keys and the other contains the corresponding
                items) based on the keys in the first  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
                Sorts the elements in a range of elements in a one-dimensional  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
                Sorts a range of elements in a pair of one-dimensional  objects (one contains the keys and the other contains
                the corresponding items) based on the keys in the first  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a specified number of bytes from a source array starting at a particular offset to a destination array
                starting at a particular offset.
            </summary>
            <param name="src">The source buffer.</param>
            <param name="srcOffset">The zero-based byte offset into .</param>
            <param name="dst">The destination buffer.</param>
            <param name="dstOffset">The zero-based byte offset into .</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IfTrue(System.Boolean,System.Action)">
            <summary>
                A bool extension method that execute an Action if the value is true.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToString(System.Boolean,System.String,System.String)">
            <summary>
                A bool extension method that show the trueValue when the @this value is true; otherwise show the falseValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="trueValue">The true value to be returned if the @this value is true.</param>
            <param name="falseValue">The false value to be returned if the @this value is false.</param>
            <returns>A string that represents of the current boolean value.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IfFalse(System.Boolean,System.Action)">
            <summary>
                A bool extension method that execute an Action if the value is false.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Max(System.Byte,System.Byte)">
            <summary>
                Returns the larger of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Min(System.Byte,System.Byte)">
            <summary>
                Returns the smaller of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToBase64String(System.Byte[])">
            <summary>
                Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with
                base-64 digits.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <returns>The string representation, in base 64, of the contents of .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
                Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with
                base-64 digits. A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="options">to insert a line break every 76 characters, or  to not insert line breaks.</param>
            <returns>The string representation in base 64 of the elements in .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is
                encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of
                elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="offset">An offset in .</param>
            <param name="length">The number of elements of  to convert.</param>
            <returns>The string representation in base 64 of  elements of , starting at position .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
                Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is
                encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of
                elements in the array to convert, and whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="offset">An offset in .</param>
            <param name="length">The number of elements of  to convert.</param>
            <param name="options">to insert a line break every 76 characters, or  to not insert line breaks.</param>
            <returns>The string representation in base 64 of  elements of , starting at position .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Resize(System.Byte[],System.Int32)">
            <summary>
                A byte[] extension method that resizes the byte[].
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="newSize">Size of the new.</param>
            <returns>A byte[].</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMemoryStream(System.Byte[])">
            <summary>
                A byte[] extension method that converts the @this byteArray to a memory stream.
            </summary>
            <param name="byteArray">The byetArray to act on</param>
            <returns>@this as a MemoryStream.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Repeat(System.Char,System.Int32)">
            <summary>
                A char extension method that repeats a character the specified number of times.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="repeatCount">Number of repeats.</param>
            <returns>The repeated char.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetNumericValue(System.Char)">
            <summary>
                Converts the specified numeric Unicode character to a double-precision floating point number.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>The numeric value of  if that character represents a number; otherwise, -1.0.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetUnicodeCategory(System.Char)">
            <summary>
                Categorizes a specified Unicode character into a group identified by one of the  values.
            </summary>
            <param name="c">The Unicode character to categorize.</param>
            <returns>A  value that identifies the group that contains .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsControl(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a control character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a control character; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsLetter(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a Unicode letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a letter; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsLetterOrDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a letter or a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsLower(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a lowercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a lowercase letter; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsUpper(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as an uppercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is an uppercase letter; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNumber(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a number.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a number; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsSeparator(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a separator character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a separator character; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsSymbol(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a symbol character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a symbol character; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsWhiteSpace(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is white space; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
                Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-
                specific formatting information.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
                The lowercase equivalent of , modified according to , or the unchanged value of , if  is already lowercase or
                not alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLower(System.Char)">
            <summary>
                Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The lowercase equivalent of , or the unchanged value of , if  is already lowercase or not alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLowerInvariant(System.Char)">
            <summary>
                Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant
                culture.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The lowercase equivalent of the  parameter, or the unchanged value of , if  is already lowercase or not
                alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
                Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-
                specific formatting information.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
                The uppercase equivalent of , modified according to , or the unchanged value of  if  is already uppercase,
                has no uppercase equivalent, or is not alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUpper(System.Char)">
            <summary>
                Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The uppercase equivalent of , or the unchanged value of  if  is already uppercase, has no uppercase
                equivalent, or is not alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUpperInvariant(System.Char)">
            <summary>
                Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant
                culture.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The uppercase equivalent of the  parameter, or the unchanged value of , if  is already uppercase or not
                alphabetic.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Age(System.DateTime)">
            <summary>
                A DateTime extension method that ages the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
                A DateTime extension method that query if 'date' is date equal.
            </summary>
            <param name="date">The date to act on.</param>
            <param name="dateToCompare">Date/Time of the date to compare.</param>
            <returns>true if date equal, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsToday(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is today.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if today, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsWeekDay(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is a week day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is a week day, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsWeekendDay(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is a week day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is a week day, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.StartOfDay(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime with the time set to "00:00:00:000". The first moment of
                the day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the day with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.StartOfMonth(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the first day of the month with the time set to
                "00:00:00:000". The first moment of the first day of the month.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the first day of the month with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                A DateTime extension method that starts of week.
            </summary>
            <param name="dt">The dt to act on.</param>
            <param name="startDayOfWeek">(Optional) the start day of week.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.StartOfYear(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the first day of the year with the time set to
                "00:00:00:000". The first moment of the first day of the year.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the first day of the year with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToEpochTimeSpan(System.DateTime)">
            <summary>
                A DateTime extension method that converts the @this to an epoch time span.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a TimeSpan.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts a time to the time in a particular time zone.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
                Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of .</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>
                The date and time in the destination time zone that corresponds to the  parameter in the source time zone.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
            <summary>
                Converts a time to the time in another time zone based on the time zone&#39;s identifier.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
            <summary>
                Converts a time from one time zone to another based on time zone identifiers.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
            <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
            <returns>
                The date and time in the destination time zone that corresponds to the  parameter in the source time zone.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.
            </summary>
            <param name="dateTime">The Coordinated Universal Time (UTC).</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>
                The date and time in the destination time zone. Its  property is  if  is ; otherwise, its  property is .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime)">
            <summary>
                Converts the current date and time to Coordinated Universal Time (UTC).
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <returns>
                The Coordinated Universal Time (UTC) that corresponds to the  parameter. The  value&#39;s  property is always
                set to .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts the time in a specified time zone to Coordinated Universal Time (UTC).
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of .</param>
            <returns>
                The Coordinated Universal Time (UTC) that corresponds to the  parameter. The  object&#39;s  property is
                always set to .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToFullDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToFullDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToFullDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateShortTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateShortTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMonthDayString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMonthDayString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMonthDayString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateLongTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateLongTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToSortableDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToSortableDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableLongDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableLongDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToUniversalSortableLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToStandardDateString(System.DateTime)">
            <summary>
            ToDateString("yyyy-MM-dd")
            </summary>
            <param name="this">dateTime</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToStandardTimeString(System.DateTime)">
            <summary>
            ToTimeString("yyyy-MM-dd HH:mm:ss")
            </summary>
            <param name="this">datetime</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Abs(System.Decimal)">
            <summary>
                Returns the absolute value of a  number.
            </summary>
            <param name="value">A number that is greater than or equal to , but less than or equal to .</param>
            <returns>A decimal number, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Ceiling(System.Decimal)">
            <summary>
                Returns the smallest integral value that is greater than or equal to the specified decimal number.
            </summary>
            <param name="d">A decimal number.</param>
            <returns>
                The smallest integral value that is greater than or equal to . Note that this method returns a  instead of an
                integral type.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Floor(System.Decimal)">
            <summary>
                Returns the largest integer less than or equal to the specified decimal number.
            </summary>
            <param name="d">A decimal number.</param>
            <returns>
                The largest integer less than or equal to .  Note that the method returns an integral value of type .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Max(System.Decimal,System.Decimal)">
            <summary>
                Returns the larger of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Min(System.Decimal,System.Decimal)">
            <summary>
                Returns the smaller of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Decimal)">
            <summary>
                Rounds a decimal value to the nearest integral value.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <returns>
                The integer nearest parameter . If the fractional component of  is halfway between two integers, one of which
                is even and the other odd, the even number is returned. Note that this method returns a  instead of an
                integral type.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Decimal,System.Int32)">
            <summary>
                Rounds a decimal value to a specified number of fractional digits.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <returns>The number nearest to  that contains a number of fractional digits equal to .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Decimal,System.MidpointRounding)">
            <summary>
                Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway
                between two numbers.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The integer nearest . If  is halfway between two numbers, one of which is even and the other odd, then
                determines which of the two is returned.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
                Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the
                value if it is midway between two numbers.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The number nearest to  that contains a number of fractional digits equal to . If  has fewer fractional digits
                than ,  is returned unchanged.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sign(System.Decimal)">
            <summary>
                Returns a value indicating the sign of a decimal number.
            </summary>
            <param name="value">A signed decimal number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Truncate(System.Decimal)">
            <summary>
                Calculates the integral part of a specified decimal number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>
                The integral part of ; that is, the number that remains after any fractional digits have been discarded.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMoney(System.Decimal)">
            <summary>
                A Decimal extension method that converts the @this to a money.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Decimal.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Combine(System.Delegate,System.Delegate)">
            <summary>
            Concatenates the invocation lists of two delegates.
            </summary>
            <param name="a">The delegate whose invocation list comes first.</param>
            <param name="b">The delegate whose invocation list comes last.</param>
            <returns>
                A new delegate with an invocation list that concatenates the invocation lists of  and  in that order. Returns
                if  is null, returns  if  is a null reference, and returns a null reference if both  and  are null references.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Remove(System.Delegate,System.Delegate)">
            <summary>
            Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.
            </summary>
            <param name="source">The delegate from which to remove the invocation list of .</param>
            <param name="value">The delegate that supplies the invocation list to remove from the invocation list of .</param>
            <returns>
                A new delegate with an invocation list formed by taking the invocation list of  and removing the last
                occurrence of the invocation list of , if the invocation list of  is found within the invocation list of .
                Returns  if  is null or if the invocation list of  is not found within the invocation list of . Returns a
                null reference if the invocation list of  is equal to the invocation list of  or if  is a null reference.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.RemoveAll(System.Delegate,System.Delegate)">
            <summary>
            Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.
            </summary>
            <param name="source">The delegate from which to remove the invocation list of .</param>
            <param name="value">The delegate that supplies the invocation list to remove from the invocation list of .</param>
            <returns>
                A new delegate with an invocation list formed by taking the invocation list of  and removing all occurrences
                of the invocation list of , if the invocation list of  is found within the invocation list of . Returns  if
                is null or if the invocation list of  is not found within the invocation list of . Returns a null reference
                if the invocation list of  is equal to the invocation list of , if  contains only a series of invocation
                lists that are equal to the invocation list of , or if  is a null reference.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange(System.Double,System.Double,System.Double)">
            <summary>
            A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Abs(System.Double)">
            <summary>
                Returns the absolute value of a double-precision floating-point number.
            </summary>
            <param name="value">A number that is greater than or equal to , but less than or equal to .</param>
            <returns>A double-precision floating-point number, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Acos(System.Double)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">
                A number representing a cosine, where  must be greater than or equal to -1, but less than or
                equal to 1.
            </param>
            <returns>An angle, ?, measured in radians, such that 0 ????-or-  if  &lt; -1 or  &gt; 1 or  equals .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Asin(System.Double)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">
                A number representing a sine, where  must be greater than or equal to -1, but less than or equal
                to 1.
            </param>
            <returns>
                An angle, ?, measured in radians, such that -?/2 ????/2 -or-  if  &lt; -1 or  &gt; 1 or  equals .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Atan(System.Double)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d">A number representing a tangent.</param>
            <returns>
                An angle, ?, measured in radians, such that -?/2 ????/2.-or-  if  equals , -?/2 rounded to double precision (-
                1.5707963267949) if  equals , or ?/2 rounded to double precision (1.5707963267949) if  equals .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Atan2(System.Double,System.Double)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
                An angle, ?, measured in radians, such that -?????, and tan(?) =  / , where (, ) is a point in the Cartesian
                plane. Observe the following: For (, ) in quadrant 1, 0 &lt; ? &lt; ?/2.For (, ) in quadrant 2, ?/2 &lt;
                ???.For (, ) in quadrant 3, -? &lt; ? &lt; -?/2.For (, ) in quadrant 4, -?/2 &lt; ? &lt; 0.For points on the
                boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, ? = 0.If y is
                0 and x is negative, ? = ?.If y is positive and x is 0, ? = ?/2.If y is negative and x is 0, ? = -?/2.If  or
                is , or if  and  are either  or , the method returns .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Ceiling(System.Double)">
            <summary>
                Returns the smallest integral value that is greater than or equal to the specified double-precision floating-
                point number.
            </summary>
            <param name="a">A double-precision floating-point number.</param>
            <returns>
                The smallest integral value that is greater than or equal to . If  is equal to , , or , that value is
                returned. Note that this method returns a  instead of an integral type.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Cos(System.Double)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cosine of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Cosh(System.Double)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic cosine of . If  is equal to  or ,  is returned. If  is equal to ,  is returned.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Exp(System.Double)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power.</param>
            <returns>
                The number e raised to the power . If  equals  or , that value is returned. If  equals , 0 is returned.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Floor(System.Double)">
            <summary>
                Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>The largest integer less than or equal to . If  is equal to , , or , that value is returned.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IEEERemainder(System.Double,System.Double)">
            <summary>
                Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">A dividend.</param>
            <param name="y">A divisor.</param>
            <returns>
                A number equal to  - ( Q), where Q is the quotient of  /  rounded to the nearest integer (if  /  falls
                halfway between two integers, the even integer is returned).If  - ( Q) is zero, the value +0 is returned if
                is positive, or -0 if  is negative.If  = 0,  is returned.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Log(System.Double)">
            <summary>
                Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <returns>
                One of the values in the following table.  parameterReturn value Positive The natural logarithm of ; that is,
                ln , or log eZero Negative Equal to Equal to.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Log(System.Double,System.Double)">
            <summary>
                Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <param name="newBase">The base of the logarithm.</param>
            <returns>
                One of the values in the following table. (+Infinity denotes , -Infinity denotes , and NaN denotes .)Return
                value&gt; 0(0 &lt;&lt; 1) -or-(&gt; 1)lognewBase(a)&lt; 0(any value)NaN(any value)&lt; 0NaN != 1 = 0NaN != 1
                = +InfinityNaN = NaN(any value)NaN(any value) = NaNNaN(any value) = 1NaN = 00 &lt;&lt; 1 +Infinity = 0&gt; 1-
                Infinity =  +Infinity0 &lt;&lt; 1-Infinity =  +Infinity&gt; 1+Infinity = 1 = 00 = 1 = +Infinity0.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Log10(System.Double)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <returns>
                One of the values in the following table.  parameter Return value Positive The base 10 log of ; that is, log
                10. Zero Negative Equal to Equal to.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Max(System.Double,System.Double)">
            <summary>
                Returns the larger of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is larger. If , , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Min(System.Double,System.Double)">
            <summary>
                Returns the smaller of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is smaller. If , , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Pow(System.Double,System.Double)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number  raised to the power .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Double)">
            <summary>
                Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <returns>
                The integer nearest . If the fractional component of  is halfway between two integers, one of which is even
                and the other odd, then the even number is returned. Note that this method returns a  instead of an integral
                type.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Double,System.Int32)">
            <summary>
                Rounds a double-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns>The number nearest to  that contains a number of fractional digits equal to .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Double,System.MidpointRounding)">
            <summary>
                Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the
                value if it is midway between two numbers.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The integer nearest . If  is halfway between two integers, one of which is even and the other odd, then
                determines which of the two is returned.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
                Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter
                specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The number nearest to  that has a number of fractional digits equal to . If  has fewer fractional digits than
                ,  is returned unchanged.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sign(System.Double)">
            <summary>
                Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sin(System.Double)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The sine of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sinh(System.Double)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic sine of . If  is equal to , , or , this method returns a  equal to .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sqrt(System.Double)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="d">The number whose square root is to be found.</param>
            <returns>
                One of the values in the following table.  parameter Return value Zero or positive The positive square root
                of . Negative Equals Equals.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Tan(System.Double)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The tangent of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Tanh(System.Double)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of . If  is equal to , this method returns -1. If value is equal to , this method
                returns 1. If  is equal to , this method returns .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Truncate(System.Double)">
            <summary>
                Calculates the integral part of a specified double-precision floating-point number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>
                The integral part of ; that is, the number that remains after any fractional digits have been discarded, or
                one of the values listed in the following table. Return value.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToMoney(System.Double)">
            <summary>
                A Double extension method that converts the @this to a moneyFormat.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Double.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.In(System.Enum,System.Enum[])">
            <summary>
            A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetDescription(System.Enum)">
            <summary>
            An object extension method that gets description attribute.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
                An EventHandler extension method that raises the event event.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
                An EventHandler extension method that raises.
            </summary>
            <param name="handler">The handler to act on.</param>
            <param name="sender">Source of the event.</param>
            <param name="e">Event information.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.RaiseEvent``1(System.EventHandler{``0},System.Object)">
            <summary>
                An EventHandler&lt;TEventArgs&gt; extension method that raises the event event.
            </summary>
            <typeparam name="TEventArgs">Type of the event arguments.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                An EventHandler&lt;TEventArgs&gt; extension method that raises the event event.
            </summary>
            <typeparam name="TEventArgs">Type of the event arguments.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
            <param name="e">Event information to send to registered event handlers.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>A GUID extension method that query if '@this' is empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNotNullOrEmpty(System.Nullable{System.Guid})">
            <summary>A GUID extension method that query if '@this' is not null or empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsEmpty(System.Guid)">
            <summary>A GUID extension method that query if '@this' is empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNotEmpty(System.Guid)">
            <summary>A GUID extension method that queries if a not is empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if a not is empty, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange(System.Int16,System.Int16,System.Int16)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.FactorOf(System.Int16,System.Int16)">
            <summary>
                An Int16 extension method that factor of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factorNumer">The factor numer.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsEven(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is even.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if even, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsOdd(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is odd.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if odd, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsPrime(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is prime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if prime, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetBytes(System.Int16)">
            <summary>
                Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Max(System.Int16,System.Int16)">
            <summary>
                Returns the larger of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Min(System.Int16,System.Int16)">
            <summary>
                Returns the smaller of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sign(System.Int16)">
            <summary>
                Returns a value indicating the sign of a 16-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.HostToNetworkOrder(System.Int16)">
            <summary>
                Converts a short value from host byte order to network byte order.
            </summary>
            <param name="host">The number to convert, expressed in host byte order.</param>
            <returns>A short value, expressed in network byte order.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.NetworkToHostOrder(System.Int16)">
            <summary>
                Converts a short value from network byte order to host byte order.
            </summary>
            <param name="network">The number to convert, expressed in network byte order.</param>
            <returns>A short value, expressed in host byte order.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.FactorOf(System.Int32,System.Int32)">
            <summary>
                An Int32 extension method that factor of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factorNumer">The factor numer.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsEven(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is even.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if even, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsOdd(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is odd.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if odd, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsMultipleOf(System.Int32,System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is multiple of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factor">The factor.</param>
            <returns>true if multiple of, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsPrime(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is prime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if prime, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetBytes(System.Int32)">
            <summary>
                Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ConvertFromUtf32(System.Int32)">
            <summary>
                Converts the specified Unicode code point into a UTF-16 encoded string.
            </summary>
            <param name="utf32">A 21-bit Unicode code point.</param>
            <returns>
                A string consisting of one  object or a surrogate pair of  objects equivalent to the code point specified by
                the  parameter.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.DaysInMonth(System.Int32,System.Int32)">
            <summary>
                Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <returns>
                The number of days in  for the specified .For example, if  equals 2 for February, the return value is 28 or
                29 depending upon whether  is a leap year.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsLeapYear(System.Int32)">
            <summary>
                Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year.</param>
            <returns>true if  is a leap year; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Abs(System.Int32)">
            <summary>
                Returns the absolute value of a 32-bit signed integer.
            </summary>
            <param name="value">A number that is greater than , but less than or equal to .</param>
            <returns>A 32-bit signed integer, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.BigMul(System.Int32,System.Int32)">
            <summary>
                Produces the full product of two 32-bit numbers.
            </summary>
            <param name="a">The first number to multiply.</param>
            <param name="b">The second number to multiply.</param>
            <returns>The number containing the product of the specified numbers.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>
                An Int32 extension method that div rem.
            </summary>
            <param name="a">a to act on.</param>
            <param name="b">The Int32 to process.</param>
            <param name="result">[out] The result.</param>
            <returns>An Int32.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Max(System.Int32,System.Int32)">
            <summary>
                Returns the larger of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Min(System.Int32,System.Int32)">
            <summary>
                Returns the smaller of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sign(System.Int32)">
            <summary>
                Returns a value indicating the sign of a 32-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.FromTicks(System.Int64)">
            <summary>
                Returns a  that represents a specified time, where the specification is in units of ticks.
            </summary>
            <param name="value">A number of ticks that represent a time.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetBytes(System.Int64)">
            <summary>
                Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Int64BitsToDouble(System.Int64)">
            <summary>
                Converts the specified 64-bit signed integer to a double-precision floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A double-precision floating point number whose value is equivalent to .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AsOrDefault``1(System.Object)">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AsOrDefault``1(System.Object,``0)">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.To``1(System.Object)">
            <summary>
                A System.Object extension method that toes the given this.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.To(System.Object,System.Type)">
            <summary>
                A System.Object extension method that toes the given this.
            </summary>
            <param name="this">this.</param>
            <param name="type">The type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{``0})">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToOrDefault(System.Object,System.Type)">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <param name="this">this.</param>
            <param name="type">type</param>
            <returns>The given data converted to</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToOrDefault``1(System.Object)">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToOrDefault``1(System.Object,``0)">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsAssignableFrom``1(System.Object)">
            <summary>
                An object extension method that query if '@this' is assignable from.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if assignable from, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsAssignableFrom(System.Object,System.Type)">
            <summary>
                An object extension method that query if '@this' is assignable from.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="targetType">Type of the target.</param>
            <returns>true if assignable from, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Chain``1(``0,System.Action{``0})">
            <summary>
                A T extension method that chains actions.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>The @this acted on.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.NullIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
                A T extension method that null if.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1})">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <returns>The value or default.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1},``1)">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value or default.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValue">The catch value.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1})">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValueFactory">The catch value factory.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1,``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValue">The catch value.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1},``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValueFactory">The catch value factory.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``1(``0,System.Action{``0})">
            <summary>A TType extension method that attempts to action from the given data.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryAction">The try action.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Try``1(``0,System.Action{``0},System.Action{``0})">
            <summary>A TType extension method that attempts to action from the given data.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryAction">The try action.</param>
            <param name="catchAction">The catch action.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.InRange``1(``0,``0,``0)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsDefault``1(``0)">
            <summary>
                A T extension method that query if 'source' is the default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <returns>true if default, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToSafeString(System.Object)">
            <summary>
                An object extension method that converts the @this to string or return an empty string if the value is null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string or empty if the value is null.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetTypeArray(System.Object[])">
            <summary>
                Gets the types of the objects in the specified array.
            </summary>
            <param name="args">An array of objects whose types to determine.</param>
            <returns>An array of  objects representing the types of the corresponding elements in .</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.OneOf``1(System.Random,``0[])">
            <summary>
                A Random extension method that return a random value from the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing arguments.</param>
            <returns>One of the specified value.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.CoinToss(System.Random)">
            <summary>
                A Random extension method that flip a coin toss.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true 50% of time, otherwise false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNull(System.String)">
            <summary>
                A T extension method that query if '@this' is null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if null, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNullOrEmpty(System.String)">
            <summary>
                A string extension method that query if '@this' is null or empty.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if null or empty, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNotNullOrEmpty(System.String)">
            <summary>
                A string extension method that query if '@this' is not null and not empty.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>false if null or empty, true if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
                A string extension method that query if '@this' is null or whiteSpace.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if null or whiteSpace, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsNotNullOrWhiteSpace(System.String)">
            <summary>
                A string extension method that query if '@this' is not null and not whiteSpace.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>false if null or whiteSpace, true if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Intern(System.String)">
            <summary>
                Retrieves the system&#39;s reference to the specified .
            </summary>
            <param name="str">A string to search for in the intern pool.</param>
            <returns>
                The system&#39;s reference to , if it is interned; otherwise, a new reference to a string with the value of .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsInterned(System.String)">
            <summary>
                Retrieves a reference to a specified .
            </summary>
            <param name="str">The string to search for in the intern pool.</param>
            <returns>A reference to  if it is in the common language runtime intern pool; otherwise, null.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Concatenates the elements of an object array, using the specified separator between each element.
            </summary>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements of  delimited by the  string. If  is an empty array, the method
                returns .
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsMatch(System.String,System.String)">
            <summary>
                Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Indicates whether the specified regular expression finds a match in the specified input string, using the
                specified matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Concatenate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>An IEnumerable&lt;string&gt; extension method that concatenates the given this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>An IEnumerable&lt;T&gt; extension method that concatenates.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <param name="func">The function.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Contains(System.String,System.String)">
            <summary>
                A string extension method that query if this object contains the given value.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <returns>true if the value is in the string, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                A string extension method that query if this object contains the given value.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>true if the value is in the string, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Extract(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                A string extension method that extracts this object.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                A string extension method that removes the letter.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.FormatWith(System.String,System.Object[])">
            <summary>
                Replaces the format item in a specified String with the text equivalent of the value of a corresponding
                Object instance in a specified array.
            </summary>
            <param name="this">A String containing zero or more format items.</param>
            <param name="values">An Object array containing zero or more objects to format.</param>
            <returns>
                A copy of format in which the format items have been replaced by the String equivalent of the corresponding
                instances of Object in args.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.IsLike(System.String,System.String)">
            <summary>
                A string extension method that query if '@this' satisfy the specified pattern.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="pattern">The pattern to use. Use '*' as wildcard string.</param>
            <returns>true if '@this' satisfy the specified pattern, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32)">
            <summary>
            SafeSubstring
            </summary>
            <param name="this"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            SafeSubstring
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Sub(System.String,System.Int32)">
            <summary>
            Sub, not only substring but support for negative numbers
            </summary>
            <param name="this">string to be handled</param>
            <param name="startIndex">startIndex to substract</param>
            <returns>substring</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Repeat(System.String,System.Int32)">
            <summary>
                A string extension method that repeats the string a specified number of times.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="repeatCount">Number of repeats.</param>
            <returns>The repeated string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Reverse(System.String)">
            <summary>
                A string extension method that reverses the given string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The string reversed.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Returns a String array containing the substrings in this string that are delimited by elements of a specified
                String array. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="separator">A string that delimit the substrings in this string.</param>
            <param name="option">
                (Optional) Specify RemoveEmptyEntries to omit empty array elements from the array returned,
                or None to include empty array elements in the array returned.
            </param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by the separator.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToByteArray(System.String)">
            <summary>
                A string extension method that converts the @this to a byte array.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a byte[].</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
                A string extension method that converts the @this to a byte array.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">encoding</param>
            <returns>@this as a byte[].</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToEnum``1(System.String)">
            <summary>
                A string extension method that converts the @this to an enum.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToTitleCase(System.String)">
            <summary>
                A string extension method that converts the @this to a title case.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
                A string extension method that converts the @this to a title case.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cultureInfo">Information describing the culture.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Truncate(System.String,System.Int32)">
            <summary>
                A string extension method that truncates.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Truncate(System.String,System.Int32,System.String)">
            <summary>
                A string extension method that truncates.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="suffix">The suffix.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            EqualsIgnoreCase
            </summary>
            <param name="s1">string1</param>
            <param name="s2">string2</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that substrings.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>A StringBuilder extension method that substrings.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>A StringBuilder extension method that appends a join.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.AppendLineJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>A StringBuilder extension method that appends a line join.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Ago(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that substract the specified TimeSpan to the current DateTime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current DateTime with the specified TimeSpan substracted from it.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.FromNow(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that add the specified TimeSpan to the current DateTime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current DateTime with the specified TimeSpan added to it.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.UtcAgo(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that substract the specified TimeSpan to the current UTC (Coordinated Universal
                Time)
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current UTC (Coordinated Universal Time) with the specified TimeSpan substracted from it.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.UtcFromNow(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that add the specified TimeSpan to the current UTC (Coordinated Universal Time)
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current UTC (Coordinated Universal Time) with the specified TimeSpan added to it.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.CreateInstance``1(System.Type)">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.CreateInstance``1(System.Type,System.Object[])">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="args">The arguments.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.HasEmptyConstructor(System.Type)">
            <summary>
            if a type has empty constructor
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetDefaultValue(System.Type)">
            <summary>
            根据 Type 获取默认值，实现类似 default(T) 的功能
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.Unwrap(System.Type)">
            <summary>
            GetUnderlyingType if nullable else return self
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.CoreExtension.GetUnderlyingType(System.Type)">
            <summary>
            GetUnderlyingType
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Extensions.DateTimeExtension.Date1970">
            <summary>
            1970年1月1日
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.DateTimeExtension.MinDate">
            <summary>
            最小日期
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.DateTimeExtension.MaxDate">
            <summary>
            最大日期
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.DateTimeExtension.InitialJavaScriptDateTicks">
            <summary>
            初始化js日期时间戳
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsLeapYear(System.DateTime)">
            <summary>
            确定给定年份是否为闰年。
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.Age(System.DateTime)">
            <summary>
            返回基于 <paramref name="birthDay"/> 的年龄。
            </summary>
            <param name="birthDay">应计算年龄的生日</param>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.ToUniqueString(System.DateTime,System.Boolean)">
            <summary>
            获取时间相对唯一字符串
            </summary>
            <param name="dateTime">时间点</param>
            <param name="milsec">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.ToJsGetTime(System.DateTime)">
            <summary>
            将时间转换为Js时间格式（Date.getTiem()）
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒毫秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <param name="milliseconds">毫秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            设置时间，设置时间间隔
            </summary>
            <param name="date">时间</param>
            <param name="time">时间间隔</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.EndOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的结束时间。范例：yyyy-MM-dd 23:59:59.999
            </summary>
            <param name="date">指定时间</param>
            <returns>当天的结束时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.BeginOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的开始时间（凌晨）。范例：yyyy-MM-dd 00:00:00
            </summary>
            <param name="time">指定时间</param>
            <returns>当天的开始时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.EndOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的结束时间。范例：yyyy-MM-dd 23:59:59:999
            </summary>
            <param name="date">时间</param>
            <returns>当月的结束时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.BeginOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的开始时间。范例：yyyy-MM-01 00:00:00.000
            </summary>
            <param name="date">时间</param>
            <returns>当月的开始时间</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份第一天
            </summary>
            <param name="date">日期</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份第一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetLastDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份最后一天
            </summary>
            <param name="date">日期</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份最后一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            获取月总天数
            </summary>
            <param name="date">日期</param>
            <returns>月总天数</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            获取当前毫秒数，毫秒数=1970年1月1日-当前时间，UNIX
            </summary>
            <param name="datetime">当前时间</param>
            <returns>毫秒数</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.CompareInterval(System.DateTime,System.DateTime,System.String)">
            <summary>
            计算两个时间的间隔
            </summary>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
            <param name="dateFormat">间隔格式(y:年,M:月,d:天,h:小时,m:分钟,s:秒,fff:毫秒)</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsBetweenTime(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间段内，格式：hh:mm:ss
            </summary>
            <param name="currentTime">当前时间</param>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsBetweenDate(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定日期时间段内，格式：yyyy-MM-dd
            </summary>
            <param name="currentDate">当前日期</param>
            <param name="beginDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间范围内，格式：yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="current">当前时间</param>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsValid(System.DateTime)">
            <summary>
            是否有效时间
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.ToTimeStamp(System.DateTime)">
            <summary>
            将时间转换为时间戳
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.ConvertFromDateTimeOffset(System.DateTimeOffset)">
            <summary>
            时间戳转本时区日期时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.TimestampToDateTime(System.String)">
            <summary>
            时间戳转本时区日期时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.CsharpTime2JavascriptTime(System.DateTime)">
            <summary>
            将C#时间转换为Javascript时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.PhpTime2CsharpTime(System.DateTime,System.Int64)">
            <summary>
            将PHP时间转换为C#时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="time">PHP的时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.CsharpTime2PhpTime(System.DateTime)">
            <summary>
            将C#时间转换为PHP时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            添加星期
            </summary>
            <param name="dateTime">时间</param>
            <param name="weeks">周</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.ConvertToTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将当前时间转换为特定时区的时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="timeZone">时区</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetDayOfWeek">
            <summary>
            获取当前日期的星期几。
            </summary>
            <returns>星期几的枚举值。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfWeek">
            <summary>
            获取当前日期所在周的第一天的日期。
            </summary>
            <returns>当前日期所在周的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfMonth">
            <summary>
            获取当前日期所在月份的第一天的日期。
            </summary>
            <returns>当前日期所在月份的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfQuarter">
            <summary>
            获取当前日期所在季度的第一天的日期。
            </summary>
            <returns>当前日期所在季度的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfYear">
            <summary>
            获取当前日期所在年份的第一天的日期。
            </summary>
            <returns>当前日期所在年份的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            获取指定日期所在周的第一天的日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在周的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfQuarter(System.DateTime)">
            <summary>
            获取指定日期所在季度的第一天的日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在季度的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetFirstDayOfYear(System.DateTime)">
            <summary>
            获取指定日期所在年份的第一天的日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在年份的第一天的日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetDaysBetween(System.DateTime)">
            <summary>
            计算指定日期和当前日期之间的天数差。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期和当前日期之间的天数差。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期之间的天数差。
            </summary>
            <param name="date1">第一个日期。</param>
            <param name="date2">第二个日期。</param>
            <returns>两个日期之间的天数差。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetWorkDaysBetween(System.DateTime)">
            <summary>
            计算指定日期和当前日期之间的工作日数差。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期和当前日期之间的工作日数差。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetWorkDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期之间的工作日数差。
            </summary>
            <param name="date1">第一个日期。</param>
            <param name="date2">第二个日期。</param>
            <returns>两个日期之间的工作日数差。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.IsWorkDay(System.DateTime)">
            <summary>
            判断指定日期是否是工作日。
            </summary>
            <param name="date">指定日期。</param>
            <returns>如果是工作日，则返回 true；否则返回 false。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetWeekDays(System.DateTime)">
            <summary>
            获取指定日期所在周的所有日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在周的所有日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetMonthDays(System.DateTime)">
            <summary>
            获取指定日期所在月份的所有日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在月份的所有日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetQuarterDays(System.DateTime)">
            <summary>
            获取指定日期所在季度的所有日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在季度的所有日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DateTimeExtension.GetYearDays(System.DateTime)">
            <summary>
            获取指定日期所在年份的所有日期。
            </summary>
            <param name="date">指定日期。</param>
            <returns>指定日期所在年份的所有日期。</returns>
        </member>
        <member name="M:CommonLib.Extensions.DecimalExtension.Rounding(System.Decimal)">
            <summary>
            将数值四舍五入，保留两位小数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DecimalExtension.Rounding(System.Decimal,System.Int32)">
            <summary>
            将数值四舍五入，保留指定小数位数
            </summary>
            <param name="value">值</param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DecimalExtension.Abs(System.Decimal)">
            <summary>
            返回数字的绝对值
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Extensions.DesensitizedUtil">
            <summary>
            信息脱敏工具类
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.UserId(System.String)">
            <summary>
            脱敏用户ID，只保留前两位和后两位
            </summary>
            <param name="userId">用户ID</param>
            <returns>脱敏后的用户ID</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.ChineseName(System.String,System.Boolean)">
            <summary>
            脱敏中文姓名，只保留第一个汉字和最后一个汉字，其他用*代替
            </summary>
            <param name="name">中文姓名</param>
            <param name="isFirstName">只保留姓</param>
            <returns>脱敏后的中文姓名</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Idcard(System.String)">
            <summary>
            脱敏身份证号码，只保留前两位和后四位
            </summary>
            <param name="idcard">身份证号码</param>
            <returns>脱敏后的身份证号码</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Tel(System.String)">
            <summary>
            脱敏座机号码，只保留前三位和后四位
            </summary>
            <param name="tel">座机号码</param>
            <returns>脱敏后的座机号码</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Mobile(System.String)">
            <summary>
            脱敏手机号码，只保留前三位和后四位
            </summary>
            <param name="mobile">手机号码</param>
            <returns>脱敏后的手机号码</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Address(System.String)">
            <summary>
            脱敏地址信息，只保留前五个字符和后三个字符
            </summary>
            <param name="address">地址信息</param>
            <returns>脱敏后的地址信息</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Email(System.String)">
            <summary>
            脱敏电子邮件，只保留邮箱前缀的前三个字符和后两个字符
            </summary>
            <param name="email">电子邮件</param>
            <returns>脱敏后的电子邮件</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Password(System.String)">
            <summary>
            脱敏密码，只保留前两个字符和后两个字符
            </summary>
            <param name="password">密码</param>
            <returns>脱敏后的密码</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.PlateNumber(System.String)">
            <summary>
            脱敏中国大陆车牌号，只保留前两个字符和最后一个字符
            </summary>
            <param name="plateNumber">车牌号</param>
            <returns>脱敏后的车牌号</returns>
        </member>
        <member name="M:CommonLib.Extensions.DesensitizedUtil.Bankcard(System.String)">
            <summary>
            脱敏银行卡号，只保留前四位和后四位
            </summary>
            <param name="bankcard">银行卡号</param>
            <returns>脱敏后的银行卡号</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@,``1)">
            <summary>
            根据key获取Dictionary中元素
            </summary>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">value类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; by using the specified function, if the key does
                not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">TThe function used to generate a value for the key.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="value">The value to be added or updated.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be addValue (if the key was absent) or the result of
                updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or
                the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that removes if contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="comparer">The comparer.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains any key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains all key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                An IDictionary&lt;string,string&gt; extension method that converts the @this to a name value collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a NameValueCollection.</returns>
        </member>
        <member name="M:CommonLib.Extensions.DictionaryExtension.ToDataTable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            IDictionary to dataTable
            </summary>
            <param name="dictionary">IDictionary</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.InRange(System.Double,System.Double,System.Double)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">double</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.Days(System.Double)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">double</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.Hours(System.Double)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">double</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.Minutes(System.Double)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">double</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.Seconds(System.Double)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">double</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.DoubleExtension.Milliseconds(System.Double)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">double</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToPixelArray2D(System.Drawing.Bitmap)">
            <summary>
            将图像转换为 Color[,]颜色值二维数组
            </summary>
            <param name="bitmap">图像</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToGrayArray2D(System.Drawing.Bitmap)">
            <summary>
            将图像转换为 byte[,]灰度值二维数组，后续所有操作都以二维数组作为中间变量
            </summary>
            <param name="bitmap">图像</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.GetGrayValue(System.Byte,System.Byte,System.Byte)">
            <summary>
            获取灰度值
            </summary>
            <param name="red">红</param>
            <param name="green">绿</param>
            <param name="blue">蓝</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToGrayArray2D(System.Drawing.Color[0:,0:])">
            <summary>
            将颜色二维数组转换为 byte[,]灰度值二维数组
            </summary>
            <param name="pixels">颜色二维数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.GetGrayValue(System.Drawing.Color)">
            <summary>
            获取灰度值
            </summary>
            <param name="pixel">颜色</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToBitmap(System.Drawing.Color[0:,0:])">
            <summary>
            将颜色二维数组转换为图像
            </summary>
            <param name="pixels">颜色二维数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToBitmap(System.Byte[0:,0:])">
            <summary>
            将灰度值二维数组转换为图像
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.Binaryzation(System.Byte[0:,0:],System.Byte)">
            <summary>
            将灰度值二维数组二值化
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.DeepFore(System.Byte[0:,0:],System.Byte)">
            <summary>
            将灰度值二维数组前景色加黑
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ClearNoiseRound(System.Byte[0:,0:],System.Byte,System.Int32)">
            <summary>
            去除附近噪音，周边有效点数的方式（适合杂点/细线）
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="gray">灰度值</param>
            <param name="maxNearPoints">噪点阀值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ClearNoiseArea(System.Byte[0:,0:],System.Byte,System.Int32)">
            <summary>
            去除区域噪音，联通域降噪方式，去除连通点数小于阀值的连通区域
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="gray">灰度值</param>
            <param name="minAreaPoints">噪点阀值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.IsBlack(System.Byte)">
            <summary>
            是否黑色
            </summary>
            <param name="value">颜色值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.FloodFill(System.Byte[0:,0:],System.Drawing.Point,System.Byte)">
            <summary>
            泛水填充算法，将相连通的区域使用指定灰度值填充
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="point">点坐标</param>
            <param name="replacementGray">填充灰度值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.FloodFill(System.Byte[0:,0:],System.Drawing.Point,System.Byte,System.Drawing.Point[]@)">
            <summary>
            泛水填充算法，将相连通的区域使用指定灰度值填充
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="point">点坐标</param>
            <param name="replacementGray">填充灰度值</param>
            <param name="points">已填充灰度值的点坐标数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ClearBorder(System.Byte[0:,0:],System.Int32)">
            <summary>
            去除图片边框
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="border">边框宽度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.AddBorder(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            添加图片边框，默认白色
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="border">边框宽度</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.DrawTo(System.Byte[0:,0:],System.Byte[0:,0:],System.Int32,System.Int32)">
            <summary>
            将小图画到大图中
            </summary>
            <param name="smallBytes">小图二维数组</param>
            <param name="bigBytes">大图二维数组</param>
            <param name="x1">边框横坐标</param>
            <param name="y1">边框纵坐标</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ClearGray(System.Byte[0:,0:],System.Byte,System.Byte)">
            <summary>
            去除指定范围的灰度
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToValid(System.Byte[0:,0:],System.Byte)">
            <summary>
            去除空白边界获取有效的图形
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.Clone(System.Byte[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            从原矩阵中复制指定矩阵
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ShadowY(System.Byte[0:,0:])">
            <summary>
            统计二维二值化数组的的竖直投影
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ShadowX(System.Byte[0:,0:])">
            <summary>
            统计二维二值化数组的横向投影
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.SplitShadowY(System.Byte[0:,0:],System.Byte,System.Byte)">
            <summary>
            根据二值化数组的竖直投影数据分割图片
            </summary>
            <param name="binBytes">二维二值化数组</param>
            <param name="minFontWidth">最小字符宽度，0则自动</param>
            <param name="minLines">最小有效投影行数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Drawing.BitmapExtension.ToCodeString(System.Byte[0:,0:],System.Byte,System.Boolean)">
            <summary>
            将二维二值化数组转换为特征码字符串
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.ExceptionExtension.Unwrap(System.Exception)">
            <summary>
            获取真实的异常信息
            </summary>
            <param name="ex">原始异常</param>
            <returns>真实异常</returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名，支持多级属性名，与句点分隔，范例：Customer.Name</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取Lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,CommonLib.Expressions.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,CommonLib.Expressions.Operator,System.Linq.Expressions.Expression)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.ToPredicate``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建谓词表达式
            </summary>
            <typeparam name="T">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TException">异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsNullableType(System.Type)">
            <summary>
            是否可空类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsNullableType(System.Type,System.Type)">
            <summary>
            是否可空类型
            </summary>
            <param name="type">类型</param>
            <param name="genericParameterType">通用参数类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsNullableEnum(System.Type)">
            <summary>
            是否可空枚举类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            是否有指定特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.GetAttributes``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性集合
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsCustomType(System.Type)">
            <summary>
            是否自定义类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsAnonymousType(System.Type)">
            <summary>
            是否匿名类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.IsBaseType(System.Type,System.Type)">
            <summary>
            是否基类型
            </summary>
            <param name="type">类型</param>
            <param name="checkingType">检查类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CanUseForDb(System.Type)">
            <summary>
            能否用于数据库存储
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.Extensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="fileName">文件路径，包含文件名</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.InRange(System.Single,System.Single,System.Single)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.InRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>float</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.Days(System.Single)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">float</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.Hours(System.Single)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">float</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.Minutes(System.Single)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">float</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.Seconds(System.Single)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">float</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.FloatExtension.Milliseconds(System.Single)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">float</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.IsEven(System.Int32)">
            <summary>
            是否偶数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.IsOdd(System.Int32)">
            <summary>
            是否奇数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">int</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.IsPrime(System.Int32)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.ToOrdinal(System.Int32)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">int</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.ToOrdinal(System.Int32,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">int</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.AsLong(System.Int32)">
            <summary>
            Int转为Long类型
            </summary>
            <param name="i">int</param>
            <returns>long</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.GetArrayIndex(System.Int32)">
            <summary>
            获取真实数组索引
            </summary>
            <param name="at">int</param>
            <returns>数组索引</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Days(System.Int32)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">int</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Hours(System.Int32)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">int</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Minutes(System.Int32)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">int</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Seconds(System.Int32)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">int</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Milliseconds(System.Int32)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">int</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IntExtensions.Ticks(System.Int32)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">int</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.Write(System.IO.Stream,System.Byte[])">
            <summary>
            把字节数组全部写入当前流
            </summary>
            <param name="this">当前流</param>
            <param name="byteArray">要写入的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.WriteAsync(System.IO.Stream,System.Byte[])">
            <summary>
            把字节数组全部写入当前流
            </summary>
            <param name="this">当前流</param>
            <param name="byteArray">要写入的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.Append(System.IO.Stream,System.IO.Stream)">
            <summary>
            将一个Stream添加到当前Stream中
            </summary>
            <param name="this">当前Stream</param>
            <param name="stream">stream</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.AppendAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            将一个Stream添加到当前Stream中
            </summary>
            <param name="this">当前Stream</param>
            <param name="stream">stream</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ToByteArray(System.IO.Stream)">
            <summary>
                A Stream extension method that converts the Stream to a byte array.
            </summary>
            <param name="this">The Stream to act on.</param>
            <returns>The Stream as a byte[].</returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ToByteArrayAsync(System.IO.Stream)">
            <summary>
                A Stream extension method that converts the Stream to a byte array.
            </summary>
            <param name="this">The Stream to act on.</param>
            <returns>The Stream as a byte[].</returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ReadToEnd(System.IO.Stream)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.FileInfoExtension.CompareTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            比较文件
            </summary>
            <param name="file1">文件1</param>
            <param name="file2">文件2</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.FileInfoExtension.Read(System.IO.FileInfo)">
            <summary>
            读取文件并转换为字符串
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.FileInfoExtension.ReadBinary(System.IO.FileInfo)">
            <summary>
            读取文件并转换为二进制数组
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.FileInfoExtension.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            A FileInfo extension method that appends all lines.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:CommonLib.Extensions.IO.MemoryStreamExtension.AsString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            转换成字符串输出
            </summary>
            <param name="ms">内存流</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.MemoryStreamExtension.FromString(System.IO.MemoryStream,System.String,System.Text.Encoding)">
            <summary>
            写入字符串到内存流中
            </summary>
            <param name="ms">内存流</param>
            <param name="input">输入值</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ToArray(System.IO.Stream)">
             <summary>
            流转数组
             </summary>
             <param name="stream"></param>
             <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ToFile(System.IO.Stream,System.String)">
            <summary>
            将流写入指定文件路径
            </summary>
            <param name="stream">流</param>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ContentsEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            比较流内容是否相等
            </summary>
            <param name="stream">流</param>
            <param name="other">待比较的流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.GetReader(System.IO.Stream)">
            <summary>
            获取流读取器，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.GetReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流读取器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.GetWriter(System.IO.Stream)">
            <summary>
            获取流写入器，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.GetWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流写入器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认编码：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ReadToEnd(System.IO.Stream)">
            <summary>
            从流中读取所有文本，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从流中读取所有文本，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认编码：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.SeekToBegin(System.IO.Stream)">
            <summary>
            设置流指针指向流的开始位置
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.SeekToEnd(System.IO.Stream)">
            <summary>
            设置流指针指向流的结束位置
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.CopyToMemory(System.IO.Stream)">
            <summary>
            将流复制到内存流中
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.ReadAllBytes(System.IO.Stream)">
            <summary>
            将流写入字节数组
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.IO.StreamExtension.Write(System.IO.Stream,System.Byte[])">
            <summary>
            将字节数组写入流
            </summary>
            <param name="stream">流</param>
            <param name="bytes">字节数组</param>
        </member>
        <member name="M:CommonLib.Extensions.Linq.LambdaExpressionExtension.ExtractPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取属性信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Linq.LambdaExpressionExtension.ExtractFieldInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取字段信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Linq.LambdaExpressionExtension.ExtractMemberInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取成员信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Times(System.Int64,System.Action)">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">值</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">值</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.IsEven(System.Int64)">
            <summary>
            是否偶数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.IsOdd(System.Int64)">
            <summary>
            是否奇数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.InRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内
            </summary>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.InRange(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.IsPrime(System.Int64)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.ToOrdinal(System.Int64)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">值</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.ToOrdinal(System.Int64,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">值</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Days(System.Int64)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">值</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Hours(System.Int64)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">值</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Minutes(System.Int64)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">值</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Seconds(System.Int64)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">long</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Milliseconds(System.Int64)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">long</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.Ticks(System.Int64)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">long</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.LongTimeStampToDateTime(System.Int64,System.Boolean)">
            <summary>
            将给定 Unix 时间戳 转换为 DateTime 时间。单位毫秒
            </summary>
            <param name="unixTimeStamp">unixTimeStamp</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.ToDateTime(System.Int64,System.Boolean)">
            <summary>
            将给定 Unix 时间戳 转换为 DateTime 时间。 单位是秒
            </summary>
            <param name="unixTimeStamp">Unix 时间戳。</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.LongExtension.ToDateTime(System.Int32,System.Boolean)">
            <summary>
            将给定 Unix 时间戳 转换为 DateTime 时间。 单位是秒
            </summary>
            <param name="unixTimeStamp">Unix 时间戳。</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Extensions.NetworkHelper">
            <summary>
            网络帮助类
            </summary>
            <remarks>
            功能: 获取计算机全限定域名 <seealso cref="M:CommonLib.Extensions.NetworkHelper.GetFQDN"/>、 获取有效的IP地址 <seealso cref="M:CommonLib.Extensions.NetworkHelper.GetLocalIPAddress"/>、
            获取所有的IP地址 <seealso cref="M:CommonLib.Extensions.NetworkHelper.GetLocalIPAddresses"/>
            </remarks>
        </member>
        <member name="M:CommonLib.Extensions.NetworkHelper.GetFQDN">
            <summary>
            获取计算机全限定域名( <c>FQDN</c> , <c>Fully Qualified Domain Name</c>) <see href="http://stackoverflow.com/questions/804700/how-to-find-fqdn-of-local-machine-in-c-net"/>
            </summary>
            <remarks>关于FQDN: <see href="https://baike.baidu.com/item/FQDN/5102541"/></remarks>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.NetworkHelper.GetLocalIPAddress">
            <summary>
            获取本机联网使用的IP地址
            </summary>
            <remarks><see href="http://stackoverflow.com/a/27376368"/></remarks>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.NetworkHelper.GetLocalIPAddresses">
            <summary>
            获取本地所有的IP地址( 注意: 不包含IPv6) <see href="https://blog.stephencleary.com/2009/05/getting-local-ip-addresses.html"/>
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.NetworkHelper.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            判断IP是否是私有地址
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.ObjectExtension.IsNumeric(System.Object)">
            <summary>
            是否是数字类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.ObjectExtension.IsEnum(System.Object)">
            <summary>
            是否是枚举类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.PortHelper.portInUse(System.Int32,System.Boolean)">
            <summary>
            指定类型的端口是否已经被使用了
            </summary>
            <param name="port">端口号</param>
            <param name="isTcp">是否tcp</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextLong(System.Random)">
            <summary>
            获取下一个随机数。范围：[0,long.MaxValue]
            </summary>
            <param name="random">范围</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextLong(System.Random,System.Int64)">
            <summary>
            获取下一个随机数。范围：[0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextDouble(System.Random,System.Double)">
            <summary>
            获取下一个随机数。范围：[0.0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NormalDouble(System.Random)">
            <summary>
            标准正态分布生成随机双精度浮点数
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NormalDouble(System.Random,System.Double,System.Double)">
            <summary>
            标准正态分布生成随机双精度浮点数
            </summary>
            <param name="random">随机数</param>
            <param name="mean">均值</param>
            <param name="deviation">偏差</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextFloat(System.Random)">
            <summary>
            获取下一个随机数。范围：[0.0,1.0]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextFloat(System.Random,System.Single)">
            <summary>
            获取下一个随机数。范围：[0.0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NormalFloat(System.Random)">
            <summary>
            标准正态分布生成随机单精度浮点数
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NormalFloat(System.Random,System.Single,System.Single)">
            <summary>
            标准正态分布生成随机单精度浮点数
            </summary>
            <param name="random">随机数</param>
            <param name="mean">均值</param>
            <param name="deviation">偏差</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextSign(System.Random)">
            <summary>
            获取下一个随机数。范围：[-1,1]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextBool(System.Random)">
            <summary>
            获取下一个随机数。范围：[true,false]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.RandomExtension.NextBool(System.Random,System.Double)">
            <summary>
            获取下一个随机数。范围：[true,false]
            </summary>
            <param name="random">随机数</param>
            <param name="probability">true的概率。范围：[0.0,1.0]</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.GetFrameworkVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集标记的 <c>.net</c> 版本
            </summary>
            <param name="assembly">The assembly</param>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.GetAssemblyLocation(System.Reflection.Assembly)">
            <summary>
            获取程序集文件所在的目录 从 <seealso cref="P:System.Reflection.Assembly.Location"/> 处获取
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.GetAssemblyCodeBase(System.Reflection.Assembly)">
            <summary>
            获取程序集文件所在的目录 从 <seealso cref="P:System.Reflection.Assembly.CodeBase"/> 处实现
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.IsOptimized(System.Reflection.Assembly)">
            <summary>
            当前程序集是否以Release模式编译 参照 <see href="http://www.hanselman.com/blog/HowToProgrammaticallyDetectIfAnAssemblyIsCompiledInDebugOrReleaseMode.aspx"/>
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.AssemblyExtension.Is32Bit(System.Reflection.Assembly)">
            <summary>
            当前程序集是否是32位
            </summary>
        </member>
        <member name="T:CommonLib.Extensions.Reflections.DynamicFieldInfoHelper">
            <summary>
            动态编译类
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.DynamicFieldInfoHelper.SetValue(System.Object,System.String,System.Object)">
            <summary>
            动态赋值
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.DynamicFieldInfoHelper.SetValue``1(System.Object,System.String,``0)">
            <summary>
            泛型动态赋值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.DynamicFieldInfoHelper.GetValue(System.Object,System.String)">
            <summary>
            动态取值
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.DynamicFieldInfoHelper.GetValue``1(System.Object,System.String)">
            <summary>
            动态取值泛型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of
                the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the
                custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and
                the type of the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the
                type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the
                type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Determines whether any custom attributes are applied to a member of a type. Parameters specify the member,
                and the type of the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, type,
                or property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.MemberInfoExtensions.Extensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a member of a type. Parameters specify the member,
                the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, type,
                or property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom
                attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom
                attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type
                of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttributes(System.Reflection.Module)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an
                ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of
                the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.IsDefined(System.Reflection.Module,System.Type)">
            <summary>
                Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the
                module, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ModuleExtensions.Extensions.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of
                the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute(System.Object,System.Type)">
            <summary>An object extension method that gets the first custom attribute.</summary>
            <param name="this">The @this to act on.</param>
            <param name="attribute">The attribute.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute(System.Object,System.Type,System.Boolean)">
            <summary>
                An object extension method that gets the first custom attribute.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="attribute">The attribute.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute``1(System.Object)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attribute.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByFullName(System.Object,System.String)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByFullName(System.Object,System.String,System.Boolean)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByName(System.Object,System.String)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeDescription(System.Object)">
            <summary>
                An object extension method that gets description attribute.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeDescription(System.Object,System.Boolean)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeDescription(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributeDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes(System.Object)">
            <summary>An object extension method that gets custom attributes.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attributes.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes``1(System.Object)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attributes.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByFullName(System.Object,System.String)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByFullName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByName(System.Object,System.String)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetField``1(``0,System.String)">
            <summary>A T extension method that searches for the public field with the specified name.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <returns>
                An object representing the field that matches the specified requirements, if found;
                otherwise, null.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the specified field, using the specified
                binding constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="bindingAttr">
                A bitmask comprised of one or more BindingFlags that specify how the
                search is conducted.
            </param>
            <returns>
                An object representing the field that matches the specified requirements, if found;
                otherwise, null.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetFields(System.Object)">
            <summary>An object extension method that gets the fields.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of field information.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetFields(System.Object,System.Reflection.BindingFlags)">
            <summary>An object extension method that gets the fields.</summary>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>An array of field information.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetFieldValue``1(``0,System.String)">
            <summary>
                A T extension method that gets a field value (Public | NonPublic | Instance | Static)
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetMemberPaths``1(``0,System.String)">
            <summary>A T extension method that gets member paths.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="path">Full pathname of the file.</param>
            <returns>An array of member information.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetMethod``1(``0,System.String)">
            <summary>
                A T extension method that searches for the public method with the specified name.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the public method to get.</param>
            <returns>
                An object that represents the public method with the specified name, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the specified method whose parameters match the specified argument
                types and modifiers, using the specified binding constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the public method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>
                An object that represents the public method with the specified name, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetMethods``1(``0)">
            <summary>
                A T extension method that returns all the public methods of the current Type.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>
                An array of MethodInfo objects representing all the public methods defined for the current Type. or An empty
                array of type MethodInfo, if no public methods are defined for the current Type.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetMethods``1(``0,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the methods defined for the current Type, using the specified binding
                constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>
                An array of MethodInfo objects representing all methods defined for the current Type that match the specified
                binding constraints. or An empty array of type MethodInfo, if no methods are defined for the current Type, or
                if none of the defined methods match the binding constraints.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetProperties(System.Object)">
            <summary>An object extension method that gets the properties.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of property information.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetProperties(System.Object,System.Reflection.BindingFlags)">
            <summary>An object extension method that gets the properties.</summary>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>An array of property information.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetProperty``1(``0,System.String)">
            <summary>
                A T extension method that gets a property.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetProperty``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that gets a property.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetPropertyOrField``1(``0,System.String)">
            <summary>A T extension method that gets property or field.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The property or field.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.GetPropertyValue``1(``0,System.String)">
            <summary>
                A T extension method that gets property value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.InvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
                An object extension method that executes the method on a different thread, and waits for the result.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The obj to act on.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
                An object extension method that executes the method on a different thread, and waits for the result.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The obj to act on.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.IsAttributeDefined(System.Object,System.Type,System.Boolean)">
            <summary>
                An object extension method that query if '@this' is attribute defined.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">true to inherit.</param>
            <returns>true if attribute defined, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.IsAttributeDefined``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that query if '@this' is attribute defined.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>true if attribute defined, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.SetFieldValue``1(``0,System.String,System.Object)">
            <summary>
                A T extension method that sets field value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.Extensions.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                A T extension method that sets property value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsArray``1(``0)">
            <summary>
                A T extension method that query if '@this' is array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if array, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsClass``1(``0)">
            <summary>
                A T extension method that query if '@this' is class.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if class, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsEnum``1(``0)">
            <summary>
                A T extension method that query if '@this' is enum.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if enum, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsSubclassOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is subclass of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The Type to process.</param>
            <returns>true if subclass of, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsTypeOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is type of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The type.</param>
            <returns>true if type of, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ObjectExtension.TypeComparison.IsTypeOrInheritsOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is type or inherits of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The type.</param>
            <returns>true if type or inherits of, false if not.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the
                type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type
                of the custom attribute to search for, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, the type of the custom attribute to search for, and whether to search ancestors of the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Determines whether any custom attributes are applied to a method parameter. Parameters specify the method
                parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Reflections.ParameterInfoExtensions.Extensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a method parameter. Parameters specify the method
                parameter, the type of the custom attribute to search for, and whether to search ancestors of the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:CommonLib.Extensions.Security.ClaimsExtensions.TryAddClaim(System.Collections.Generic.List{System.Security.Claims.Claim},System.String,System.String,System.String)">
            <summary>
            尝试添加声明到列表当中。如果不存在，则添加；存在，不添加也不抛异常
            </summary>
            <param name="claims">声明列表</param>
            <param name="type">类型</param>
            <param name="value">值</param>
            <param name="valueType">值类型</param>
        </member>
        <member name="M:CommonLib.Extensions.Security.IdentityExtensions.GetValue(System.Security.Principal.IIdentity,System.String)">
            <summary>
            获取指定键名的值
            </summary>
            <param name="identity">标识</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Security.IdentityExtensions.GetValue``1(System.Security.Principal.IIdentity,System.String)">
            <summary>
            获取指定键名的值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="identity">标识</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.Trim(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            添加内容并换行
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="value">内容</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>
            添加数组内容
            </summary>
            <typeparam name="T">数组内容</typeparam>
            <param name="sb">StringBuilder</param>
            <param name="separator">分隔符</param>
            <param name="values">数组内容</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            根据条件添加内容
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            根据条件添加内容
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            根据条件添加内容并换行
            </summary>
            <param name="sb">StringBuiler</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringBuilderExtension.AppendLine(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            根据条件添加内容并换行
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <param name="parmaeters">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64ToFile(System.String,System.String,System.String)">
            <summary>
            base64字符串转文件
            </summary>
            <param name="str"></param>
            <param name="filename"></param>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64Encode(System.String)">
            <summary>
            Base64Encode with utf8 encoding
            </summary>
            <param name="str">source string</param>
            <returns>base64 encoded string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64Encode
            </summary>
            <param name="str">source string</param>
            <param name="encoding">encoding</param>
            <returns>base64 encoded string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64Decode(System.String)">
            <summary>
            Base64Decode with ytf8 encoding
            </summary>
            <param name="str">base64 encoded source string</param>
            <returns>base64 decoded string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64Decode
            </summary>
            <param name="str">base64 encoded source string</param>
            <param name="encoding">encoding</param>
            <returns>base64 decoded string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64UrlEncode(System.String)">
            <summary>
            Base64UrlEncode
            </summary>
            <param name="str">source string</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Base64UrlDecode(System.String)">
            <summary>
            Base64UrlEncode
            </summary>
            <param name="str">base64url encoded string</param>
            <returns>decode string</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetTypeByTypeName(System.String)">
            <summary>
            根据TypeName获取相应的Type 支持别名获取，如 int =&gt; System.Int32
            </summary>
            <param name="typeName">typename</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetNotEmptyValueOrDefault(System.String,System.String)">
            <summary>
            Return value if value IsNotNullOrEmpty else return dafaultValue
            </summary>
            <param name="str">string value</param>
            <param name="defaultValue">defaultValue</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetValueOrDefault(System.String,System.String)">
            <summary>
            Return value if value IsNotNullOrWhiteSpace else return dafaultValue
            </summary>
            <param name="str">string value</param>
            <param name="defaultValue">defaultValue</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetValueOrDefault(System.String,System.Func{System.String})">
            <summary>
            Return value if value IsNotNullOrWhiteSpace else return dafaultValue
            </summary>
            <param name="str">string value</param>
            <param name="getDefault">get defaultValue func</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.SplitArray``1(System.String)">
            <summary>
            string 转换为其他格式数据 如："1,2,3,,4" =&gt; new int[] { 1,2,3,4 }
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.SplitArray``1(System.String,System.Char[])">
            <summary>
            string 转换为其他格式数据 如："1,2,3,,4" =&gt; new int[] { 1,2,3,4 }
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="str">str</param>
            <param name="separators">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Remove(System.String,System.Char[])">
            <summary>
            从当前字符串中移除任何指定的字符
            </summary>
            <param name="value">值</param>
            <param name="removeChar">需要移除的字符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Remove(System.String,System.String[])">
            <summary>
            从当前字符串中移除任何指定的字符串
            </summary>
            <param name="value">值</param>
            <param name="strings">需要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            从当前字符串中移除指定索引的字符串
            </summary>
            <param name="value">值</param>
            <param name="index">索引</param>
            <param name="isLeft">是否左侧</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.RemoveAllSpecialCharacters(System.String)">
            <summary>
            移除当前字符串中的所有特殊字符
            </summary>
            <param name="value">输入字符串</param>
            <returns>调整后的字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.RemoveEnd(System.String,System.String)">
            <summary>
            去除字符串末尾指定的符号
            </summary>
            <param name="value">值</param>
            <param name="defaultChar">需要去除的符号，默认：,</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetTextLength(System.String)">
            <summary>
            获取字符串长度，支持汉字，每个汉字长度为2个字节
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，每个汉字长度为2个字节</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            切割字符串，指定最大长度
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            切割字符串，并指定最大长度和添加后缀
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            截断字符串，是否添加圆点
            </summary>
            <param name="value">字符串</param>
            <param name="length">截断长度</param>
            <param name="userElipse">是否使用圆点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.PadBoth(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            指定字符串长度，如果字符串长度大于指定的字符串长度，则截断字符串，若字符串长度小于指定字符串长度，则填充字符到指定字符串长度
            </summary>
            <param name="value">值</param>
            <param name="width">指定字符串长度</param>
            <param name="padChar">填充字符</param>
            <param name="truncate">是否截断</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.EnsureStartsWith(System.String,System.String)">
            <summary>
            确保字符串包含指定前缀
            </summary>
            <param name="value">值</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.EnsureEndWith(System.String,System.String)">
            <summary>
            确保字符串包含指定后缀
            </summary>
            <param name="value">值</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Repeat(System.String,System.Int32)">
            <summary>
            重复指定字符串，根据指定重复次数
            </summary>
            <param name="value">值</param>
            <param name="repeatCount">重复次数</param>
            <returns>重复字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ExtractNumber(System.String)">
            <summary>
            提取指定字符串中所有数字
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ConcatWith(System.String,System.String[])">
            <summary>
            连接两个字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="values">源字符串</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Join``1(System.String,System.String,``0[])">
            <summary>
            连接字符串数组的所有元素，根据指定分隔符
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="separator">分隔符</param>
            <param name="obj">对象数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.JoinNotNullOrEmpty(System.String[],System.String)">
            <summary>
            将字符串数组连接为字符串，如果值不为null或System.String.Empty，则将字符串数组连接
            </summary>
            <param name="values">字符串数组</param>
            <param name="separator">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetBefore(System.String,System.String)">
            <summary>
            获取指定字符串参数之前的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetBetween(System.String,System.String,System.String)">
            <summary>
            获取指定字符串参数之间的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定左侧字符串参数</param>
            <param name="y">指定右侧字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.GetAfter(System.String,System.String)">
            <summary>
            获取指定字符串参数之后的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Left(System.String,System.Int32)">
            <summary>
            获取字符串指定长度左边的部分
            </summary>
            <param name="value">值</param>
            <param name="leftLength">指定字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.Right(System.String,System.Int32)">
            <summary>
            获取字符串指定长度右边的部分
            </summary>
            <param name="value">值</param>
            <param name="rightLength">指定字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.SubstringFrom(System.String,System.Int32)">
            <summary>
            获取字符串指定索引部分
            </summary>
            <param name="value">值</param>
            <param name="index">指定索引</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToUpperFirstLetter(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToLowerFirstLetter(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToFirstLetter(System.String,System.Boolean)">
            <summary>
            首字母大小写
            </summary>
            <param name="value">值</param>
            <param name="isUpper">是否大写</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            将指定字符串转为词首字母大写
            </summary>
            <param name="value">值</param>
            <param name="culture">区域性信息</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToPlural(System.String)">
            <summary>
            将单词的单数形式转为复数形式
            </summary>
            <param name="singular">单数形式的单词</param>
            <returns>复数形式的单词</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})" -->
        <member name="M:CommonLib.Extensions.StringExtension.ParseCommandlineParams(System.String[])">
            <summary>
            解析命令行参数
            </summary>
            <param name="value">值</param>
            <returns>一个命令行参数字符串字典对象</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.EncodeEmailAddress(System.String)">
            <summary>
            将电子邮件地址进行编码，以便于链接仍然有效
            </summary>
            <param name="emailAddress">邮箱地址</param>
            <returns>编码后的邮箱地址</returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.RepairZero(System.String,System.Int32)">
            <summary>
            补足位数，指定字符串的固定长度，如果字符串小于固定长度，则在字符串的前面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="text">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换字符串-首匹配
            </summary>
            <param name="this">当前值</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ReplaceFirst(System.String,System.Int32,System.String,System.String)">
            <summary>
            替换字符串-首匹配
            </summary>
            <param name="this">当前值</param>
            <param name="number">替换数</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换字符串-尾匹配
            </summary>
            <param name="this">当前值</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ReplaceLast(System.String,System.Int32,System.String,System.String)">
            <summary>
            替换字符串-尾匹配
            </summary>
            <param name="this">当前值</param>
            <param name="number">替换数</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.StringExtension.ToInt(System.String,System.Int32)">
            <summary>
            字符串转数字
            </summary>
            <param name="this"></param>
            <param name="defaultValue">转换失败的默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            设置当前任务的最长等待时间<paramref name="timeout"/>，如果在指定的时间内还未执行完毕就报异常
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.TimeoutAfter``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.TimeSpan)">
            <summary>
            设置当前任务集合全部执行完毕的最长等待时间<paramref name="timeout"/>，如果在指定的时间内还未执行完毕就报异常
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            设置当前任务的最长等待时间<paramref name="timeout"/>，如果在指定的时间内还未执行完毕就报异常
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.TimeoutAfter(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.TimeSpan)">
            <summary>
            设置当前任务集合全部执行完毕的最长等待时间<paramref name="timeout"/>，如果在指定的时间内还未执行完毕就报异常
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.ForEachInOrder``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            使用指定的逻辑顺序处理任务集合的返回结果
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.ForEachInOrder(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>
            使用指定的逻辑顺序处理任务集合的返回结果
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.GetAwaiter``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            等待当前集合中所有任务的返回，代码示例：
            </summary>
            <example>
            <code>
            var res3 = await new List&lt;Task&lt;int&gt;&gt;() {
                Task.Run&lt;int&gt;(()=>1),
                Task.Run&lt;int&gt;(()=>2),
                Task.Run&lt;int&gt;(()=>3)
            };
            //输出: 1,2,3
            Console.WriteLine(string.Join(",", res3));
            </code>
            </example>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.GetAwaiter(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            等待当前集合中所有任务的返回
            </summary>
            <example>
            <code>
                var res3 = await new List&lt;Task&gt;() {
                    Task.Run(()=>{}),
                    Task.Run(()=>{}),
                    Task.Run(()=>{})
                };
            </code>
            </example>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.HandleExceptions(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            处理当前任务中出现的异常
            </summary>
            <example>
            <code>
            Task.Run(() =>
            {
                int i = 0;
                i = 1 / i;
             }).HandleExceptions((ex) =>
             {
                //输出: 尝试除以0
                Console.WriteLine(ex.Message);
             }).Wait();
            </code>
            </example>
            <param name="task">The task which might throw exceptions</param>
            <param name="exceptionsHandler">The handler to which every exception is passed</param>
            <returns>当前任务的延续任务</returns>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.HandleExceptions(System.Threading.Tasks.Task,System.Func{System.Exception,System.Boolean},System.Action{System.Exception})">
            <summary>
            使用<paramref name="exceptionHandler"/>处理当前任务预测 (<paramref name="exceptionPredicate"/>) 的异常, 如果<paramref name="exceptionPredicate"/>返回false, 则抛出异常
            </summary>
            参考：
            <seealso cref="!:TaskExtensions.HandleException&lt;T&gt;(Task, Action&lt;T&gt;)"/>
            <remarks>
            </remarks>
        </member>
        <member name="M:CommonLib.Extensions.TaskExtension.HandleException``1(System.Threading.Tasks.Task,System.Action{``0})">
            <summary>
            预测当前任务抛出的异常是否是<typeparamref name="T"/>类型, 如果是,则调用<paramref name="exceptionHandler"/>处理异常, 否则抛出异常
            </summary>
            <remarks>
            参考：
            <seealso cref="!:TaskExtensions.HandleException&lt;T&gt;(Task, Action&lt;T&gt;)"/>
            </remarks>
        </member>
        <member name="M:CommonLib.Extensions.Threading.TaskExtensions.WaitResult``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            等待结果
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="timeout">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Threading.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Threading.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Threading.TaskFactoryExtension.StartDelayedTask(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>
            启动延时任务
            </summary>
            <param name="factory">任务工厂</param>
            <param name="millisecondsDelay">延时时间。单位：毫秒</param>
            <param name="action">操作</param>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.BasicTypes">
            <summary>
            基础类型
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetTypeCode(System.Type)">
            <summary>
            get TypeCode for specific type
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsValueTuple(System.Type)">
            <summary>
            是否是 ValueTuple
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetDescription(System.Type)">
            <summary>
            GetDescription
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsPrimitiveType(System.Type)">
            <summary>
            判断是否基元类型，如果是可空类型会先获取里面的类型，如 int? 也是基元类型
            The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Char, Double, and Single.
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.FindEmptyConstructor(System.Type)">
            <summary>
            Finds best constructor
            </summary>
            <param name="type">type</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsAssignableTo``1(System.Type)">
            <summary>
            Determines whether this type is assignable to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to test assignability to.</typeparam>
            <param name="this">The type to test.</param>
            <returns>True if this type is assignable to references of type
            <typeparamref name="T"/>; otherwise, False.</returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetMatchingConstructor(System.Type,System.Type[])">
            <summary>
            Finds a constructor with the matching type parameters.
            </summary>
            <param name="type">The type being tested.</param>
            <param name="constructorParameterTypes">The types of the contractor to find.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> is a match is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetImplementedInterfaces(System.Type)">
            <summary>
            Get ImplementedInterfaces
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.TryGetInstanceProperty(System.Type,System.String,System.Reflection.PropertyInfo@,System.Boolean)">
            <summary>
            尝试反射返回给定<paramref name="type"/>的<c>实例</c>属性
            </summary>
            <param name="type"></param>
            <param name="propertyName">属性名称</param>
            <param name="property">返回的属性</param>
            <param name="inherit">是否返回继承属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetInstanceProperties(System.Reflection.TypeInfo,System.Boolean,System.Boolean)">
            <summary>
            根据条件返回所有能获取到的属性描述
            </summary>
            <remarks>此方法可用于返回<c>public</c>或<c>non-public </c>属性。</remarks>
            <param name="typeInfo"></param>
            <param name="inherit">是否返回继承属性</param>
            <param name="includePrivate">是否包含私有属性</param>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetPropertiesWithAttribute``1(System.Type,System.Boolean)">
            <summary>
            根据条件返回具有 <c>T</c> 特性的属性
            </summary>
            <param name="type"></param>
            <param name="inherit">是否返回继承的属性</param>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.GetAttributeToPropertyMapping``1(System.Type,System.Boolean)">
            <summary>
            返回具有 <c>T</c> 特性的属性, 并将 <c>T</c> 实例和对应的属性描述转为字典
            </summary>
            <param name="type"></param>
            <param name="inherit">是否包含继承的属性</param>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.TryGetAttributes``1(System.Type,``0[]@,System.Boolean)">
            <summary>
            尝试获取当前 <seealso cref="T:System.Type"/> 上定义的所有 <typeparamref name="T"/> 类型的特性数组
            </summary>
            <param name="type"></param>
            <param name="attributes"></param>
            <param name="inherit">是否包含继承的特性</param>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.TryGetGenericArguments(System.Type,System.Type[]@)">
            <summary>
            如果当前类型具有泛型参数的话,就返回所有的泛型类型，代码示例：
            </summary>
            <example>
            <code>
            if (typeof(Dictionary&lt;string, object&gt;).TryGetGenericArguments(out Type[] res))
            {
                //输出: System.String,System.Object
                Console.WriteLine(string.Join(",", res.ToList()));
            }   
            </code>
            </example>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsSequence(System.Type,CommonLib.Extensions.TypeExtension.SequenceType@)">
            <summary>
            判断当前类型是否是序列(数组、集合) 注意：包括字符串
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.Implements``1(System.Type)">
            <summary>
            判断当前类型是否继承自<typeparamref name="T"/> 注意：<typeparamref name="T"/>可以是接口或类
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.HasDefaultConstructor(System.Type)">
            <summary>
            判断当前类型是否具有空参数构造函数
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsSimpleType(System.Type)">
            <summary>
            判断当前类型是否是简单类型
            </summary>
            <remarks>
            <para>
            简单类型如下（包含简单类型的可空类型）
            </para>
            <code>
            typeof(byte),
            typeof(sbyte),
            typeof(short),
            typeof(ushort),
            typeof(int),
            typeof(uint),
            typeof(long),
            typeof(ulong),
            typeof(float),
            typeof(double),
            typeof(decimal),
            typeof(bool),
            typeof(string),
            typeof(char),
            typeof(Guid),
            typeof(DateTime),
            typeof(DateTimeOffset),
            typeof(TimeSpan),
            typeof(byte[])
            </code>
            </remarks>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsArrayOf``1(System.Type)">
            <summary>
            判断当前类型是否是数组 <c>T[]</c>
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsGenericList(System.Type)">
            <summary>
            判断当前类型是否是 <c>List&lt;&gt;</c> 或 <c>IList&lt;&gt;</c>
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsNumeric(System.Type)">
            <summary>
            判断当前类型是否是数字类型
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.TypeExtension.IsNullable(System.Type)">
            <summary>
            是否是Nullable类型的
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:CommonLib.Extensions.TypeExtension.SequenceType">
            <summary>
            表示可能的序列类型(集合)
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Invalid">
            <summary>
            不是一个序列类型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.String">
            <summary>
            代表 <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Array">
            <summary>
            代表 Array.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.BitArray">
            <summary>
            代表 <see cref="T:System.Collections.BitArray"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.ArrayList">
            <summary>
            代表 <see cref="T:System.Collections.ArrayList"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Queue">
            <summary>
            代表 <see cref="T:System.Collections.Queue"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Stack">
            <summary>
            代表 <see cref="T:System.Collections.Stack"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Hashtable">
            <summary>
            代表 <see cref="T:System.Collections.Hashtable"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.SortedList">
            <summary>
            代表 <see cref="T:System.Collections.SortedList"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Dictionary">
            <summary>
            代表 <see cref="F:CommonLib.Extensions.TypeExtension.SequenceType.Dictionary"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.ListDictionary">
            <summary>
            代表 <see cref="F:CommonLib.Extensions.TypeExtension.SequenceType.ListDictionary"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.IList">
            <summary>
            代表 <see cref="T:System.Collections.IList"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.ICollection">
            <summary>
            代表 <see cref="T:System.Collections.ICollection"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.IDictionary">
            <summary>
            代表 <see cref="T:System.Collections.IDictionary"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.IEnumerable">
            <summary>
            代表n <see cref="T:System.Collections.IEnumerable"/>. 非泛型
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.Custom">
            <summary>
            代表 自己实现的 <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericList">
            <summary>
            代表 <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericLinkedList">
            <summary>
            代表 <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericCollection">
            <summary>
            代表 <see cref="!:Collection&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericQueue">
            <summary>
            代表 <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericStack">
            <summary>
            代表 <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericHashSet">
            <summary>
            代表 <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericSortedList">
            <summary>
            代表 <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericDictionary">
            <summary>
            代表 <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericSortedDictionary">
            <summary>
            代表 <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericBlockingCollection">
            <summary>
            代表 <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericConcurrentDictionary">
            <summary>
            代表 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericConcurrentBag">
            <summary>
            代表 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericIList">
            <summary>
            代表 <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericICollection">
            <summary>
            代表 <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericIEnumerable">
            <summary>
            代表 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericIDictionary">
            <summary>
            代表 <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericICollectionKeyValue">
            <summary>
            代表 <see> <cref>ICollection{KeyValuePair{TKey, TValue}}</cref></see>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericIEnumerableKeyValue">
            <summary>
            代表 <see> <cref>IEnumerable{KeyValuePair{TKey, TValue}}</cref></see>.
            </summary>
        </member>
        <member name="F:CommonLib.Extensions.TypeExtension.SequenceType.GenericCustom">
            <summary>
            代表 自定义实现的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlExtension.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNode转换为XElement
            </summary>
            <param name="node">Xml节点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlExtension.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <param name="element">Xml元素</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.CreateChildNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            创建Xml子节点，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="name">子节点的名称</param>
            <param name="namespaceUri">节点的命名空间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.CreateCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            创建CData节点，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="data">CData节</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.GetCdataSection(System.Xml.XmlNode)">
            <summary>
            获取CData节点的内容
            </summary>
            <param name="parentNode">父节点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="defaultValue">默认值。如果没有匹配属性存在</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.GetAttribute``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取Xml节点属性值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="defaultValue">>默认值。如果没有匹配属性存在</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:CommonLib.Extensions.Xml.XmlNodeExtension.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="P:CommonLib.Files.FileDetector.AbstractCompoundFileDetailDetector.SignatureInformations">
            <inheritdoc />
        </member>
        <member name="F:CommonLib.Files.FileDetector.SignatureInformation.Position">
             <summary>
            
             </summary>
        </member>
        <member name="F:CommonLib.Files.FileDetector.SignatureInformation.Signature">
             <summary>
            
             </summary>
        </member>
        <member name="F:CommonLib.Files.FileDetector.SignatureInformation.Presignature">
             <summary>
            
             </summary>
        </member>
        <member name="M:CommonLib.Files.FileDetector.FileSignatureDetector.DetectFiletype(System.IO.FileInfo)">
            <summary>
            检测文件类型
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileDetector.FileSignatureDetector.DetectFiletype(System.IO.Stream)">
            <summary>
            检测文件类型
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Files.FileDetector.IDetector.Precondition">
            <summary>
            基础文件类型
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileDetector.IDetector.Extension">
            <summary>
            真实扩展名
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileDetector.IDetector.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileDetector.IDetector.FormatCategories">
            <summary>
            格式类别
            </summary>
        </member>
        <member name="M:CommonLib.Files.FileDetector.NoneDetector.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:CommonLib.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileInfo.Id">
            <summary>
            文件标识
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileInfo.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:CommonLib.Files.FileInfo.#ctor(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.Files.FileInfo"/>类型的实例
            </summary>
            <param name="path">文件路径</param>
            <param name="size">文件大小</param>
            <param name="fileName">文件名</param>
            <param name="id">文件标识</param>
        </member>
        <member name="T:CommonLib.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:CommonLib.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:CommonLib.Files.FileSize.#ctor(System.Int64,CommonLib.Files.FileSizeUnit)">
            <summary>
            初始化一个<see cref="T:CommonLib.Files.FileSize"/>类型的实例
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="M:CommonLib.Files.FileSize.GetSize(System.Int64,CommonLib.Files.FileSizeUnit)">
            <summary>
            获取文件大小
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.FileSizeUnit">
            <summary>
            文件大小单位
            </summary>
        </member>
        <member name="F:CommonLib.Files.FileSizeUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:CommonLib.Files.FileSizeUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:CommonLib.Files.FileSizeUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:CommonLib.Files.FileSizeUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:CommonLib.Files.FileSizeUnitExtensions">
            <summary>
            文件大小单位枚举扩展
            </summary>
        </member>
        <member name="M:CommonLib.Files.FileSizeUnitExtensions.Description(System.Nullable{CommonLib.Files.FileSizeUnit})">
            <summary>
            获取描述
            </summary>
            <param name="unit">文件大小单位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.FileSizeUnitExtensions.Value(System.Nullable{CommonLib.Files.FileSizeUnit})">
            <summary>
            获取值
            </summary>
            <param name="unit">文件大小单位</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.IFileStore">
            <summary>
            文件存储服务
            </summary>
        </member>
        <member name="M:CommonLib.Files.IFileStore.SaveAsync">
            <summary>
            保存文件，返回完整文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.IMimeMapper.Extend(CommonLib.Files.MimeMappingItem[])">
            <summary>
            扩展Mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.IMimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            根据扩展名获取mime type
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.IMimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取Mime Type
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.MimeMapper">
            <summary>
            默认MIME映射器，可以根据文件扩展名获取标准内容类型。
            </summary>
        </member>
        <member name="F:CommonLib.Files.MimeMapper.DefaultMime">
            <summary>
            默认Mime  - 如果没有找到任何其他映射则作为默认的Mime-Type
            </summary>
        </member>
        <member name="F:CommonLib.Files.MimeMapper._pathExtensionPattern">
            <summary>
            在文件路径中搜索文件扩展名的默认正则表达式
            </summary>
        </member>
        <member name="P:CommonLib.Files.MimeMapper.MimeTypes">
            <summary>
            Mime类型与扩展名的映射字典(扩展名:mimetype)
            </summary>
        </member>
        <member name="P:CommonLib.Files.MimeMapper.ExtTypes">
            <summary>
            mime类型与扩展名的映射关系(mimetype:扩展名)
            </summary>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.#ctor(CommonLib.Files.MimeMappingItem[])">
            <summary>
            
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.Extend(CommonLib.Files.MimeMappingItem[])">
            <summary>
            扩展mime映射规则的标准列表。扩展的具有更高的优先级 - 如果扩展具有与标准项相同的扩展名，则会覆盖默认的mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            返回特定文件扩展名的Content-Type，如果未找到任何对应关系，则返回默认值
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.GetExtensionFromMime(System.String)">
            <summary>
            返回特定Content-Type的文件扩展名，如果未找到任何对应关系，则返回空值
            </summary>
            <param name="mime"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取MimeType
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.MimeMapper.GetExtension(System.String)">
            <summary>
            获取扩展名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Files.MimeMappingItem.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:CommonLib.Files.MimeMappingItem.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="T:CommonLib.Files.Paths.DefaultBasePath">
            <summary>
            默认基路径
            </summary>
        </member>
        <member name="F:CommonLib.Files.Paths.DefaultBasePath._path">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:CommonLib.Files.Paths.DefaultBasePath.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.Files.Paths.DefaultBasePath"/>类型的实例
            </summary>
            <param name="path">基路径</param>
        </member>
        <member name="M:CommonLib.Files.Paths.DefaultBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.Paths.DefaultPathGenerator">
            <summary>
            默认路径生成器
            </summary>
        </member>
        <member name="F:CommonLib.Files.Paths.DefaultPathGenerator._basePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:CommonLib.Files.Paths.DefaultPathGenerator.#ctor(CommonLib.Files.Paths.IBasePath,CommonLib.Randoms.IRandomGenerator)">
            <summary>
            初始化一个<see cref="T:CommonLib.Files.Paths.DefaultPathGenerator"/>类型的实例
            </summary>
            <param name="basePath">基路径</param>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:CommonLib.Files.Paths.DefaultPathGenerator.GeneratePath(System.String)">
            <summary>
            创建完整路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.Paths.IBasePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:CommonLib.Files.Paths.IBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.Paths.IPathGenerator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="M:CommonLib.Files.Paths.IPathGenerator.Generate(System.String)">
            <summary>
            生成路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Files.Paths.PathGeneratorBase">
            <summary>
            路径生成器基类
            </summary>
        </member>
        <member name="F:CommonLib.Files.Paths.PathGeneratorBase._randomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:CommonLib.Files.Paths.PathGeneratorBase.#ctor(CommonLib.Randoms.IRandomGenerator)">
            <summary>
            初始化一个<see cref="T:CommonLib.Files.Paths.PathGeneratorBase"/>类型的实例
            </summary>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:CommonLib.Files.Paths.PathGeneratorBase.Generate(System.String)">
            <summary>
            生成路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.Paths.PathGeneratorBase.GeneratePath(System.String)">
            <summary>
            创建完整路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.Paths.PathGeneratorBase.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.Paths.PathGeneratorBase.FilterFileName(System.String)">
            <summary>
            过滤文件名
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Files.ReturnFileFormat.FileToBase64String(System.String)">
            <summary>
            文件转base64
            </summary>
            <returns>base64字符串</returns>
        </member>
        <member name="M:CommonLib.Files.ReturnFileFormat.FileToByte(System.String)">
            <summary>
            根据文件路径获取二进制编码
            </summary>
            <param name="file_path"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.FtpClient">
            <summary>
            FTP客户端操作类
            </summary>
        </member>
        <member name="P:CommonLib.FtpClient.FtpServer">
            <summary>
            Ftp服务器ip
            </summary>
        </member>
        <member name="P:CommonLib.FtpClient.Username">
            <summary>
            Ftp 指定用户名
            </summary>
        </member>
        <member name="P:CommonLib.FtpClient.Password">
            <summary>
            Ftp 指定用户密码
            </summary>
        </member>
        <member name="P:CommonLib.FtpClient.IsCredential">
            <summary>
            是否要验证用户
            </summary>
        </member>
        <member name="P:CommonLib.FtpClient.PassiveMode">
            <summary>
            是否被动模式,一般采用主动模式false
            </summary>
        </member>
        <member name="M:CommonLib.FtpClient.GetAnonymousClient(System.String,System.Boolean)">
            <summary>
            获取一个匿名登录的ftp客户端
            </summary>
            <param name="serverIp">服务器IP地址</param>
            <param name="passiveModel">usePassive=true 被动模式/usePassive=false 主动模式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GetClient(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取一个匿名登录的ftp客户端
            </summary>
            <param name="serverIp">服务器ip</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="passiveModel">usePassive=true 被动模式/usePassive=false 主动模式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.Download(System.String,System.String,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:CommonLib.FtpClient.BrokenDownload(System.String,System.String,System.Int64,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名（支持断点下载）
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="size">已下载文件流大小</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:CommonLib.FtpClient.Download(System.String,System.String,System.Boolean,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
            <param name="brokenOpen">是否断点下载：true 会在localFileName 找是否存在已经下载的文件，并计算文件流大小</param>
        </member>
        <member name="M:CommonLib.FtpClient.UploadFile(System.String,System.String,System.Action{System.Int32,System.Int32})">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="relativePath">相对目录</param>
            <param name="localFullPathName">本地带有完整路径的文件名</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:CommonLib.FtpClient.UploadBroken(System.String,System.String,System.Action{System.Int32,System.Int32})">
            <summary>
            上传文件到FTP服务器(断点续传)
            </summary>
            <param name="localFullPath">本地文件全路径名称：C:\Users\JianKunKing\Desktop\IronPython脚本测试工具</param>
            <param name="remoteFilepath">远程文件所在文件夹路径</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GetFileSize(System.String,System.String)">
            <summary>
            获取已上传文件大小
            </summary>
            <param name="filePath">文件名称</param>
            <param name="remoteFilepath">服务器文件路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.RemoveSpaces(System.String)">
            <summary>
            去除空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GetFilesDetails(System.String)">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GetFiles(System.String,System.String)">
            <summary>
            获取当前目录下文件列表(仅文件)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GetDirectories(System.String)">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:CommonLib.FtpClient.RemoveDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="dirPath"></param>
        </member>
        <member name="M:CommonLib.FtpClient.GetFileSize(System.String)">
            <summary>
            获取指定文件大小
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="remoteDirPath">指定的目录名</param>
        </member>
        <member name="M:CommonLib.FtpClient.FileExist(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在
            </summary>
            <param name="remoteFileName">远程文件名</param>
        </member>
        <member name="M:CommonLib.FtpClient.MakeDir(System.String,System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="relativePath">路径</param>
            <param name="newDir">新建文件夹</param>
        </member>
        <member name="M:CommonLib.FtpClient.Rename(System.String,System.String,System.String)">
            <summary>
            改名
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:CommonLib.FtpClient.MoveFile(System.String,System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="currentFilename"></param>
            <param name="newDirectory"></param>
        </member>
        <member name="M:CommonLib.FtpClient.GenerateFtpReq(System.Uri,System.String)">
            <summary>
            创建ftp请求
            </summary>
            <param name="uri"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.FtpClient.GenerateUri(System.String[],System.String)">
            <summary>
            生成uri地址
            </summary>
            <param name="parameters">参数</param>
            <param name="protocol">协议 http:// https:// ftp://</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ApKTools.DecompileApkFile(System.String,System.String)">
            <summary>
            apktool反编译apk文件 Path.DirectorySeparatorChar 系统的路径分隔符（Linux为左斜杠 windows为右斜杠） </summary>
            <param name="url">待反编译的apk文件</param> <param name="apkToolsPath">apktool.jar路径</param> <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ApplicationHelper.GetProcessStartupDuration">
            <summary>
            获取当前进程运行持续的时间
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.ApplicationHelper.IsWindows">
            <summary>
            判断当前操作系统是否是 <c>Windows</c>.
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.ApplicationHelper.IsLinux">
            <summary>
            判断当前操作系统是否是 <c>Linux</c>.
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.ApplicationHelper.IsOSX">
            <summary>
            判断当前操作系统是否是 <c>OSX</c>.
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.ApplicationHelper.OSPlatform">
            <summary>
            返回操作系统的类型 <seealso cref="P:CommonLib.Helpers.ApplicationHelper.OSPlatform"/>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.ApplicationHelper.IsProcessLargeAddressAware">
            <summary>
            判断当前程序是否是 <c>LARGEADDRESSAWARE</c>
            <para>关于LARGEADDRESSAWARE,参考: <seealso href="https://helloacm.com/large-address-aware/"/></para>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.ApplicationHelper.IsLargeAddressAware(System.String)">
            <summary>
            <see href="https://helloacm.com/large-address-aware/"/>
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Check">
            <summary>
            参数检查操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Check.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TException">异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotNullOrEmpty``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            检查字典不能为空引用或空字典，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:CommonLib.Helpers.Check.LessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.GreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.Between``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="start">比较范围的起始值</param>
            <param name="end">比较范围的结束值</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.NotNegativeOrZero(System.TimeSpan,System.String)">
            <summary>
            检查参数不能为负数或零，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <param name="timeSpan">时间戳</param>
            <param name="paramaName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.DirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Helpers.Check.FileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="fileName">文件路径，包含文件名</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="T:CommonLib.Helpers.ColorConverter">
            <summary>
            颜色转换器
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ToHex(System.Drawing.Color)">
            <summary>
            转换为16进制颜色
            </summary>
            <param name="color">颜色</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ToRgb(System.Drawing.Color)">
            <summary>
            转换为RGB颜色
            </summary>
            <param name="color">颜色</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.RgbToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            RGB格式转换为16进制颜色
            </summary>
            <param name="r">红色</param>
            <param name="g">绿色</param>
            <param name="b">蓝色</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.GetColorFromCssString(System.String)">
            <summary>
            从样式颜色中获取系统颜色
            </summary>
            <param name="cssColour">样式颜色</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.HslaToRgba(System.Int16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Hsla格式转换为RGBA格式
            </summary>
            <param name="hue"></param>
            <param name="saturation"></param>
            <param name="lightness"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ParseRgb(System.String)">
            <summary>
            格式化RGB
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ParseClamp(System.String,System.Double,System.Double)">
            <summary>
            格式化范围值
            </summary>
            <param name="input"></param>
            <param name="maxValue"></param>
            <param name="minValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ParseFloat(System.String)">
            <summary>
            格式化Float
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ColorConverter.ParseHue(System.String)">
            <summary>
            格式化Hue
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Common">
            <summary>
            常用公共操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Common.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Common.GetType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Helpers.Common.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Compression">
            <summary>
            压缩操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Compression.Compress(System.Byte[])">
            <summary>
            对byte[]数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Compression.Decompress(System.Byte[])">
            <summary>
            对byte[]数组进行解压
            </summary>
            <param name="data">待解压的byte数组U</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Compression.Compress(System.String)">
            <summary>
            对字符串进行压缩
            </summary>
            <param name="value">待压缩的字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Compression.Decompress(System.String)">
            <summary>
            对字符串进行解压
            </summary>
            <param name="value">待解压的字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Compression.Zip(System.String,System.String)">
            <summary>
            将文件夹压缩成zip文件
            </summary>
            <param name="sourceDir">压缩目录</param>
            <param name="zipFile">压缩文件存放路径</param>
        </member>
        <member name="M:CommonLib.Helpers.Compression.UnZip(System.String,System.String)">
            <summary>
            将zip文件解压到指定文件夹
            </summary>
            <param name="zipFile">压缩文件路径</param>
            <param name="targetDir">目标解压目录</param>
        </member>
        <member name="T:CommonLib.Helpers.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.ArabicNumbers">
            <summary>
            阿拉伯数字
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.ChineseNumbers">
            <summary>
            汉字数字
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.Lowercase">
            <summary>
            小写英文字母
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.Uppercase">
            <summary>
            大写英文字母
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Const.FileExtensionDict">
            <summary>
            文件扩展类型字典
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.SpellLetter">
            <summary>
            拼音字母数组
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Const.SpellCode">
            <summary>
            拼音区编码数组
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Conv">
            <summary>
            类型转换操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToByte(System.Object)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToByte(System.Object,System.Byte)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToByteOrNull(System.Object)">
            <summary>
            转换为8位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToChar(System.Object)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToChar(System.Object,System.Char)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToCharOrNull(System.Object)">
            <summary>
            转换为可空字符
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToShort(System.Object)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToShort(System.Object,System.Int16)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToShortOrNull(System.Object)">
            <summary>
            转换为16位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToInt(System.Object,System.Int32)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToLong(System.Object,System.Int64)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToFloat(System.Object,System.Single,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDouble(System.Object,System.Double,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDecimal(System.Object,System.Decimal,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToBool(System.Object,System.Boolean)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">输入值，以逗号分隔的Guid集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">输入值，以逗号分隔的元素集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToEnum``1(System.Object)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToEnum``1(System.Object,``0)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.ToEnumOrNull``1(System.Object)">
            <summary>
            转换为可空枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Conv.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.DomainHelper.LookUp(System.String,System.String)">
            <summary>
            获取域名的信息
            </summary>
            <param name="domain">域名</param>
            <param name="filePath">生成的文件路径</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Encrypt">
            <summary>
            加密操作
            说明：
            1、AES加密整理自支付宝SDK
            2、RSA加密采用 https://github.com/stulzq/DotnetCore.RSA/blob/master/DotnetCore.RSA/RSAHelper.cs
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <param name="startIndex">开始索引</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Helpers.Encrypt.DesKey">
            <summary>
            DES密钥，24位字符串
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesEncrypt(System.Object)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesEncrypt(System.Object,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesEncrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥，24位</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.ValidateDes(System.String,System.String)">
            <summary>
            验证Des加密参数
            </summary>
            <param name="text">待加密的文本</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.CreateDesProvider(System.String)">
            <summary>
            创建Des加密服务提供程序
            </summary>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.GetEncryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取加密结果
            </summary>
            <param name="value">待加密的值</param>
            <param name="encoding">字符编码</param>
            <param name="transform">加密器</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesDecrypt(System.Object)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesDecrypt(System.Object,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.DesDecrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥，24位</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.GetDecryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取解密结果
            </summary>
            <param name="value">待解密的值</param>
            <param name="encoding">字符编码</param>
            <param name="transform">加密器</param>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Helpers.Encrypt._iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Encrypt.Iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Encrypt.AesKey">
            <summary>
            AES密钥
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesEncrypt(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesEncrypt(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.CreateRijndaelManaged(System.String)">
            <summary>
            创建RijndaelManaged
            </summary>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesDecrypt(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesDecrypt(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.AesDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaSign(System.String,System.String)">
            <summary>
            RSA签名，采用 SHA1 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA签名，采用 SHA1 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Rsa2Sign(System.String,System.String)">
            <summary>
            RSA签名，采用 SHA256 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Rsa2Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA签名，采用 SHA256 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding,CommonLib.Helpers.Internal.RSAType)">
            <summary>
            RSA签名
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <param name="type">RSA算法类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String)">
            <summary>
            RSA验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String)">
            <summary>
            RSA验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding,CommonLib.Helpers.Internal.RSAType)">
            <summary>
            RSA验签
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <param name="type">RSA算法类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacMd5(System.String,System.String)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacMd5(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha1(System.String,System.String)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha1(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha256(System.String,System.String)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha256(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha384(System.String,System.String)">
            <summary>
            HMACSHA384加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha384(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA384加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha512(System.String,System.String)">
            <summary>
            HMACSHA512加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.HmacSha512(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA512加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha1(System.String,System.Text.Encoding)">
            <summary>
            SHA1加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha256(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha256(System.String,System.Text.Encoding)">
            <summary>
            SHA256加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha384(System.String)">
            <summary>
            SHA384加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha384(System.String,System.Text.Encoding)">
            <summary>
            SHA384加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha512(System.String)">
            <summary>
            SHA512加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Sha512(System.String,System.Text.Encoding)">
            <summary>
            SHA512加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Encrypt.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Enum">
            <summary>
            枚举 操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Enum.Parse``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值，范例：Enum1枚举有成员A=0，则传入"A"或"0"获取 Enum1.A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetNames(System.Type)">
            <summary>
            获取枚举所有成员名称
            </summary>
            <param name="type">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetItems``1">
            <summary>
            获取描述项集合，文本设置为Description，值为Value
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetItems(System.Type)">
            <summary>
            获取描述项集合，文本设置为Description，值为Value
            </summary>
            <param name="type">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.ValidateEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
            <param name="enumType">类型</param>
        </member>
        <member name="M:CommonLib.Helpers.Enum.AddItem(System.Type,System.Collections.Generic.ICollection{CommonLib.Helpers.Item},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
            <param name="type">枚举类型</param>
            <param name="result">集合</param>
            <param name="field">字段</param>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetEnumItemByDescription``1(System.String)">
            <summary>
            获取指定描述信息的枚举项
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="desc">枚举项描述信息</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.GetDictionary``1">
            <summary>
            获取枚举字典
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Enum.AddItem``1(System.Collections.Generic.Dictionary{System.Int32,System.String},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="result">集合</param>
            <param name="field">字典</param>
        </member>
        <member name="T:CommonLib.Helpers.Format">
            <summary>
            格式化操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Format.EncryptPhoneOfChina(System.String)">
            <summary>
            加密手机号码
            </summary>
            <param name="phone">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Format.EncryptPlateNumberOfChina(System.String)">
            <summary>
            加密车牌号
            </summary>
            <param name="plateNumber">车牌号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Format.EncryptVinCode(System.String)">
            <summary>
            加密汽车VIN
            </summary>
            <param name="vinCode">汽车VIN</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Format.FormatMoney(System.Decimal,System.Boolean)">
            <summary>
            格式化金额
            </summary>
            <param name="money">金额</param>
            <param name="isEncrypt">是否加密。默认：false</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Id">
            <summary>
            Id 生成器
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Id._id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Id.GuidGenerator">
            <summary>
            Guid 生成器
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Id.LongGenerator">
            <summary>
            Long 生成器
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Id.StringGenerator">
            <summary>
            String 生成器
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Id.SetId(System.String)">
            <summary>
            设置Id
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:CommonLib.Helpers.Id.Reset">
            <summary>
            重置Id
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Id.Guid">
            <summary>
            用Guid创建标识，去掉分隔符
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Id.GetGuid">
            <summary>
            创建 Guid ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Id.GetLong">
            <summary>
            创建 Long ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Id.GetString">
            <summary>
            创建 String ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Internal.RsaHelper">
            <summary>
            RSA加解密 使用OpenSSL的公钥加密/私钥解密
            
            公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的
            
            作者：李志强
            时间：2017年10月30日15:50:14
            QQ:501232752
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Internal.RsaHelper.#ctor(CommonLib.Helpers.Internal.RSAType,System.Text.Encoding,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:CommonLib.Helpers.Internal.RsaHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Internal.RsaHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Internal.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Internal.RSAType.RSA">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Internal.RSAType.RSA2">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.IPSearch">
            <summary>
            获取ip地址信息。需要ip地址数据库 qqwry.dat
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.#ctor(System.String)">
            <summary>
            </summary>
            <param name="filePath">ip数据库文件路径</param>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.ClearStream">
            <summary>
            更新ip数据文件后,对内存中的流进行更新
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.GetIPLocation(System.String)">
            <summary>
             获取指定IP所在地理位置
            </summary>
            <param name="strIP">要查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.IPToLong(System.String)">
            <summary>
             将字符串形式的IP转换位long
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.BlockToArray(System.Byte[])">
            <summary>
             将索引区字节块中的起始IP转换成Long数组
            </summary>
            <param name="ipBlock"></param>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.SearchIP(System.Int64[],System.Int32,System.Int32)">
            <summary>
             从IP数组中搜索指定IP并返回其索引
            </summary>
            <param name="ipArray">IP数组</param>
            <param name="start">指定搜索的起始位置</param>
            <param name="end">指定搜索的结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.ReadIPBlock">
            <summary>
             读取IP文件中索引区块
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.StreamReadLongX(System.Int32)">
            <summary>
             从IP文件中读取指定字节并转换位long
            </summary>
            <param name="bytesCount">需要转换的字节数，主意不要超过8字节</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.ReadLongX(System.Int32)">
            <summary>
             从IP文件中读取指定字节并转换位long
            </summary>
            <param name="bytesCount">需要转换的字节数，主意不要超过8字节</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.IPSearch.ReadString(System.Int32)">
            <summary>
             从IP文件中读取字符串
            </summary>
            <param name="flag">转向标志</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Helpers.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Item.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Item.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Item.#ctor(System.String,System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            初始化一个<see cref="T:CommonLib.Helpers.Item"/>类型的实例
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
            <param name="group">组</param>
            <param name="disabled">禁用</param>
        </member>
        <member name="M:CommonLib.Helpers.Item.CompareTo(CommonLib.Helpers.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其他列表项</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetType(System.Linq.Expressions.Expression)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMemberExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="right">取表达式右侧，(l,r)=> l.LId == r.RId，设置为true，返回 RID</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMethodCallExpressionName(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的成员名称
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.A.Name，返回 A.Name
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
            <param name="memberExpression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表，范例：t => new object[] {t.A.B,t.C}，返回 A.B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式，范例：t => new object[]{t.A,t.B}</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
            <param name="result">名称列表</param>
            <param name="expression">表达式</param>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetLastName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取最后以及成员名称，范例：t => t.Name，返回 Name
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <param name="right">取表达式右侧，(l,r)=> l.LId == r.RId，设置为true，返回 RID</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.IsValueExpression(System.Linq.Expressions.Expression)">
            <summary>
            是否值表达式
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetLastNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取最后一级成员名称列表，范例：t => new object[] {t.A.B,t.C}，返回 B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式，范例：t => new object[] {t.A,t.B}</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值，范例：t => t.Name == "A"，返回 A
            </summary>
            <param name="expression">表达式，范例：t => t.Name == "A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取查询操作符，范例：t => t.Name == "A"，返回 Operator.Equal
            </summary>
            <param name="expression">表达式，范例：t => t.Name == "A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetMethodCallExpressionOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name，返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetGroupPredicates(System.Linq.Expressions.Expression)">
            <summary>
            获取分组的谓词表达式，通过Or进行分组
            </summary>
            <param name="expression">谓词表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.CreateGroup(System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}})">
            <summary>
            创建分组
            </summary>
            <param name="result">表达式结果</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.AddPredicates(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}},System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            添加通过Or分割的谓词表达式
            </summary>
            <param name="expression">谓词表达式</param>
            <param name="result">表达式结果</param>
            <param name="group">分组表达式</param>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式，范例1：t => t.Name == "A"，结果1。范例2：t => t.Name == "A" &amp;&amp; t.Age == 1，结果2。</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Constant(System.Object,System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式
            </summary>
            <param name="value">值</param>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.CreateParameter``1">
            <summary>
            创建参数表达式
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Starts``1(System.String,System.Object)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Ends``1(System.String,System.Object)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Lambda.ParsePredicate``1(System.String,System.Object,CommonLib.Expressions.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.ProcessUtil">
            <summary>
            进程工具类
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetProcessByName(System.String)">
            <summary>
            通过进程名称获取进程
            </summary>
            <param name="processName">进程名称</param>
            <returns>进程</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetProcessThreads(System.Diagnostics.Process)">
            <summary>
            获取进程的所有线程
            </summary>
            <param name="process">进程</param>
            <returns>线程集合</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetMainWindowHandle(System.Diagnostics.Process)">
            <summary>
            获取进程的主窗口句柄
            </summary>
            <param name="process">进程</param>
            <returns>窗口句柄</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetMainWindowTitle(System.Diagnostics.Process)">
            <summary>
            获取进程的主窗口标题
            </summary>
            <param name="process">进程</param>
            <returns>窗口标题</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetProcessModules(System.Diagnostics.Process)">
            <summary>
            获取进程的所有模块
            </summary>
            <param name="process">进程</param>
            <returns>模块集合</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.KillProcess(System.Diagnostics.Process)">
            <summary>
            关闭进程
            </summary>
            <param name="process">进程</param>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.KillProcessAndWait(System.Diagnostics.Process)">
            <summary>
            关闭进程并等待结束
            </summary>
            <param name="process">进程</param>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.StartProcess(System.String)">
            <summary>
            启动新进程
            </summary>
            <param name="fileName">文件名</param>
            <returns>新进程</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.StartProcessAndWait(System.String)">
            <summary>
            启动新进程并等待结束
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.IsProcessExists(System.String)">
            <summary>
            判断进程是否存在
            </summary>
            <param name="processName">进程名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.GetProcessMemorySize(System.Diagnostics.Process)">
            <summary>
            获取进程使用的内存大小
            </summary>
            <param name="process">进程</param>
            <returns>内存大小（字节）</returns>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.SuspendProcess(System.Diagnostics.Process)">
            <summary>
            暂停进程
            </summary>
            <param name="process">进程</param>
        </member>
        <member name="M:CommonLib.Helpers.ProcessUtil.ResumeProcess(System.Diagnostics.Process)">
            <summary>
            恢复进程
            </summary>
            <param name="process">进程</param>
        </member>
        <member name="T:CommonLib.Helpers.Reflection">
            <summary>
            反射 操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDescription``1">
            <summary>
            获取类型描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDisplayName``1">
            <summary>
            获取类型显示名称，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员显示名称，，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDisplayNameOrDescription``1">
            <summary>
            获取类型显示名称或描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetDisplayNameOrDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型显示名称或成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.FindTypes``1(System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="TFind">查找类型</typeparam>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.FindTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assembly">待查找的程序集</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
            <param name="result">类型列表</param>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetInstancesByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有实例
            </summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="className">类名，包括命名空间,如果类型不处于当前执行程序集中，需要包含程序集名，范例：Test.Core.Test2,Test.Core</param>
            <param name="parameters">传递给构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息数组
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
            <param name="property">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsCollection(System.Type)">
            <summary>
            是否集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsGenericCollection(System.Type)">
            <summary>
            是否泛型集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetPublicProperties(System.Object)">
            <summary>
            获取公共属性列表
            </summary>
            <param name="instance">实例</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetTopBaseType``1">
            <summary>
            获取顶级基类
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetTopBaseType(System.Type)">
            <summary>
            获取顶级基类
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Reflection.GetMethodInfo(System.Boolean)">
            <summary>
            获取当前方法的相关信息
            </summary>
            <param name="isIncludeParentClassInfo">是否包含父类</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Regexs">
            <summary>
            正则表达式 操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.GetValues(System.String,System.String,System.String[],System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值集合
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPatterns">结果模式字符串数组，范例：new[]{"$1","$2"}</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.AddResults(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.RegularExpressions.Match,System.String[])">
            <summary>
            添加匹配结果
            </summary>
            <param name="result">匹配值字典</param>
            <param name="match">匹配结果</param>
            <param name="resultPatterns">结果模式字符串数组，范例：new[]{"$1","$2"}</param>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.GetValue(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPattern">结果模式字符串，范例："$1"用来获取第一个()内的值</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            分割成字符串数组
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            替换
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="replacement">替换字符串</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Regexs.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Serialize">
            <summary>
            序列化操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.ToBytes(System.Object)">
            <summary>
            将对象序列化为byte[]。此方法不需要源类型标记可<see cref="T:System.SerializableAttribute"/>
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.FromBytes``1(System.Byte[])">
            <summary>
            将byte[]反序列化为对象。此方法不需要源类型标记可<see cref="T:System.SerializableAttribute"/>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="bytes">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.ToXml(System.Object)">
            <summary>
            将数据序列化为Xml形式
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.FromXml``1(System.String)">
            <summary>
            将Xml序列化为强类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="xml">Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.ToXmlFile(System.String,System.Object)">
            <summary>
            将数据序列化为Xml并写入文件
            </summary>
            <param name="fileName">文件路径</param>
            <param name="data">数据</param>
        </member>
        <member name="M:CommonLib.Helpers.Serialize.FromXmlFile``1(System.String)">
            <summary>
            将指定Xml数据文件还原为强类型数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="fileName">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Singleton">
            <summary>
            单例操作。提供一个字典容器，按类型装载所有<see cref="T:CommonLib.Helpers.Singleton"/>的单例实例
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Singleton.AllSingletons">
            <summary>
            单例对象字典
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Singleton.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Singleton`1">
            <summary>
            单例对象操作。定义一个指定类型的单例，该实例的声明周期将跟随整个应用程序
            </summary>
            <typeparam name="T">单例类型</typeparam>
        </member>
        <member name="F:CommonLib.Helpers.Singleton`1._instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Singleton`1.Instance">
            <summary>
            获取指定类型的单例实例
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.StringBuilderExtend">
            <summary>
            字符串操作 - 字符串生成器
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.StringBuilderExtend.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.StringBuilderExtend.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.#ctor">
            <summary>
            初始化一个<see cref="T:CommonLib.Helpers.StringExtend"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.AppendLine">
            <summary>
            追加内容并换行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.Clear">
            <summary>
            清空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringBuilderExtend.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.StringExtend">
            <summary>
            字符串操作 - 工具
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号"'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ToUnicode(System.String)">
            <summary>
            字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns>Unicode编码后的字符串</returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ToUnicodeByCn(System.String)">
            <summary>
            中文字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.UnicodeToStr(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写。范例：中国，返回zg
            </summary>
            <param name="chineseText">汉字文本。范例： 中国</param>
            <returns>首字母缩写</returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">汉字</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ResolveByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
            <param name="unicode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ResolveByConst(System.String)">
            <summary>
            通过拼音简码常量获取
            </summary>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.FullPinYin(System.String)">
            <summary>
            将汉字转换成拼音(全拼)
            </summary>
            <param name="text">汉字字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.FirstLower(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Helpers.StringExtend.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.Distinct(System.String)">
            <summary>
            去除重复字符串
            </summary>
            <param name="value">值，范例1："5555"，返回"5"，范例2："4545"，返回"45"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endChatCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
            <param name="endCharCount">添加结束符号的个数</param>
            <param name="endChar">结束符号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.GetHideMobile(System.String)">
            <summary>
            获取隐藏中间几位后的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.GetStringLength(System.String)">
            <summary>
            获取字符串的字节数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ToSnakeCase(System.String)">
            <summary>
            将字符串转换为蛇形策略
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.ToCamelCase(System.String)">
            <summary>
            将字符串转换为骆驼策略
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.GenerateNonceStr">
            <summary>
            生成随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.StringExtend.SplitWordGroup(System.String,System.Char)">
            <summary>
            分隔词组
            </summary>
            <param name="value">值</param>
            <param name="separator">分隔符。默认使用"-"分隔</param>
        </member>
        <member name="T:CommonLib.Helpers.StringCase">
            <summary>
            字符串策略
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.StringCase.Snake">
            <summary>
            蛇形策略
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.StringCase.Camel">
            <summary>
            骆驼策略
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.StringCase.None">
            <summary>
            不执行策略
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.SnakeCaseState">
            <summary>
            蛇形策略状态
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.SnakeCaseState.Start">
            <summary>
            开头
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.SnakeCaseState.Lower">
            <summary>
            小写
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.SnakeCaseState.Upper">
            <summary>
            大写
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.SnakeCaseState.NewWord">
            <summary>
            单词
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Sys">
            <summary>
            系统操作
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Sys.IsLinux">
            <summary>
            是否Linux操作系统
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Sys.IsWindows">
            <summary>
            是否Windows操作系统
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Sys.IsOsx">
            <summary>
            是否苹果操作系统
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Sys.System">
            <summary>
            当前操作系统
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Thread.WaitAll(System.Action[])">
            <summary>
            执行多个操作，多个操作将同时执行
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:CommonLib.Helpers.Thread.ParallelExecute(System.Action[])">
            <summary>
            并发执行多个操作
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:CommonLib.Helpers.Thread.ParallelExecute(System.Action,System.Int32,System.Threading.Tasks.ParallelOptions)">
            <summary>
            重复的并发执行操作
            </summary>
            <param name="action">操作</param>
            <param name="count">执行次数</param>
            <param name="options">并发执行配置</param>
        </member>
        <member name="P:CommonLib.Helpers.Thread.ThreadId">
            <summary>
            获取线程编号
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Thread.CurrentPrincipal">
            <summary>
            获取或设置 线程的当前负责人
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Thread.MaxThreadNumberInThreadPool">
            <summary>
            获取线程池中最大线程
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Thread.Sleep(System.Int32)">
            <summary>
            将当前线程挂起指定的时间
            </summary>
            <param name="time">挂起时间，单位：毫秒</param>
        </member>
        <member name="M:CommonLib.Helpers.Thread.StartTask(System.Action)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：() => { 代码 }</param>
        </member>
        <member name="M:CommonLib.Helpers.Thread.StartTask(System.Action{System.Object},System.Object)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：t => { 代码 }</param>
            <param name="state">传递的参数</param>
        </member>
        <member name="T:CommonLib.Helpers.Time">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.Time._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Time.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:CommonLib.Helpers.Time.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:CommonLib.Helpers.Time.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Time.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Time.GetDate">
            <summary>
            获取当前日期，不带时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Time.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Time.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Time.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.Humanize(System.Double)">
            <summary>
            将字节大小的值转成人类易读的字符串
            </summary>
            <param name="bytes">字节大小</param>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.BytesToMegaBytes(System.Double)">
            <summary>
            将 <c>B</c> 转成 <c>MB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.BytesToGigaBytes(System.Double)">
            <summary>
            将 <c>B</c> 转成 <c>GB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.KiloBytesToMegaBytes(System.Double)">
            <summary>
            将 <c>KB</c> 转成 <c>MB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.MegaBytesToGigaBytes(System.Double)">
            <summary>
            将 <c>MB</c> 转成 <c>GB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.MegaBytesToTeraBytes(System.Double)">
            <summary>
            将 <c>MB</c> 转成 <c>TB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.GigaBytesToMegaBytes(System.Double)">
            <summary>
            将 <c>GB</c> 转成 <c>MB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.GigaBytesToTeraBytes(System.Double)">
            <summary>
            将 <c>GB</c> 转成 <c>TB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.TeraBytesToMegaBytes(System.Double)">
            <summary>
            将 <c>TB</c> 转成 <c>MB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.TeraBytesToGigaBytes(System.Double)">
            <summary>
            将 <c>TB</c> 转成 <c>GB</c>
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnitConverter.MoneyToUpper(System.String)">
            <summary>
            将金额转为大写(保留两位小数、最大9999万亿)
            </summary>
            <param name="strAmount"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.UnixTime">
            <summary>
            Unix时间操作
            </summary>
        </member>
        <member name="F:CommonLib.Helpers.UnixTime.EpochTime">
            <summary>
            Unix纪元时间
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.UnixTime.ToTimestamp(System.Boolean)">
            <summary>
            转换为Unix时间戳
            </summary>
            <param name="isContainMillisecond">是否包含毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UnixTime.ToTimestamp(System.DateTime,System.Boolean)">
            <summary>
            转换为Unix时间戳
            </summary>
            <param name="dateTime">时间</param>
            <param name="isContainMillisecond">是否包含毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UnixTime.ToDateTime(System.Int64)">
            <summary>
            转换为DateTime对象
            </summary>
            <param name="timestamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.Url">
            <summary>
            Url操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Url.Combine(System.String[])">
            <summary>
            合并Url
            </summary>
            <param name="urls">url片段，范例：Url.Combine( "http://a.com","b" ),返回 "http://a.com/b"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Url.Join(System.String,System.String)">
            <summary>
            连接Url，范例：Url.Join( "http://a.com","b=1" ),返回 "http://a.com?b=1"
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <param name="param">参数，范例：b=1</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.Url.Join(System.String,System.String[])" -->
        <member name="M:CommonLib.Helpers.Url.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Url.Join(System.Uri,System.String)">
            <summary>
            连接Url，范例：Url.Join( "http://a.com","b=1" ),返回 "http://a.com?b=1"
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <param name="param">参数，范例：b=1</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.Url.Join(System.Uri,System.String[])" -->
        <member name="M:CommonLib.Helpers.Url.GetMainDomain(System.String)">
            <summary>
            获取主域名
            </summary>
            <param name="url">Url地址</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
            <param name="userAgent">UA</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
            <param name="userAgent">UA</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.UserAgentHelper.IsWechatBrowser(System.String)">
            <summary>
            是否微信浏览器
            </summary>
            <param name="userAgent">UA</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Helpers.UserAgentInfo">
            <summary>
            用户代理信息
            参考地址：https://github.com/mumuy/browser/blob/master/Browser.js
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Engine">
            <summary>
            内核
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Os">
            <summary>
            操作系统
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.OsVersion">
            <summary>
            操作系统版本号
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.UserAgentInfo.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="T:CommonLib.Helpers.Validate">
            <summary>
            验证 操作
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Validate.RegexsSplit(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取字符串中的指定内容集合
            </summary>
            <param name="input">输入字符串</param>
            <param name="">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsEmpty(System.String)">
            <summary>
            是否存在邮箱
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.HasEmail(System.String,System.Boolean)">
            <summary>
            是否存在邮箱
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPhoneNumber(System.String)">
            <summary>
            是否合法的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsMobileNumber(System.String)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.HasMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否存在手机号码
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChinaMobilePhone(System.String)">
            <summary>
            是否中国移动号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChinaUnicomPhone(System.String)">
            <summary>
            是否中国联通号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChinaTelecomPhone(System.String)">
            <summary>
            是否中国电信号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsTel(System.String)">
            <summary>
            是否中国电话，格式：010-85849685
            </summary>
            <param name="value">电话</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsIdCard(System.String)">
            <summary>
            是否身份证号码
            </summary>
            <param name="value">身份证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsBase64String(System.String)">
            <summary>
            是否Base64编码
            </summary>
            <param name="value">Base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsGuid(System.String)">
            <summary>
            是否Guid
            </summary>
            <param name="guid">Guid字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsUrl(System.String)">
            <summary>
            是否Url地址（统一资源定位）
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsUri(System.String)">
            <summary>
            是否Uri（统一资源标识）
            </summary>
            <param name="value">uri</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsMainDomainUrl(System.String)">
            <summary>
            是否主域名或者www开头的域名
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsMainDomain(System.String)">
            <summary>
            是否主域名
            </summary>
            <param name="value">域名字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDomain(System.String)">
            <summary>
            是否域名
            </summary>
            <param name="value">域名字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsMac(System.String)">
            <summary>
            是否Mac地址
            </summary>
            <param name="value">Mac地址</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPositiveInteger(System.String)">
            <summary>
            是否大于0的正整数
            </summary>
            <param name="value">正整数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsInt32(System.String)">
            <summary>
            是否Int32类型
            </summary>
            <param name="value">整数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDouble(System.String)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDouble(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="digit">小数位数，如果是0则不检测</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPasswordOne(System.String)">
            <summary>
            是否密码One的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPasswordOne(System.String,System.Int32,System.Int32)">
            <summary>
            是否密码One的格式，指定密码长度，包含特殊字符
            </summary>
            <param name="value">密码</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPasswordTwo(System.String)">
            <summary>
            是否密码Two的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsLoginName(System.String)">
            <summary>
            是否登录账号，6-30位长度
            </summary>
            <param name="value">登录账号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsLoginName(System.String,System.Int32,System.Int32)">
            <summary>
            是否登录账号
            </summary>
            <param name="value">登录账号</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsBandCard(System.String)">
            <summary>
            是否银行卡号，16位或19位银行卡（简单校验）
            </summary>
            <param name="value">银行卡号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsSafeSqlString(System.String)">
            <summary>
            是否安全Sql语句
            </summary>
            <param name="value">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsVersion(System.String,System.Int32)">
            <summary>
            是否有效版本号，范例：1.3,1.1.5,1.25.256
            </summary>
            <param name="value">版本号</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChineseWord(System.String)">
            <summary>
            是否中文字符
            </summary>
            <param name="value">中文字符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChinese(System.String)">
            <summary>
            是否中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsIpAddress(System.String)">
            <summary>
            是否IP地址
            </summary>
            <param name="value">ip地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsInteger(System.String)">
            <summary>
            是否整数
            </summary>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsUnicode(System.String)">
            <summary>
            是否Unicode字符串
            </summary>
            <param name="value">unicode字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            字符串长度是否在指定范围内，一个中文为2个字符
            </summary>
            <param name="value">字符串</param>
            <param name="begin">开始</param>
            <param name="end">结束</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsChinesePostalCode(System.String)">
            <summary>
            是否中国邮政编码，6位数字
            </summary>
            <param name="value">邮政编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsNormalChar(System.String)">
            <summary>
            是否正常字符，字母、数字、下划线的组合
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsPostfix(System.String,System.String[])">
            <summary>
            是否指定后缀
            </summary>
            <param name="value">字符串</param>
            <param name="postfixs">后缀名数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDecimal(System.String)">
            <summary>
            是否数字型
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsRepeat(System.String)">
            <summary>
            是否重复，范例：112,返回true
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsQQ(System.String)">
            <summary>
            是否合法QQ号码
            </summary>
            <param name="value">QQ号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsColorValue(System.String)">
            <summary>
            是否颜色值。检查颜色值是否为3/6位的合法颜色值。例如：FFF、FFFFFF
            </summary>
            <param name="value">颜色值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsWideWord(System.String)">
            <summary>
            是否全角字符，包含汉字在内
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsNarrowWord(System.String)">
            <summary>
            是否半角字符，包含汉字在内
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsOnlyNumber(System.String)">
            <summary>
            是否数字。0-9的数字，不包含符号"."和"-"
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsUpperCaseChar(System.String)">
            <summary>
            是否大写英文字母组成的字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsUpperCaseChar(System.Char)">
            <summary>
            是否大写英文字母
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsLowerCaseChar(System.String)">
            <summary>
            是否小写英文字母组成的字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsLowerCaseChar(System.Char)">
            <summary>
            是否小写英文字母
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsTime(System.String)">
            <summary>
            是否时间格式
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDate(System.String,System.Boolean)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="isRegex">是否正则验证</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDate(System.String,System.String)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDate(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <param name="provider">格式化提供者</param>
            <param name="styles">日期格式</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDateTimeMin(System.String,System.DateTime)">
            <summary>
            是否大于最小时间
            </summary>
            <param name="value">时间</param>
            <param name="min">最小时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Validate.IsDateTimeMax(System.String,System.DateTime)">
            <summary>
            是否小于最大时间
            </summary>
            <param name="value">时间</param>
            <param name="max">最大时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.ValidateHelper.IsMobileBrowser(System.String)">
            <summary>
            是否手机浏览器
            </summary>
            <param name="userAgent"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsEmail(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsMobile(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsPhone(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsIP(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsIdCard(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.CheckIDCard18(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.CheckIDCard15(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsDate(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsNumeric(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsZipCode(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsImgFileName(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.InIP(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.InIPList(System.String,System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsNumericArray(System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsNumericRule(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLib.Helpers.ValidateHelper.IsNumericRule(System.String)" -->
        <member name="T:CommonLib.Helpers.Xml">
            <summary>
            Xml操作 - 生成器
            </summary>
            <summary>
            Xml操作 - 工具
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Xml.Document">
            <summary>
            Xml文档
            </summary>
        </member>
        <member name="P:CommonLib.Helpers.Xml.Root">
            <summary>
            Xml根节点
            </summary>
        </member>
        <member name="M:CommonLib.Helpers.Xml.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.Helpers.Xml"/>类型的实例
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:CommonLib.Helpers.Xml.GetXml(System.String)">
            <summary>
            获取Xml字符串
            </summary>
            <param name="xml">Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.AddNode(System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            添加节点
            </summary>
            <param name="name">节点名称</param>
            <param name="value">值</param>
            <param name="parent">父节点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.CreateNode(System.String,System.Object,System.Xml.XmlNodeType)">
            <summary>
            创建节点
            </summary>
            <param name="name">节点名称</param>
            <param name="value">值</param>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.GetParent(System.Xml.XmlNode)">
            <summary>
            获取父节点
            </summary>
            <param name="parent">父节点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.AddCDataNode(System.Object,System.Xml.XmlNode)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parent">父节点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.AddCDataNode(System.Object,System.String)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parentName">父节点名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.ToString">
            <summary>
            输出Xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.ToDocument(System.String)">
            <summary>
            将Xml字符串转换为XDocument
            </summary>
            <param name="xml">Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Helpers.Xml.ToElements(System.String)">
            <summary>
            将Xml字符串转换为XELement列表
            </summary>
            <param name="xml">Xml字符串</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Abstractions.IGuidGenerator">
            <summary>
            Guid ID 生成器
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Abstractions.ILongGenerator">
            <summary>
            Long Id 生成器
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Abstractions.IStringGenerator">
            <summary>
            String ID 生成器
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.ObjectIdGenerator">
            <summary>
            ObjectId 生成器
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Core.ObjectIdGenerator.Current">
            <summary>
            获取<see cref="T:CommonLib.IdGenerators.Core.ObjectIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.ObjectIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.SequentialGuidGenerator">
            <summary>
            有序Guid 生成器
            代码出自：https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Classes/SequentialGuid.cs
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Core.SequentialGuidGenerator.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Core.SequentialGuidGenerator.Current">
            <summary>
            获取<see cref="T:CommonLib.IdGenerators.Core.SequentialGuidGenerator"/>类型的实例
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidGenerator.Rng">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.SequentialGuidGenerator.#ctor">
            <summary>
            初始化一个<see cref="T:CommonLib.IdGenerators.Core.SequentialGuidGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.SequentialGuidGenerator.Create">
            <summary>
            创建有序的 Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.SequentialGuidGenerator.Create(CommonLib.IdGenerators.Core.SequentialGuidDatabaseType)">
            <summary>
            创建有序的 Guid
            </summary>
            <param name="databaseType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.SequentialGuidGenerator.Create(CommonLib.IdGenerators.Core.SequentialGuidType)">
            <summary>
            创建有序的 Guid
            </summary>
            <param name="guidType">有序 Guid 类型</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.SequentialGuidDatabaseType">
            <summary>
            有序Guid数据库类型
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidDatabaseType.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidDatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidDatabaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidDatabaseType.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.SequentialGuidType">
            <summary>
            有序Guid类型
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidType.SequentialAsString">
            <summary>
            生成的GUID 按照字符串顺序排列
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidType.SequentialAsBinary">
            <summary>
            生成的GUID 按照二进制的顺序排列
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SequentialGuidType.SequentialAtEnd">
            <summary>
            生成的GUID 像SQL Server, 按照末尾部分排列
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.SnowflakeIdGenerator">
            <summary>
            雪花算法ID 生成器
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.SnowflakeIdGenerator._id">
            <summary>
            雪花算法ID
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Core.SnowflakeIdGenerator.Current">
            <summary>
            获取<see cref="T:CommonLib.IdGenerators.Core.SnowflakeIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.SnowflakeIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Core.TimestampIdGenerator">
            <summary>
            时间戳ID 生成器
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Core.TimestampIdGenerator._id">
            <summary>
            时间戳ID
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Core.TimestampIdGenerator.Current">
            <summary>
            获取<see cref="T:CommonLib.IdGenerators.Core.TimestampIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Core.TimestampIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Ids.ObjectId">
            <summary>
            Id生成器，代码出自：https://github.com/tangxuehua/ecommon/blob/master/src/ECommon/Utilities/ObjectId.cs
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.#ctor(System.DateTime,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp (expressed as a DateTime).</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.Machine">
            <summary>
            Gets the machine.
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.Pid">
            <summary>
            Gets the PID.
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.ObjectId.CreationTime">
            <summary>
            Gets the creation time (derived from the timestamp).
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_LessThan(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_LessThanOrEqual(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_Equality(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_Inequality(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_GreaterThanOrEqual(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.op_GreaterThan(CommonLib.IdGenerators.Ids.ObjectId,CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GenerateNewId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GenerateNewId(System.DateTime)">
            <summary>
            Generates a new ObjectId with a unique value (with the timestamp component based on a given DateTime).
            </summary>
            <param name="timestamp">The timestamp component (expressed as a DateTime).</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GenerateNewId(System.Int32)">
            <summary>
            Generates a new ObjectId with a unique value (with the given timestamp).
            </summary>
            <param name="timestamp">The timestamp component.</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GenerateNewStringId">
            <summary>
            Generates a new ObjectId string with a unique value.
            </summary>
            <returns>The string value of the new generated ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.Pack(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Packs the components of an ObjectId into a byte array.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.Unpack(System.Byte[],System.Int32@,System.Int32@,System.Int16@,System.Int32@)">
            <summary>
            Unpacks a byte array into the components of an ObjectId.
            </summary>
            <param name="bytes">A byte array.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GetCurrentProcessId">
            <summary>
            Gets the current process id.  This method exists because of how CAS operates on the call stack, checking
            for permissions before executing the method.  Hence, if we inlined this call, the calling method would not execute
            before throwing an exception requiring the try/catch at an even higher level that we don't necessarily control.
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.CompareTo(CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.Equals(CommonLib.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ParseHexString(System.String)">
            <summary>
            Parses a hex string into its equivalent byte array.
            </summary>
            <param name="s">The hex string to parse.</param>
            <returns>The byte equivalent of the hex string.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of milliseconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.ObjectId.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Ids.SnowflakeId">
            <summary>
            雪花算法，代码出自：https://github.com/dunitian/snowflake-net/blob/master/Snowflake.Net.Core/IdWorker.cs
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.TWEPOCH">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.CurrentTimeFunc">
            <summary>
            获取当前时间戳
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.WORKER_ID_BITS">
            <summary>
            机器标识位数
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.DATACENTER_ID_BITS">
            <summary>
            数据标志位数
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.SEQUENCE_BITS">
            <summary>
            序列号标识位数
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.MAX_WORKER_ID">
            <summary>
            机器ID最大值
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.MAX_DATACENTER_ID">
            <summary>
            数据标志最大值
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.SEQUENCE_MASK">
            <summary>
            序列号ID最大值
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.WORKER_ID_SHIFT">
            <summary>
            机器ID偏左移12位
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.DATACENTER_ID_SHIFT">
            <summary>
            数据ID偏左移17位
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.TIMESTAMP_LEFT_SHIFT">
            <summary>
            时间毫秒左移22位
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId._lock">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId._sequence">
            <summary>
            序列号ID
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId._lastTimestamp">
            <summary>
            最后时间戳
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            初始化一个 <see cref="T:CommonLib.IdGenerators.Ids.SnowflakeId"/> 类型的实例
            </summary>
            <param name="workerId">机器ID</param>
            <param name="datacenterId">数据标志ID</param>
            <param name="sequence">序列号ID</param>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.SnowflakeId.WorkerId">
            <summary>
            机器ID
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.SnowflakeId.DatacenterId">
            <summary>
            数据标志ID
            </summary>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.SnowflakeId.Sequence">
            <summary>
            序列号ID
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.CurrentTimeMills">
            <summary>
            获取当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.StubCurrentTime(System.Func{System.Int64})">
            <summary>
            重置当前时间戳
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.StubCurrentTime(System.Int64)">
            <summary>
            重置当前时间戳
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.NextId">
            <summary>
            获取下一个ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.TilNextMillis(System.Int64)">
            <summary>
            获取增量时间戳，防止产生的时间比之前的时间还要小（由于NTP回拨等问题），保持增量的趋势
            </summary>
            <param name="lastTimestamp">最后一个时间戳</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.TimeGen">
            <summary>
            获取当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.InternalCurrentTimeMillis">
            <summary>
            默认当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.Ids.SnowflakeId.DisposableAction">
            <summary>
            一次性方法
            </summary>
        </member>
        <member name="F:CommonLib.IdGenerators.Ids.SnowflakeId.DisposableAction._action">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.DisposableAction.#ctor(System.Action)">
            <summary>
            初始化一个 <see cref="T:CommonLib.IdGenerators.Ids.SnowflakeId.DisposableAction"/> 类型的实例
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.SnowflakeId.DisposableAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:CommonLib.IdGenerators.Ids.TimestampId">
            <summary>
            时间戳ID，借鉴雪花算法，生成唯一时间戳ID
            参考文章：http://www.cnblogs.com/rjf1979/p/6282855.html
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.TimestampId.GetInstance(System.Nullable{System.DateTime})">
            <summary>
            获取单个实例对象
            </summary>
            <param name="initialDateTime">初始化时间，与当前时间做一个相差取时间戳</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.IdGenerators.Ids.TimestampId.InitialDateTime">
            <summary>
            初始化时间，作用时间戳的相差
            </summary>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.TimestampId.GetId">
            <summary>
            获取唯一时间戳ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.TimestampId.Fill(System.Int64)">
            <summary>
            补位填充
            </summary>
            <param name="temp">数字</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.TimestampId.GetUniqueTimeStamp(System.Int64,System.Int64@)">
            <summary>
            获取唯一时间戳
            </summary>
            <param name="lastTimeStamp">最后时间戳</param>
            <param name="temp">临时时间戳</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IdGenerators.Ids.TimestampId.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IdGenerators.IIdGenerator`1">
            <summary>
            ID 生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:CommonLib.IdGenerators.IIdGenerator`1.Create">
            <summary>
            创建 ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IO.BigFileByStreamCopy">
            <summary>
            大文件操作扩展类
            </summary>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.CopyToFile(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.CopyToFileAsync(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件(异步方式)
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.SaveFile(System.IO.Stream,System.String)">
            <summary>
            将内存流转储成文件
            </summary>
            <param name="ms"></param>
            <param name="filename"></param>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.GetFileMD5(System.IO.FileStream)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.GetFileSha1(System.IO.Stream)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.GetFileSha256(System.IO.Stream)">
            <summary>
            计算文件的 sha256 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha256 值16进制字符串</returns>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.GetFileSha512(System.IO.Stream)">
            <summary>
            计算文件的 sha512 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha512 值16进制字符串</returns>
        </member>
        <member name="M:CommonLib.IO.BigFileByStreamCopy.HashFile(System.IO.Stream,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fs">被操作的源数据流</param>
            <param name="algo">加密算法</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="T:CommonLib.IO.DirectoryHelper">
            <summary>
            目录操作辅助类
            </summary>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.GetFileNames(System.String,System.String)">
            <summary>
            获取指定目录中的文件列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="pattern">通配符</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="searchPattern">模式字符串。"*"代表0或N个字符，"?"代表1个字符。范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.Contains(System.String,System.String,System.Boolean)">
            <summary>
            查找指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="searchPattern">模式字符串。"*"代表0或N个字符，"?"代表1个字符。范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.IsEmpty(System.String)">
            <summary>
            是否空目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.CreateIfNotExists(System.String)">
            <summary>
            创建文件夹，如果不存在
            </summary>
            <param name="directory">要创建的文件夹路径</param>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])">
            <summary>
            递归复制文件夹及文件夹/文件
            </summary>
            <param name="sourcePath">源文件夹路径</param>
            <param name="targetPath">目标文件夹路径</param>
            <param name="searchPatterns">要复制的文件扩展名数组</param>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.Copy(System.String,System.String,System.Boolean)">
            <summary>
            复制文件或目录
            
            描述：
                1、src和dest都为目录，则将src目录及其目录下所有文件目录拷贝到dest下
                2、src和dest都为文件，直接复制，名字为dest
                3、src为文件，dest为目录，将src拷贝到dest目录下
            </summary>
            <param name="src">源文件或目录</param>
            <param name="dest">目标文件或目录，目标不存在会自动创建（目录、文件都创建）</param>
            <param name="isOverride">是否覆盖</param>
            <returns>是否成功复制</returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            递归删除目录
            </summary>
            <param name="directory">目录路径</param>
            <param name="isDeleteRoot">是否删除根目录</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.CleanEmpty(System.String)">
            <summary>
            清理空文件夹
            此方法用于递归删除空的文件夹，不删除文件
            如果传入的文件夹本身就是空的，删除这个文件夹
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns>是否成功清理空文件夹</returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置目录属性
            </summary>
            <param name="directory">目录路径</param>
            <param name="attribute">要设置的目录属性</param>
            <param name="isSet">是否为设置属性,true:设置,false:取消</param>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.Ls(System.String)">
            <summary>
            列出指定路径下的目录和文件
            </summary>
            <param name="path">目录绝对路径或者相对路径</param>
            <returns>文件列表（包含目录）</returns>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.EnumerateDirectoriesSafe(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            根据指定的匹配规则<paramref name="searchPattern"/>列举出当前文件夹下的所有子文件夹
            </summary>
        </member>
        <member name="M:CommonLib.IO.DirectoryHelper.EnumerateFilesSafe(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            根据指定的匹配规则<paramref name="searchPattern"/>列举出当前文件夹下的所有子文件
            </summary>
        </member>
        <member name="T:CommonLib.IO.FileHelper">
            <summary>
            文件操作辅助类 - 转换
            </summary>
            <summary>
            文件操作辅助类
            </summary>
            <summary>
            文件操作辅助类 - 信息
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToString(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符串编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToStringAsync(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符串编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToStream(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToBytes(System.IO.Stream)">
            <summary>
            流转换成字节流
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.CreateIfNotExists(System.String)">
            <summary>
            创建文件，如果文件不存在
            </summary>
            <param name="fileName">文件名，绝对路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="filePaths">文件集合的绝对路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.KillFile(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            强力粉碎文件，如果文件被打开，很难粉碎 需要服务器上有handle.exe
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="deleteCount">删除次数</param>
            <param name="randomData">随机数据填充文件，默认true</param>
            <param name="blanks">空白填充文件，默认false</param>
            <returns>true:粉碎成功,false:粉碎失败</returns>        
        </member>
        <member name="M:CommonLib.IO.FileHelper.SetAttribute(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置文件属性
            </summary>
            <param name="fileName">文件名</param>
            <param name="attribute">文件属性</param>
            <param name="isSet">是否为设置属性,true:设置,false:取消</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetAllFiles(System.String)">
            <summary>
            获取目录中全部文件列表，包括子目录
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Read(System.String,System.Text.Encoding)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ReadToBytes(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ReadToBytes(System.IO.FileInfo)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="fileInfo">文件信息</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Write(System.String,System.String)">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">数据</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Write(System.String,System.Byte[])">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="bytes">数据</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.JoinPath(System.String,System.String)">
            <summary>
            连接基路径和子路径，比如把 c: 与 test.doc 连接成 c:\test.doc
            </summary>
            <param name="basePath">基路径，范例：c:</param>
            <param name="subPath">子路径，可以是文件名，范例：test.doc</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.CopyToStringAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            复制流并转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Combine(System.Collections.Generic.IList{System.String},System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            合并文件
            </summary>
            <param name="files">文件路径列表</param>
            <param name="fileName">生成文件名</param>
            <param name="delete">合并后是否删除源文件</param>
            <param name="encrypt">是否加密</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Split(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            分割文件
            </summary>
            <param name="file">文件</param>
            <param name="dirPath">生成文件路径。不含文件名</param>
            <param name="suffix">后缀名</param>
            <param name="size">分割大小。单位：KB</param>
            <param name="delete">分割后是否删除源文件</param>
            <param name="encrypt">是否加密</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetSplitFileTotal(System.Int32,System.Int32)">
            <summary>
            获取分割文件数量
            </summary>
            <param name="fileSize">文件大小</param>
            <param name="splitSize">分割大小。单位：字节</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Compress(System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="file">文件</param>
            <param name="saveFile">保存文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Decompress(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="file">文件</param>
            <param name="saveFile">保存文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.CompressMulti(System.String[],System.String)">
            <summary>
            多文件压缩。（生成的压缩包和第三方的压缩文件解压不兼容）
            </summary>
            <param name="sourceFileList">文件列表</param>
            <param name="saveFullPath">压缩包全路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.DecompressMulti(System.String,System.String)">
            <summary>
            多文件解压缩
            </summary>
            <param name="zipPath">压缩文件路径</param>
            <param name="targetPath">解压目录</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.moveFiles(System.String,System.String)">
            <summary>
            移动文件夹内容
            </summary>
            <param name="srcFolder">源文件夹</param>
            <param name="destFolder">目标文件夹</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.IO.FileHelper.ReadLines(System.IO.FileInfo)" -->
        <member name="M:CommonLib.IO.FileHelper.ReadLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            以指定的编码方式读取所有文本行
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.OpenOrCreateSequentialRead(System.IO.FileInfo)">
            <summary>
            以指定文件将从头到尾连续地访问的方式创建或打开文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsBinary(System.IO.FileInfo)">
            <summary>
            判断当前文件是否是二进制格式
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.FileMerge(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            文件合并  分片合并用
            </summary>
            <param name="files">文件列表  要先排好序，第一个分片文件在前 </param>
            <param name="fullName">存放路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileType(System.IO.FileInfo)">
            <summary>
            文件流头部信息获得文件类型
            
            说明：
                1、无法识别类型默认按照扩展名识别
                2、xls、doc、msi、ppt、vsd头信息无法区分，按照扩展名区分
                3、zip可能为docx、xlsx、pptx、jar、war头信息无法区分，按照扩展名区分
            </summary>
            <param name="file">文件</param>
            <returns>类型，文件的扩展名，未找到为null</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileInfoType(System.IO.FileInfo)">
            <summary>
            文件流头部信息获得文件类型
            
            说明：
                1、无法识别类型默认按照扩展名识别
                2、xls、doc、msi、ppt、vsd头信息无法区分，按照扩展名区分
                3、zip可能为docx、xlsx、pptx、jar、war头信息无法区分，按照扩展名区分
            </summary>
            <param name="file">文件</param>
            <returns>类型，文件的扩展名，未找到为null</returns>
            
        </member>
        <member name="M:CommonLib.IO.FileHelper.Mv(System.String,System.String)">
            <summary>
            移动文件或重命名文件
            </summary>
            <param name="src">源文件路径</param>
            <param name="dest">目标文件路径</param>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Move(System.String,System.String,System.Boolean)">
            <summary>
            移动文件或者目录
            </summary>
            <param name="src">源文件或者目录</param>
            <param name="dest">目标文件或者目录</param>
            <param name="isOverride">是否覆盖目标，只有目标为文件才覆盖</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Rename(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            修改文件或目录的文件名，不变更路径，只是简单修改文件名
            
            说明：
                1、isRetainExt为true时，保留原扩展名。如 FileUtil.Rename(file, "aaa", true, false) xx/xx.png =》xx/aaa.png
                2、isRetainExt为false时，不保留原扩展名，需要在newName中说明扩展名。如 FileUtil.Rename(file, "aaa.jpg", false, false) xx/xx.png =》xx/aaa.jpg
            </summary>
            <param name="file">被修改的文件</param>
            <param name="newName">新的文件名</param>
            <param name="isRetainExt">是否保留原文件的扩展名，如果保留，则newName不需要加扩展名</param>
            <param name="isOverride">是否覆盖目标文件</param>
            <returns>目标文件</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="path">相对路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsAbsolutePath(System.String)">
            <summary>
            判断给定路径是否是绝对路径
            </summary>
            <param name="path">给定路径</param>
            <returns>是否是绝对路径</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsDirectory(System.String)">
            <summary>
            判断是否为目录，如果 path 为 null，则返回 false
            </summary>
            <param name="path">给定路径</param>
            <returns>是否为目录</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsFile(System.String)">
            <summary>
            判断是否为文件，如果 path 为 null，则返回 false
            </summary>
            <param name="path">给定路径</param>
            <returns>是否为文件</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileSuffix(System.IO.FileInfo)">
            <summary>
            获取后缀名，扩展名不带“.”
            </summary>
            <param name="file">文件</param>
            <returns>文件后缀名</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileSuffix(System.String)">
            <summary>
            获取后缀名，扩展名不带“.”
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件后缀名</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFilePrefix(System.IO.FileInfo)">
            <summary>
            获取文件名，不带扩展名
            </summary>
            <param name="file">文件</param>
            <returns>文件名</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFilePrefix(System.String)">
            <summary>
            获取文件名，不带扩展名
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件名</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetInputStream(System.IO.FileInfo)">
            <summary>
            获得输入流
            </summary>
            <param name="file">文件</param>
            <returns>输入流</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetInputStream(System.String)">
            <summary>
            获得输入流
            </summary>
            <param name="path">文件路径</param>
            <returns>输入流</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetBOMInputStream(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            获得BOM输入流，用于处理带BOM头的文件
            </summary>
            <param name="file">文件</param>
            <param name="encoding">编码格式，默认为UTF-8</param>
            <returns>BOM输入流</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetReader(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            获得一个文件读取流
            </summary>
            <param name="file">文件</param>
            <param name="encoding">编码格式，默认为UTF-8</param>
            <returns>文件读取流</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ReadBytes(System.IO.FileInfo)">
            <summary>
            读取文件所有数据
            
            文件的长度不能超过int.MaxValue
            </summary>
            <param name="file">文件</param>
            <returns>字节码</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ReadBytes(System.String)">
            <summary>
            读取文件所有数据
            
            文件的长度不能超过int.MaxValue
            </summary>
            <param name="path">文件路径</param>
            <returns>字节码</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetOutputStream(System.IO.FileInfo)">
            <summary>
            获得一个输出流对象
            </summary>
            <param name="file">文件</param>
            <returns>输出流对象</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetOutputStream(System.String)">
            <summary>
            获得一个输出流对象
            </summary>
            <param name="file">输出到的文件路径，绝对路径</param>
            <returns>输出流对象</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.CleanInvalid(System.String)">
            <summary>
            清除文件名中的在Windows下不支持的非法字符，包括： \ / : * ? " &lt; &gt; |
            </summary>
            <param name="fileName">文件名（必须不包括路径，否则路径符将被替换）</param>
            <returns>清理后的文件名</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ContainsInvalid(System.String)">
            <summary>
            文件名中是否包含在Windows下不支持的非法字符，包括： \ / : * ? " &lt; &gt; |
            </summary>
            <param name="fileName">文件名（必须不包括路径，否则路径符将被替换）</param>
            <returns>是否包含非法字符</returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetContentType(System.String)">
            <summary>
            根据扩展名获取文件内容类型
            </summary>
            <param name="ext">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetFileSize(System.IO.FileInfo)">
            <summary>
            获取文件大小
            </summary>
            <param name="fileInfo">文件信息</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetVersion(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName">完整文件名</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetEncoding(System.String)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="defaultEncoding">默认编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetMd5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.HashFile(System.String,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="file">文件</param>
            <param name="algName">算法名。例如：md5,sha1</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.HashData(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">流</param>
            <param name="algName">算法名。例如：md5,sha1</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.ToHexString(System.Byte[])">
            <summary>
            将字节数组转换为16进制表示的字符在
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetSha1(System.String)">
            <summary>
            获取文件的SHA1值
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileHelper.GetSizeInBytes(System.IO.DirectoryInfo)">
            <summary>
            获取当前文件夹的大小(单位：B，包含子文件夹)
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsHidden(System.IO.DirectoryInfo)">
            <summary>
            判断当前文件夹是否是隐藏的
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.IsHidden(System.IO.FileInfo)">
            <summary>
            判断当前文件是否是隐藏的
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileHelper.Rename(System.IO.FileInfo,System.String)">
            <summary>
            将当前文件重命名为 <paramref name="newName"/> 并返回新的文件<see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="T:CommonLib.IO.FileQueueHelper">
            <summary>
            文件队列工具
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.AddFileToEnqueue(System.String,System.String,System.String)">
            <summary>
            将文件加入到本地队列
            </summary>
            <param name="queueDir">队列目录</param>
            <param name="fileName">文件名</param>
            <param name="fileContent">文件内容</param>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.GetSaveDir(System.String)">
            <summary>
            获取保存目录
            </summary>
            <param name="queuePath">队列路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.RemoveFileFromQueue(System.String)">
            <summary>
            从队列中移除文件
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.RemoveFileFromQueue(System.IO.FileInfo)">
            <summary>
            从队列中移除文件
            </summary>
            <param name="fileInfo">文件信息</param>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.GetFilesFromQueue(System.String,System.Int32,System.String)">
            <summary>
            获取文件
            </summary>
            <param name="queueDir">队列目录</param>
            <param name="takeCount">获取文件数量</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.ReadObjectFromQueue``1(System.String)">
            <summary>
            读取文件内容
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.ReadStringFromQueue(System.String)">
            <summary>
            读取文件内容
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileQueueHelper.GetQueueDirs(System.String)">
            <summary>
            获取队列文件夹
            </summary>
            <param name="queueDir">队列目录</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IO.FileTailer">
            <summary>
            文件跟随工具类
            </summary>
        </member>
        <member name="T:CommonLib.IO.FileWatcher">
            <summary>
            文件监控器
            </summary>
        </member>
        <member name="T:CommonLib.IO.FileWatcher.FileWatcherEventHandler">
            <summary>
            接受文件监控信息的事件委托
            </summary>
            <param name="sender">事件发送器</param>
            <param name="args">文件监控事件参数</param>
        </member>
        <member name="F:CommonLib.IO.FileWatcher.EventHandler">
            <summary>
            获取文件监控信息
            </summary>
        </member>
        <member name="F:CommonLib.IO.FileWatcher._interval">
            <summary>
            执行间隔
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcher.IsWatching">
            <summary>
            文件更改监控已启动
            </summary>
        </member>
        <member name="F:CommonLib.IO.FileWatcher._watchers">
            <summary>
            监控器字典
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.#ctor(System.String[])">
            <summary>
            初始化一个<see cref="T:CommonLib.IO.FileWatcher"/>类型的实例
            </summary>
            <param name="paths">路径</param>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.AddPath(System.String)">
            <summary>
            添加路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.DeletePath(System.String)">
            <summary>
            删除路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.Start">
            <summary>
            启动文件监控
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.Stop">
            <summary>
            停止文件监控
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileWatcher.CreateWatcher(System.String)">
            <summary>
            创建监控器
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.IO.FileWatcherEventArgs">
            <summary>
            文件监控事件参数
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcherEventArgs.ChangeTypes">
            <summary>
            变更类型
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcherEventArgs.FullPath">
            <summary>
            文件全路径
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcherEventArgs.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcherEventArgs.OldFullPath">
            <summary>
            旧的文件全路径
            </summary>
        </member>
        <member name="P:CommonLib.IO.FileWatcherEventArgs.OldName">
            <summary>
            旧的文件名称
            </summary>
        </member>
        <member name="M:CommonLib.IO.FileWatcherEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.IO.FileWatcherEventArgs"/>类型的实例
            </summary>
            <param name="type">监控变更类型</param>
            <param name="fullPath">文件全路径</param>
            <param name="name">文件名称</param>
            <param name="oldFullPath">旧的文件全路径</param>
            <param name="oldName">旧的文件名称</param>
        </member>
        <member name="T:CommonLib.Json.Converters.ChinaDateTimeConverter">
            <summary>
            中国时间转换器
            <para>
            [JsonConverter(typeof(ChinaDateTimeConverter))]
            public DateTime Birthday { get; set; }
            </para>
            </summary>
        </member>
        <member name="F:CommonLib.Json.Converters.ChinaDateTimeConverter.DtConverter">
            <summary>
            时间转换器
            </summary>
        </member>
        <member name="M:CommonLib.Json.Converters.ChinaDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:CommonLib.Json.Converters.ChinaDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Json.Converters.CustomDateFormatConverter">
            <summary>
            自定义时间格式转换器
            <para>
            [JsonConverter(typeof(CustomDateFormatConverter),"yyyy-MM-dd HH:mm:ss")]
            public DateTime Birthday { get; set; }
            </para>
            </summary>
        </member>
        <member name="M:CommonLib.Json.Converters.CustomDateFormatConverter.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.Json.Converters.CustomDateFormatConverter"/>类型的实例
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="T:CommonLib.Json.Converters.DataSetConverter">
            <summary>
            DataSet 转换器
            </summary>
        </member>
        <member name="M:CommonLib.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:CommonLib.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Json.Converters.DataTableConverter">
            <summary>
            DataTable 转换器
            </summary>
        </member>
        <member name="M:CommonLib.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:CommonLib.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Json.Converters.Internals.DataRowConverter">
            <summary>
            DataRow 转换器
            </summary>
        </member>
        <member name="M:CommonLib.Json.Converters.Internals.DataRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:CommonLib.Json.Converters.Internals.DataRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.Converters.Internals.DataRowConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Json.JsonExtensions">
            <summary>
            Json辅助扩展操作
            </summary>
        </member>
        <member name="M:CommonLib.Json.JsonExtensions.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonExtensions.ToObject(System.String)">
            <summary>
            将Json字符串转换为独享
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonExtensions.ToJson(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertToSingleQuotes">是否将双引号转换成单引号</param>
            <param name="camelCase">是否驼峰式命名</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonExtensions.ToJObject(System.String)">
            <summary>
            将Json字符串转换为Linq对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Json.JsonHelper">
            <summary>
            Json操作辅助类
            </summary>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            Json时间格式化
            </summary>
            <param name="json">json</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <param name="json">Json字符串</param>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToObject(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToJson(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertToSingleQuotes">是否将双引号转换成单引号</param>
            <param name="camelCase">是否驼峰式命名</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.SerializableToFile(System.String,System.Object)">
            <summary>
            将对象序列化到Json文件
            </summary>
            <param name="fileName">文件名，绝对路径</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.DeserializeFromFile``1(System.String)">
            <summary>
            从Json文件反序列成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">文件名，绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToJsonByForm(System.String)">
            <summary>
            将Form表单转换成Json字符串
            </summary>
            <param name="formStr">Form表单字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Json.JsonHelper.ToJObject(System.String)">
            <summary>
            将Json字符串转换为Linq对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.MailUtils">
             <summary>
             <para>
             邮件发送工具 <br/>
             来自: <seealso href="https://github.com/jstedfast/MimeKit"/>
             </para>
             <code>
            var result = await MailUtils.Create(new MailConfig()
            {
            ServMailSMTP = "smtp.qq.com",
            ServMailPort = 465,
            ServMailAccount = "16826375@qq.com",
            ServMailUserName = "16826375",
            ServMailUserPwd = "这里是密码",
            ServMailIsSSL = true
            })
            .SendEmailAsync("16826375@qq.com", "测试标题", "测试内容");    ///
             </code>
             </summary>
        </member>
        <member name="M:CommonLib.MailUtils.Create(CommonLib.MailConfig)">
            <summary>
            创建邮件客户端
            </summary>
            <param name="mailConfig"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.MailUtils.SendEmail(System.String,System.String,System.String)">
            <summary>
            使用SMTP协议，异步发送邮件
            </summary>
            <param name="rctMail"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.MailUtils.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            使用SMTP协议，异步发送邮件
            </summary>
            <param name="rctMail"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.MailConfig">
            <summary>
            邮件服务配置
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailSMTP">
            <summary>
            SMTP服务器
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailPort">
            <summary>
            SMTP端口 默认25，为了保证安全，建议启用465等SSL端口
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailAccount">
            <summary>
            邮箱账户
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailUserName">
            <summary>
            邮箱用户名
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailUserPwd">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.FromDisplayName">
            <summary>
            发送方别名，这时使用站点名称
            </summary>
        </member>
        <member name="P:CommonLib.MailConfig.ServMailIsSSL">
            <summary>
            是否启用SSL，启用用使用465端口/否则使用25端口
            </summary>
        </member>
        <member name="T:CommonLib.Map.MapHelper">
            <summary>
            地图相关的操作
            </summary>
        </member>
        <member name="M:CommonLib.Map.MapHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两点位置的距离，返回两点的距离，单位 米 该公式为GOOGLE提供，误差小于0.2米
            </summary>
            <param name="lat1">第一点纬度</param>
            <param name="lng1">第一点经度</param>
            <param name="lat2">第二点纬度</param>
            <param name="lng2">第二点经度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Map.MapHelper.Rad(System.Double)">
            <summary>
            经纬度转化成弧度
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.AI.PredictUtil.LinearRegressionPredict(System.Double[],System.Double[])">
            <summary>
            线性回归预测
            </summary>
            <param name="inputData">输入数据</param>
            <param name="outputData">输出数据</param>
            <returns>预测结果</returns>
        </member>
        <member name="M:CommonLib.Maths.AI.PredictUtil.BuildMatrix(System.Double[],System.Int32)">
            <summary>
            构建多项式矩阵
            </summary>
            <param name="inputData">输入数据</param>
            <param name="degree">多项式的次数</param>
            <returns>多项式矩阵</returns>
        </member>
        <member name="M:CommonLib.Maths.AI.PredictUtil.KNNPredict(System.Double[],System.Double[],System.Int32)">
            <summary>
            k近邻预测
            </summary>
            <param name="inputData">输入数据</param>
            <param name="outputData">输出数据</param>
            <param name="k">邻居数量</param>
            <returns>预测结果</returns>
        </member>
        <member name="T:CommonLib.Maths.HexConv">
            <summary>
            进制转换
            </summary>
        </member>
        <member name="F:CommonLib.Maths.HexConv.BaseChar">
            <summary>
            基础字符
            </summary>
        </member>
        <member name="M:CommonLib.Maths.HexConv.BinToOct(System.String)">
            <summary>
            二进制转换为八进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.BinToDec(System.String)">
            <summary>
            二进制转换为十进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.BinToHex(System.String)">
            <summary>
            二进制转换为十六进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.OctToBin(System.String)">
            <summary>
            八进制转换为二进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.OctToDec(System.String)">
            <summary>
            八进制转换为十进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.OctToHex(System.String)">
            <summary>
            八进制转换为十六进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.DecToBin(System.String)">
            <summary>
            十进制转换为二进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.DecToOct(System.String)">
            <summary>
            十进制转换为八进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.DecToHex(System.String)">
            <summary>
            十进制转换为十六进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.HexToBin(System.String)">
            <summary>
            十六进制转换为二进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.HexToOct(System.String)">
            <summary>
            十六进制转换为八进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.HexToDec(System.String)">
            <summary>
            十六进制转换为十进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字符排序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:CommonLib.Maths.HexConv.GetBaseChar(System.Int32)">
            <summary>
            获取基础字符串
            </summary>
            <param name="radix">进制数</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Maths.MathEvaluator">
            <summary>
            计算器
            </summary>
        </member>
        <member name="F:CommonLib.Maths.MathEvaluator._parser">
            <summary>
            计算表达式解析器
            </summary>
        </member>
        <member name="F:CommonLib.Maths.MathEvaluator._node">
            <summary>
            计算节点
            </summary>
        </member>
        <member name="M:CommonLib.Maths.MathEvaluator.Eval(System.String)">
            <summary>
            执行
            </summary>
            <param name="expressionStr">表达式字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.MathEvaluator.Exp1(System.Double@)">
            <summary>
            表达式1
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:CommonLib.Maths.MathEvaluator.Exp2(System.Double@)">
            <summary>
            表达式2
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:CommonLib.Maths.MathEvaluator.Atom(System.Double@)">
            <summary>
            数值处理
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:CommonLib.Maths.MathEvaluator.NextNode">
            <summary>
            获取下一个计算节点
            </summary>
        </member>
        <member name="T:CommonLib.Maths.CalculateExpressionParser">
            <summary>
            计算表达式解析器
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateExpressionParser._expressionStr">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateExpressionParser._currentIndex">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateExpressionParser._m1">
            <summary>
            正值
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateExpressionParser._m2">
            <summary>
            反转值
            </summary>
        </member>
        <member name="M:CommonLib.Maths.CalculateExpressionParser.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:CommonLib.Maths.CalculateExpressionParser"/>类型的实例
            </summary>
            <param name="expressionStr">表达式字符串</param>
        </member>
        <member name="M:CommonLib.Maths.CalculateExpressionParser.GetAllNodes">
            <summary>
            获取所有计算节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.CalculateExpressionParser.GetNextNode">
            <summary>
            获取下一个计算节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Maths.CalculateNode">
            <summary>
            计算节点
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateNode.Symbol">
            <summary>
            计算符号
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculateNode.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:CommonLib.Maths.CalculateNode.#ctor(CommonLib.Maths.CalculationSymbol)">
            <summary>
            初始化一个<see cref="T:CommonLib.Maths.CalculateNode"/>类型的实例
            </summary>
            <param name="symbol">计算符号</param>
        </member>
        <member name="M:CommonLib.Maths.CalculateNode.#ctor(CommonLib.Maths.CalculationSymbol,System.Double)">
            <summary>
            初始化一个<see cref="T:CommonLib.Maths.CalculateNode"/>类型的实例
            </summary>
            <param name="symbol">计算符号</param>
            <param name="value">值</param>
        </member>
        <member name="M:CommonLib.Maths.CalculateNode.ToString">
            <summary>
            输出字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Maths.CalculationSymbol">
            <summary>
            计算符号
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.OpenBracket">
            <summary>
            括号"("
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.CloseBracket">
            <summary>
            括号")"
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Add">
            <summary>
            加 +
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Sub">
            <summary>
            减 -
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Mul">
            <summary>
            乘 *
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Div">
            <summary>
            除 /
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:CommonLib.Maths.CalculationSymbol.EOF">
            <summary>
            等于
            </summary>
        </member>
        <member name="T:CommonLib.Maths.MathHelper">
            <summary>
            数据计算操作辅助类
            </summary>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两点之间的距离
            </summary>
            <param name="x1">横坐标1</param>
            <param name="y1">纵坐标1</param>
            <param name="x2">横坐标2</param>
            <param name="y2">纵坐标2</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Gcd(System.Int32,System.Int32)">
            <summary>
            计算两个整数的最大公约数
            </summary>
            <param name="a">第一个整数</param>
            <param name="b">第二个整数</param>
            <returns>最大公约数</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Lcm(System.Int32,System.Int32)">
            <summary>
            计算两个整数的最小公倍数
            </summary>
            <param name="a">第一个整数</param>
            <param name="b">第二个整数</param>
            <returns>最小公倍数</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.IsPrime(System.Int32)">
            <summary>
            判断一个整数是否为质数
            </summary>
            <param name="n">要判断的整数</param>
            <returns>如果是质数，则返回 true；否则返回 false</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.ApproxEqual(System.Double,System.Double,System.Double)">
            <summary>
            计算两个浮点数的差的绝对值是否小于指定的精度
            </summary>
            <param name="a">第一个浮点数</param>
            <param name="b">第二个浮点数</param>
            <param name="eps">指定的精度</param>
            <returns>如果两个浮点数的差的绝对值小于指定的精度，则返回 true；否则返回 false</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Factorial(System.Int32)">
            <summary>
            求一个整数的阶乘
            </summary>
            <param name="n">要求阶乘的整数</param>
            <returns>阶乘结果</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Fibonacci(System.Int32)">
            <summary>
            求一个整数的斐波那契数列的值
            </summary>
            <param name="n">要求斐波那契数列的整数</param>
            <returns>斐波那契数列的值</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.CountBits(System.Int32)">
            <summary>
            求一个整数的二进制表示中 1 的个数
            </summary>
            <param name="n">要求二进制表示中 1 的个数的整数</param>
            <returns>二进制表示中 1 的个数</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Average(System.Double,System.Double)">
            <summary>
            求两个浮点数的平均值
            </summary>
            <param name="a">第一个浮点数</param>
            <param name="b">第二个浮点数</param>
            <returns>两个浮点数的平均值</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Median(System.Double,System.Double)">
            <summary>
            求两个浮点数的中位数
            </summary>
            <param name="a">第一个浮点数</param>
            <param name="b">第二个浮点数</param>
            <returns>两个浮点数的中位数</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Pow(System.Int32,System.Int32)">
            <summary>
            计算 n 的 k 次方
            </summary>
            <param name="n">底数</param>
            <param name="k">指数</param>
            <returns>n 的 k 次方</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.IsPerfectSquare(System.Int32)">
            <summary>
            判断一个整数是否为完全平方数
            </summary>
            <param name="n">要判断的整数</param>
            <returns>如果是完全平方数，则返回 true；否则返回 false</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.IsHappyNumber(System.Int32)">
            <summary>
            计算一个整数的各个数位上数字的平方和，如果结果为 1，则返回 true；否则进行下一次计算，直到结果为 1 或者进入死循环为止
            </summary>
            <param name="n">要计算的整数</param>
            <returns>如果结果为 1，则返回 true；否则返回 false</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.HammingDistance(System.Int32,System.Int32)">
            <summary>
            计算两个整数的二进制表示中有多少位不同
            </summary>
            <param name="a">第一个整数</param>
            <param name="b">第二个整数</param>
            <returns>两个整数的二进制表示中有多少位不同</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.GetAllFactors(System.Int32)">
            <summary>
            求一个整数的所有因子
            </summary>
            <param name="n">要求因子的整数</param>
            <returns>所有因子</returns>
        </member>
        <member name="M:CommonLib.Maths.MathHelper.Add(System.Int32,System.Int32)">
            <summary>
            计算两个整数的和，如果结果溢出了 int 类型的取值范围，则返回 int.MaxValue
            </summary>
            <param name="a">第一个整数</param>
            <param name="b">第二个整数</param>
            <returns>两个整数的和，如果结果溢出了 int 类型的取值范围，则返回 int.MaxValue</returns>
        </member>
        <member name="P:CommonLib.Maths.RadarChart.Data">
            <summary>
            向量长度集合
            </summary>
        </member>
        <member name="P:CommonLib.Maths.RadarChart.StartAngle">
            <summary>
            起始弧度
            </summary>
        </member>
        <member name="M:CommonLib.Maths.RadarChart.#ctor(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            多边形
            </summary>
            <param name="data">向量长度集合</param>
            <param name="startAngle">起始弧度</param>
        </member>
        <member name="M:CommonLib.Maths.RadarChart.GetPoints">
            <summary>
            获取每个点的坐标
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Maths.RadarChartEngine">
            <summary>
            雷达图引擎  用户画像
            </summary>
        </member>
        <member name="M:CommonLib.Maths.RadarChartEngine.ComputeArea(System.Collections.Generic.List{CommonLib.Maths.Point2D})">
            <summary>
            计算多边形面积的函数
            (以原点为基准点,分割为多个三角形)
            定理：任意多边形的面积可由任意一点与多边形上依次两点连线构成的三角形矢量面积求和得出。矢量面积=三角形两边矢量的叉乘。
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.RadarChartEngine.ComputeIntersection(CommonLib.Maths.RadarChart,CommonLib.Maths.RadarChart)">
            <summary>
            获取两个多边形的相交区域
            </summary>
            <param name="first">多边形1</param>
            <param name="second">多边形2</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Maths.TemperatureConv">
            <summary>
            温度转换
            </summary>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.DegreesCelsiusToFahrenheit(System.Decimal)">
            <summary>
            摄氏度转换为华氏度
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.DegreesCelsiusToThermodynamicTemperature(System.Decimal)">
            <summary>
            摄氏度转换为开氏度(热力学温度)
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.FahrenheitToDegreesCelsius(System.Decimal)">
            <summary>
            华氏度转换为摄氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.FahrenheitToThermodynamicTemperature(System.Decimal)">
            <summary>
            华氏度转换为开氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.ThermodynamicTemperatureToDegreesCelsius(System.Decimal)">
            <summary>
            开氏度转换为摄氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Maths.TemperatureConv.ThermodynamicTemperatureToFahrenheit(System.Decimal)">
            <summary>
            开氏度转换为华氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Medias.Images.ImageHelper">
            <summary>
            图片操作辅助类
            </summary>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.BrightnessHandle(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            亮度处理
            </summary>
            <param name="bitmap">图片</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="val">增加或减少的光暗值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.FilterColor(System.Drawing.Bitmap)">
            <summary>
            滤色处理
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.LeftRightTurn(System.Drawing.Bitmap)">
            <summary>
            左右翻转
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.TopBottomTurn(System.Drawing.Bitmap)">
            <summary>
            上下翻转
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.ToBlackWhiteImage(System.Drawing.Bitmap)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="bitmap">图片</param>
            <param name="isTwist">是否扭曲，true:扭曲,false:不扭曲</param>
            <param name="shapeMultValue">波形的幅度倍数，越大扭曲的程度越高，默认为3</param>
            <param name="shapePhase">波形的起始相位，取值区间[0-2*PI]</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            图片旋转，使图像绕中心点旋转一定角度
            </summary>
            <param name="bitmap">图片</param>
            <param name="angle">旋转的角度，正值为逆时针方向</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Gray(System.Drawing.Bitmap)">
            <summary>
            图片灰度化
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Plate(System.Drawing.Bitmap)">
            <summary>
            底片效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Emboss(System.Drawing.Bitmap)">
            <summary>
            浮雕效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Soften(System.Drawing.Bitmap)">
            <summary>
            柔化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Sharpen(System.Drawing.Bitmap)">
            <summary>
            锐化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Medias.Images.ImageHelper.Atomizing(System.Drawing.Bitmap)">
            <summary>
            雾化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Medias.Images.ImageLocationMode">
            <summary>
            图片位置模式
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.Top">
            <summary>
            靠上
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.LeftCenter">
            <summary>
            左中
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.RightCenter">
            <summary>
            右中
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.Bottom">
            <summary>
            靠下
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ImageLocationMode.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="T:CommonLib.Medias.Images.ThumbnailMode">
            <summary>
            缩略图模式
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ThumbnailMode.Cut">
            <summary>
            指定宽高裁剪（不变形）
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ThumbnailMode.FixedW">
            <summary>
            指定宽度，高度自动
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ThumbnailMode.FixedH">
            <summary>
            指定高度，宽度自动
            </summary>
        </member>
        <member name="F:CommonLib.Medias.Images.ThumbnailMode.FixedBoth">
            <summary>
            指定宽高（变形）
            </summary>
        </member>
        <member name="T:CommonLib.QrCoder.QrCode.ErrorCorrectionLevel">
            <summary>
            容错级别
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.ErrorCorrectionLevel.L">
            <summary>
            可以纠正最大7%的错误
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.ErrorCorrectionLevel.M">
            <summary>
            可以纠正最大15%的错误
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.ErrorCorrectionLevel.Q">
            <summary>
            可以纠正最大25%的错误
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.ErrorCorrectionLevel.H">
            <summary>
            可以纠正最大30%的错误
            </summary>
        </member>
        <member name="T:CommonLib.QrCoder.QrCode.IQrCodeService">
            <summary>
            二维码服务
            </summary>
        </member>
        <member name="M:CommonLib.QrCoder.QrCode.IQrCodeService.Size(CommonLib.QrCoder.QrCode.QrSize)">
            <summary>
            设置二维码尺寸
            </summary>
            <param name="size">二维码尺寸</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCode.IQrCodeService.Size(System.Int32)">
            <summary>
            设置二维码尺寸
            </summary>
            <param name="size">二维码尺寸</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCode.IQrCodeService.Correction(CommonLib.QrCoder.QrCode.ErrorCorrectionLevel)">
            <summary>
            容错处理
            </summary>
            <param name="level">容错级别</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCode.IQrCodeService.CreateQrCode(System.String)">
            <summary>
            创建二维码
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="T:CommonLib.QrCoder.QrCode.QrSize">
            <summary>
            二维码尺寸
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.QrSize.Small">
            <summary>
            小
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.QrSize.Middle">
            <summary>
            中
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCode.QrSize.Large">
            <summary>
            大
            </summary>
        </member>
        <member name="T:CommonLib.QrCoder.QrCoder.QrCoderService">
            <summary>
            QRCoder二维码服务
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCoder.QrCoderService._size">
            <summary>
            二维码尺寸
            </summary>
        </member>
        <member name="F:CommonLib.QrCoder.QrCoder.QrCoderService._level">
            <summary>
            容错级别
            </summary>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.#ctor">
            <summary>
            初始化QRCoder组件二维码服务
            </summary>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Size(CommonLib.QrCoder.QrCode.QrSize)">
            <summary>
            设置二维码尺寸
            </summary>
            <param name="size">二维码尺寸</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Size(System.Int32)">
            <summary>
            设置二维码尺寸
            </summary>
            <param name="size">二维码尺寸</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Correction(CommonLib.QrCoder.QrCode.ErrorCorrectionLevel)">
            <summary>
            容错处理
            </summary>
            <param name="level">容错级别</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.CreateQrCode(System.String)">
            <summary>
            创建二维码
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Create(System.String,System.String)">
            <summary>
            定义参数,生成二维码
            </summary>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Encode(System.String)">
            <summary>
            返回二维码图片
            </summary>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Decode(System.Drawing.Bitmap)">
            <summary>
            获取二维码内容
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.QrCoder.QrCoder.QrCoderService.Decode(System.String)">
            <summary>
            解析图片的的内容
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Randoms.GuidRandomGenerator">
            <summary>
            Guid随机数生成器，每次创建一个新的Guid字符串，去掉了Guid的分隔符
            </summary>
        </member>
        <member name="M:CommonLib.Randoms.GuidRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Randoms.GuidRandomGenerator.Instance">
            <summary>
            Guid 随机数生成器实例
            </summary>
        </member>
        <member name="T:CommonLib.Randoms.IRandomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="T:CommonLib.Sms.Extensions.Extensions">
            <summary>
            短信服务扩展
            </summary>
        </member>
        <member name="M:CommonLib.Sms.Extensions.Extensions.AddLuoSiMao(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            注册LuoSiMao短信服务
            </summary>
            <param name="services">服务集合</param>
            <param name="key">密钥</param>
        </member>
        <member name="T:CommonLib.Sms.ISmsService">
            <summary>
            短信服务
            </summary>
        </member>
        <member name="M:CommonLib.Sms.ISmsService.SendAsync(System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="mobile">手机号</param>
            <param name="content">内容</param>
        </member>
        <member name="T:CommonLib.Sms.LuoSiMao.ISmsConfigProvider">
            <summary>
            短信配置提供器
            </summary>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.ISmsConfigProvider.GetConfigAsync">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="T:CommonLib.Sms.LuoSiMao.LuoSiMaoResult">
            <summary>
            LuoSiMao短信接口返回结果
            </summary>
        </member>
        <member name="P:CommonLib.Sms.LuoSiMao.LuoSiMaoResult.error">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:CommonLib.Sms.LuoSiMao.LuoSiMaoResult.msg">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="T:CommonLib.Sms.LuoSiMao.SmsConfig">
            <summary>
            LuoSiMao短信配置
            </summary>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsConfig.#ctor(System.String)">
            <summary>
            初始化短信配置
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="P:CommonLib.Sms.LuoSiMao.SmsConfig.Key">
            <summary>
            密钥
            </summary>
        </member>
        <member name="T:CommonLib.Sms.LuoSiMao.SmsConfigProvider">
            <summary>
            短信配置提供器
            </summary>
        </member>
        <member name="F:CommonLib.Sms.LuoSiMao.SmsConfigProvider._config">
            <summary>
            短信配置
            </summary>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsConfigProvider.#ctor(System.String)">
            <summary>
            初始化短信配置提供器
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsConfigProvider.GetConfigAsync">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="T:CommonLib.Sms.LuoSiMao.SmsService">
            <summary>
            短信服务
            </summary>
        </member>
        <member name="F:CommonLib.Sms.LuoSiMao.SmsService._configProvider">
            <summary>
            短信配置提供器
            </summary>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsService.#ctor(CommonLib.Sms.LuoSiMao.ISmsConfigProvider)">
            <summary>
            初始化短信服务
            </summary>
            <param name="configProvider">短信配置提供器</param>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsService.SendAsync(System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="mobile">手机号</param>
            <param name="content">内容</param>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsService.GetAuthorization">
            <summary>
            获取授权头信息
            </summary>
        </member>
        <member name="M:CommonLib.Sms.LuoSiMao.SmsService.CreateResult(System.String)">
            <summary>
            创建结果
            </summary>
        </member>
        <member name="T:CommonLib.Sms.SmsErrorCode">
            <summary>
            短信错误码
            </summary>
        </member>
        <member name="F:CommonLib.Sms.SmsErrorCode.Ok">
            <summary>
            发送成功
            </summary>
        </member>
        <member name="F:CommonLib.Sms.SmsErrorCode.MobileError">
            <summary>
            手机号错误
            </summary>
        </member>
        <member name="T:CommonLib.Sms.SmsResult">
            <summary>
            短信接口返回结果
            </summary>
        </member>
        <member name="M:CommonLib.Sms.SmsResult.#ctor(System.Boolean,System.String,CommonLib.Sms.SmsErrorCode)">
            <summary>
            初始化短信接口返回结果
            </summary>
            <param name="success">是否发送成功</param>
            <param name="raw">短信提供商返回的原始消息</param>
            <param name="errorCode">短信错误码</param>
        </member>
        <member name="P:CommonLib.Sms.SmsResult.Success">
            <summary>
            是否发送成功
            </summary>
        </member>
        <member name="P:CommonLib.Sms.SmsResult.ErrorCode">
            <summary>
            短信错误码
            </summary>
        </member>
        <member name="P:CommonLib.Sms.SmsResult.Raw">
            <summary>
            短信提供商返回的原始消息
            </summary>
        </member>
        <member name="P:CommonLib.Sms.SmsResult.Ok">
            <summary>
            成功消息
            </summary>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetApplicationRunInfo">
            <summary>
            获取程序运行资源信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetSystemPlatformInfo">
            <summary>
            获取系统运行平台信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetSystemRunEvnInfo">
            <summary>
            获取系统运行环境信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetEnvironmentVariables">
            <summary>
            获取系统全部环境变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetValues``1(``0)">
            <summary>
            获取某个类型的值以及名称
            </summary>
            <typeparam name="TInfo"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetDisplayNameValue(System.Collections.Generic.IList{System.Reflection.CustomAttributeData})">
            <summary>
            获取 [Display] 特性的属性 Name 的值
            </summary>
            <param name="attrs"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetPropertyInfoValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            获取属性的值
            </summary>
            <param name="info"></param>
            <param name="obj">实例</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.IsWindows">
            <summary>
            判断当前操作系统是否为 Windows
            </summary>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.IsUnix">
            <summary>
            判断当前操作系统是否为 Unix
            </summary>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.IsXbox">
            <summary>
            判断当前操作系统是否为 Xbox
            </summary>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.IsMacOSX">
            <summary>
            判断当前操作系统是否为 macOS
            </summary>
        </member>
        <member name="M:CommonLib.SystemInfo.EnvironmentInfo.GetLineSeparator">
            <summary>
            获取当前系统的换行分隔符
            </summary>
            <returns>换行分隔符</returns>
        </member>
        <member name="M:CommonLib.SystemInfo.IpInfo.GetIpAddress4">
            <summary>
            获取ip v4地址
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLib.SystemInfo.SystemHelper.GetProcessStartupDuration" -->
        <member name="P:CommonLib.SystemInfo.SystemHelper.Desktop">
            <summary>
            桌面文件夹
            </summary>
        </member>
        <member name="P:CommonLib.SystemInfo.SystemHelper.Favorites">
            <summary>
            收藏夹
            </summary>
        </member>
        <member name="P:CommonLib.SystemInfo.SystemHelper.MyDocuments">
            <summary>
            我的文档
            </summary>
        </member>
        <member name="P:CommonLib.SystemInfo.SystemHelper.BaseDir">
            <summary>
            应用程序执行目录(多线程中也有效)
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetLocalMac">
            <summary>
            获取本机的MAC;
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetMacAddress(System.String)">
            <summary>
            获取ip对应的MAC地址
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetBIOSSerialNumber">
            <summary>
            获取主板序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetCPUSerialNumber">
            <summary>
            获取CPU序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetCPUID">
            <summary>
            获得CPU编号
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetDiskSerialNumber">
            <summary>
            获取磁盘序列号
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetPhysicalMemory">
            <summary>
            物理内存
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetVideoPNPID">
            <summary>
            显卡PNPDeviceID
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetSoundPNPID">
            <summary>
            声卡PNPDeviceID
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetCPUVersion">
            <summary>
            CPU版本信息
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetCPUName">
            <summary>
            CPU名称信息
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetCPUManufacturer">
            <summary>
            CPU制造厂商
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetBoardManufacturer">
            <summary>
            主板制造厂商
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetBoardID">
            <summary>
            主板编号
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.HardwareInfo.GetBoardType">
            <summary>
            主板型号
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.NetworkInfo.GetIPAddress">
            <summary>
            获取IP地址
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.NetworkInfo.GetLocalIpAddress">
            <summary>
            获取本地ip地址，多个ip
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.NetworkInfo.GetExtenalIpAddress">
            <summary>
            获取外网ip地址
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.NetworkInfo.GetWebStr(System.String)">
            <summary>
            获取网址address的返回的文本串数据
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CommonLib.SystemManagement.SoftwaresInfo" -->
        <member name="M:CommonLib.SystemManagement.SoftwaresInfo.GetSoftWares">
            <summary>
            从注册表获取本机安装的软件信息
            </summary>
            <returns>返回软件名、版本号的</returns>
        </member>
        <member name="M:CommonLib.SystemManagement.SystemInfo.GetComputerName">
            <summary>
            获取计算机名
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.SystemInfo.GetUserName">
            <summary>
            操作系统的登录用户名
            </summary>
        </member>
        <member name="M:CommonLib.SystemManagement.SystemInfo.GetSystemType">
            <summary>
            操作系统类型
            </summary>
        </member>
        <member name="T:CommonLib.Timing.CNDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnFtvl">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:CommonLib.Timing.CNDate.cnFtvs">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="M:CommonLib.Timing.CNDate.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Timing.ChinaDate">
            <summary>
            公历转农历
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.GetMondayDateByDate(System.DateTime)">
            <summary>
            根据日期值获得周一的日期
            </summary>
            <param name="dt">输入日期</param>
            <returns>周一的日期</returns>
        </member>
        <member name="M:CommonLib.Timing.ChinaDate.GetChinaDate(System.Nullable{System.DateTime})">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:CommonLib.Timing.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="T:CommonLib.Timing.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:CommonLib.Timing.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="F:CommonLib.Timing.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.#ctor(System.Nullable{System.DateTime})">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="leapMonthFlag">闰月标志</param>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:CommonLib.Timing.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.newCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份， 每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地 球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用 定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseTwentyFourPrevDay">
            <summary>
            当前日期前一个最近节气
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.ChineseTwentyFourNextDay">
            <summary>
            当前日期后一个最近节气
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的 鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:CommonLib.Timing.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:CommonLib.Timing.DateTimeExtensions">
            <summary>
            日期时间辅助扩展操作
            </summary>
        </member>
        <member name="F:CommonLib.Timing.DateTimeExtensions.InitialJavaScriptDateTicks">
            <summary>
            初始化js日期时间戳
            </summary>
        </member>
        <member name="F:CommonLib.Timing.DateTimeExtensions.Date1970">
            <summary>
            1970年1月1日
            </summary>
        </member>
        <member name="F:CommonLib.Timing.DateTimeExtensions.MinDate">
            <summary>
            最小日期
            </summary>
        </member>
        <member name="F:CommonLib.Timing.DateTimeExtensions.MaxDate">
            <summary>
            最大日期
            </summary>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.ToUniqueString(System.DateTime,System.Boolean)">
            <summary>
            获取时间相对唯一字符串
            </summary>
            <param name="dateTime">时间点</param>
            <param name="milsec">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.ToJsGetTime(System.DateTime)">
            <summary>
            将时间转换为Js时间格式（Date.getTiem()）
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒毫秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <param name="milliseconds">毫秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            设置时间，设置时间间隔
            </summary>
            <param name="date">时间</param>
            <param name="time">时间间隔</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的结束时间。范例：yyyy-MM-dd 23:59:59.999
            </summary>
            <param name="date">指定时间</param>
            <returns>当天的结束时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.BeginOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的开始时间（凌晨）。范例：yyyy-MM-dd 00:00:00
            </summary>
            <param name="time">指定时间</param>
            <returns>当天的开始时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的结束时间。范例：yyyy-MM-dd 23:59:59:999
            </summary>
            <param name="date">时间</param>
            <returns>当月的结束时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.BeginOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的开始时间。范例：yyyy-MM-01 00:00:00.000
            </summary>
            <param name="date">时间</param>
            <returns>当月的开始时间</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份第一天
            </summary>
            <param name="date">日期</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份第一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份最后一天
            </summary>
            <param name="date">日期</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份最后一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            获取月总天数
            </summary>
            <param name="date">日期</param>
            <returns>月总天数</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            获取当前毫秒数，毫秒数=1970年1月1日-当前时间，UNIX
            </summary>
            <param name="datetime">当前时间</param>
            <returns>毫秒数</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.CompareInterval(System.DateTime,System.DateTime,System.String)">
            <summary>
            计算两个时间的间隔
            </summary>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
            <param name="dateFormat">间隔格式(y:年,M:月,d:天,h:小时,m:分钟,s:秒,fff:毫秒)</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsBetweenTime(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间段内，格式：hh:mm:ss
            </summary>
            <param name="currentTime">当前时间</param>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsBetweenDate(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定日期时间段内，格式：yyyy-MM-dd
            </summary>
            <param name="currentDate">当前日期</param>
            <param name="beginDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间范围内，格式：yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="current">当前时间</param>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.IsValid(System.DateTime)">
            <summary>
            是否有效时间
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetUnixTimeSeconds(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的秒数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetUnixTimeMilliseconds(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的毫秒数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetTotalMicroseconds(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的微秒时间戳
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetTotalNanoseconds(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的纳秒时间戳
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetTotalMinutes(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的分钟数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetTotalHours(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的小时数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetTotalDays(System.DateTime@)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的天数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.ToTimeStamp(System.DateTime)">
            <summary>
            将时间转换为时间戳
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.CsharpTime2JavascriptTime(System.DateTime)">
            <summary>
            将C#时间转换为Javascript时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.PhpTime2CsharpTime(System.DateTime,System.Int64)">
            <summary>
            将PHP时间转换为C#时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="time">PHP的时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.CsharpTime2PhpTime(System.DateTime)">
            <summary>
            将C#时间转换为PHP时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            添加星期
            </summary>
            <param name="dateTime">时间</param>
            <param name="weeks">周</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.ConvertToTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将当前时间转换为特定时区的时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="timeZone">时区</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetMonday(System.DateTime)">
            <summary>
            计算周一的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetSunday(System.DateTime)">
            <summary>
            计算周日的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetWeekFirstDay(System.DateTime,System.Boolean)">
            <summary>
            获取周第一天（星期一）
            </summary>
            <param name="someDate"></param>
            <param name="isCNRule">是否中国规则</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetWeekLastDay(System.DateTime,System.Boolean)">
            <summary>
            获取周最后一天（星期日）
            </summary>
            <param name="someDate"></param>
            <param name="isCNRule">是否中国规则</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetMonthFirstDay(System.DateTime)">
            <summary>
            计算月初的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetMonthLastDay(System.DateTime)">
            <summary>
            计算月尾的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetQuarterFirstDay(System.DateTime)">
            <summary>
            计算月初的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetQuarterLastDay(System.DateTime)">
            <summary>
            计算月尾的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetYearFirstDay(System.DateTime)">
            <summary>
            计算年初的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetYearLastDay(System.DateTime)">
            <summary>
            计算年尾的日期
            </summary>
            <param name="someDate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.GetCNHour(System.DateTime)">
            <summary>
            读取中国时辰，一天12个时辰，一个时辰2个小时
            </summary>
            <param name="time"></param>
            <returns>返回元组，.DIZHI表示地支时辰，.CNHOUR表示时辰范围</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.DateDiff(System.DateTime@,System.DateTime@)">
            <summary>
            返回时间差
            </summary>
            <param name="dateTime1">时间1</param>
            <param name="dateTime2">时间2</param>
            <returns>时间差</returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeExtensions.FriendlyDate(System.DateTime)">
            <summary>
            将时间的天转换为友好的标记
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Timing.DateTimeHelper">
            <summary>
            时间操作辅助类
            </summary>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.GetDays(System.Int32)">
            <summary>
            获取指定年的总天数
            </summary>
            <param name="year">指定年</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.GetDays(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            获取指定年的总天数，使用指定区域性
            </summary>
            <param name="year">指定年</param>
            <param name="culture">指定区域性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.GetDays(System.DateTime)">
            <summary>
            获取指定时间的年的总天数
            </summary>
            <param name="date">指定时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.GetDays(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间之间的天数
            </summary>
            <param name="fromDate">开始时间</param>
            <param name="toDate">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.CalculateAge(System.DateTime)">
            <summary>
            计算年龄
            </summary>
            <param name="dateOfBirth">出生日期</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            计算年龄，指定参考日期
            </summary>
            <param name="dateOfBirth">出生日期</param>
            <param name="referenceDate">参考日期</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeHelper.BusinessDateFormat(System.DateTime)">
            <summary>
            业务时间格式化，返回 xxx前
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="T:CommonLib.Timing.DateTimeRange">
            <summary>
            表示一个时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Yesterday">
            <summary>
            获取 昨天的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Today">
            <summary>
            获取 今天的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Tomorrow">
            <summary>
            获取 明天的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.LastWeek">
            <summary>
            获取 上周的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.ThisWeek">
            <summary>
            获取 本周的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.NextWeek">
            <summary>
            获取 下周的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.LastMonth">
            <summary>
            获取 上个月的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.ThisMonth">
            <summary>
            获取 本月的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.NextMonth">
            <summary>
            获取 下个月的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.LastYear">
            <summary>
            获取 上一年的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.ThisYear">
            <summary>
            获取 本年的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.NextYear">
            <summary>
            获取 下一年的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Last7Days">
            <summary>
            获取 相对于当前时间过去7天的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Last30Days">
            <summary>
            获取 相对于当前时间过去30天的时间范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Last7DaysExceptToday">
            <summary>
            获取 截止到昨天的最近7天的天数范围
            </summary>
        </member>
        <member name="P:CommonLib.Timing.DateTimeRange.Last30DaysExceptToday">
            <summary>
            获取 截止到昨天的最近30天的天数范围
            </summary>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.#ctor">
            <summary>
            初始化一个<see cref="T:CommonLib.Timing.DateTimeRange"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化一个<see cref="T:CommonLib.Timing.DateTimeRange"/>类型的实例
            </summary>
            <param name="startTime">起始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.ToString">
            <summary>
            返回表示当前<see cref="T:System.Object"/>的<see cref="T:System.String"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.GetDays">
            <summary>
            获取两个时间之间的天数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.GetHours">
            <summary>
            获取两个时间之间的小时数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.GetMinutes">
            <summary>
            获取两个时间之间的分钟数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.GetSeconds">
            <summary>
            获取两个时间之间的秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Timing.DateTimeRange.GetMilliseconds">
            <summary>
            获取两个时间之间的毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.Base64UrlEncodeHelper.Encode(System.String)">
            <summary>
            The following functions perform base64url encoding which differs from regular base64 encoding as follows
            * padding is skipped so the pad character '=' doesn't have to be percent encoded
            * the 62nd and 63rd regular base64 encoding characters ('+' and '/') are replace with ('-' and '_')
            The changes make the encoding alphabet file and URL safe.
            </summary>
            <param name="arg">string to encode.</param>
            <returns>Base64Url encoding of the UTF8 bytes.</returns>
        </member>
        <member name="M:CommonLib.Tools.Base64UrlEncodeHelper.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="length">An offset in inArray.</param>
            <param name="offset">The number of elements of inArray to convert.</param>
            <returns>The string representation in base 64 url encodingof length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:CommonLib.Tools.Base64UrlEncodeHelper.Encode(System.Byte[])">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <returns>The string representation in base 64 url encodingof length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:CommonLib.Tools.Base64UrlEncodeHelper.DecodeBytes(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64-url digits, to an equivalent 8-bit unsigned integer array.</summary>
            <param name="str">base64Url encoded string.</param>
            <returns>UTF8 bytes.</returns>
        </member>
        <member name="M:CommonLib.Tools.Base64UrlEncodeHelper.Decode(System.String)">
            <summary>Decodes the string from Base64UrlEncoded to UTF8.</summary>
            <param name="arg">string to decode.</param>
            <returns>UTF8 string.</returns>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TException">异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotNullOrEmpty``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            检查字典不能为空引用或空字典，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.LessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.GreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.Between``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="start">比较范围的起始值</param>
            <param name="end">比较范围的结束值</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.NotNegativeOrZero(System.TimeSpan,System.String)">
            <summary>
            检查参数不能为负数或零，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <param name="timeSpan">时间戳</param>
            <param name="paramaName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.DirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CheckHelper.FileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="fileName">文件路径，包含文件名</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:CommonLib.Tools.CommonHelper.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.CommonHelper.GetType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Tools.CommonHelper.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:CommonLib.Tools.ConfigHelper.GetJsonConfig(System.String,System.String)">
            <summary>
            获取Json配置文件
            </summary>
            <param name="configFileName">配置文件名。默认：appsettings.json</param>
            <param name="basePath">基路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConfigHelper.GetXmlConfig(System.String,System.String)">
            <summary>
            获取Xml配置文件
            </summary>
            <param name="configFileName">配置文件名。默认：appsettings.xml</param>
            <param name="basePath">基路径</param>
            <returns></returns>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.ArabicNumbers">
            <summary>
            阿拉伯数字
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.ChineseNumbers">
            <summary>
            汉字数字
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.Lowercase">
            <summary>
            小写英文字母
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.Uppercase">
            <summary>
            大写英文字母
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="P:CommonLib.Tools.ConstHelper.FileExtensionDict">
            <summary>
            文件扩展类型字典
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.SpellLetter">
            <summary>
            拼音字母数组
            </summary>
        </member>
        <member name="F:CommonLib.Tools.ConstHelper.SpellCode">
            <summary>
            拼音区编码数组
            </summary>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToByte(System.Object)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToByte(System.Object,System.Byte)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToByteOrNull(System.Object)">
            <summary>
            转换为8位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToChar(System.Object)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToChar(System.Object,System.Char)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToCharOrNull(System.Object)">
            <summary>
            转换为可空字符
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToShort(System.Object)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToShort(System.Object,System.Int16)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToShortOrNull(System.Object)">
            <summary>
            转换为16位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToInt(System.Object,System.Int32)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToLong(System.Object,System.Int64)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToFloat(System.Object,System.Single,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDouble(System.Object,System.Double,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDecimal(System.Object,System.Decimal,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToBool(System.Object,System.Boolean)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">输入值，以逗号分隔的Guid集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">输入值，以逗号分隔的元素集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToEnum``1(System.Object)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToEnum``1(System.Object,``0)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.ToEnumOrNull``1(System.Object)">
            <summary>
            转换为可空枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ConvHelper.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.IDataSerializer.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="obj">object</param>
            <returns>bytes</returns>
        </member>
        <member name="M:CommonLib.Tools.IDataSerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="bytes">bytes</param>
            <returns>obj</returns>
        </member>
        <member name="M:CommonLib.Tools.EmojiUtil.ContainsEmoji(System.String)">
            <summary>
            判断字符串中是否包含 Emoji 表情符号
            </summary>
            <param name="text">要检查的字符串</param>
            <returns>如果包含 Emoji 表情符号则返回 true，否则返回 false</returns>
        </member>
        <member name="M:CommonLib.Tools.EmojiUtil.RemoveEmoji(System.String)">
            <summary>
            删除字符串中的 Emoji 表情符号
            </summary>
            <param name="text">要删除 Emoji 表情符号的字符串</param>
            <returns>删除 Emoji 表情符号后的字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.EmojiUtil.ConvertEmojiToUnicode(System.String)">
            <summary>
            将字符串中的 Emoji 表情符号转换为对应的 Unicode 码点
            </summary>
            <param name="text">要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.EmojiUtil.ConvertEmojiToHtmlEntities(System.String)">
            <summary>
            将字符串中的 Emoji 表情符号转换为对应的 HTML 实体编码
            </summary>
            <param name="text">要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.Parse``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值，范例：Enum1枚举有成员A=0，则传入"A"或"0"获取 Enum1.A</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetNames(System.Type)">
            <summary>
            获取枚举所有成员名称
            </summary>
            <param name="type">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetDescription``1(System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.ValidateEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
            <param name="enumType">类型</param>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetEnumItemByDescription``1(System.String)">
            <summary>
            获取指定描述信息的枚举项
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="desc">枚举项描述信息</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.GetDictionary``1">
            <summary>
            获取枚举字典
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.EnumHelper.AddItem``1(System.Collections.Generic.Dictionary{System.Int32,System.String},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="result">集合</param>
            <param name="field">字典</param>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDescription``1">
            <summary>
            获取类型描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDisplayName``1">
            <summary>
            获取类型显示名称，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员显示名称，，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDisplayNameOrDescription``1">
            <summary>
            获取类型显示名称或描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetDisplayNameOrDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型显示名称或成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.FindTypes``1(System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="TFind">查找类型</typeparam>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.FindTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assembly">待查找的程序集</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
            <param name="result">类型列表</param>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetAssemblies(System.String)">
            <summary>
            从目录获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息数组
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
            <param name="property">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsCollection(System.Type)">
            <summary>
            是否集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.IsGenericCollection(System.Type)">
            <summary>
            是否泛型集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetTopBaseType``1">
            <summary>
            获取顶级基类
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.ReflectionHelper.GetTopBaseType(System.Type)">
            <summary>
            获取顶级基类
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Tools.StrHelper.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="P:CommonLib.Tools.StrHelper.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.#ctor">
            <summary>
            初始化一个<see cref="!:Str"/>类型的实例
            </summary>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.AppendLine">
            <summary>
            追加内容并换行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Clear">
            <summary>
            清空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号"'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToUnicode(System.String)">
            <summary>
            字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns>Unicode编码后的字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToUnicodeByCn(System.String)">
            <summary>
            中文字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.UnicodeToStr(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写。范例：中国，返回zg
            </summary>
            <param name="chineseText">汉字文本。范例： 中国</param>
            <returns>首字母缩写</returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">汉字</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ResolveByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
            <param name="unicode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ResolveByConst(System.String)">
            <summary>
            通过拼音简码常量获取
            </summary>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.FullPinYin(System.String)">
            <summary>
            将汉字转换成拼音(全拼)
            </summary>
            <param name="text">汉字字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.FirstLower(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="P:CommonLib.Tools.StrHelper.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Distinct(System.String)">
            <summary>
            去除重复字符串
            </summary>
            <param name="value">值，范例1："5555"，返回"5"，范例2："4545"，返回"45"</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endChatCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
            <param name="endCharCount">添加结束符号的个数</param>
            <param name="endChar">结束符号</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.GetHideMobile(System.String)">
            <summary>
            获取隐藏中间几位后的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.GetStringLength(System.String)">
            <summary>
            获取字符串的字节数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToSnakeCase(System.String)">
            <summary>
            将字符串转换为蛇形策略
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToCamelCase(System.String)">
            <summary>
            将字符串转换为骆驼策略
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.GenerateNonceStr">
            <summary>
            生成随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.SplitWordGroup(System.String,System.Char)">
            <summary>
            分隔词组
            </summary>
            <param name="value">值</param>
            <param name="separator">分隔符。默认使用"-"分隔</param>
        </member>
        <member name="M:CommonLib.Tools.StrHelper.ToChineseNumber(System.String)">
            <summary>
            一种将英文数字转换为中文数字的方法。
            </summary>
        </member>
        <member name="T:CommonLib.Tools.StringCase">
            <summary>
            字符串策略
            </summary>
        </member>
        <member name="F:CommonLib.Tools.StringCase.Snake">
            <summary>
            蛇形策略
            </summary>
        </member>
        <member name="F:CommonLib.Tools.StringCase.Camel">
            <summary>
            骆驼策略
            </summary>
        </member>
        <member name="F:CommonLib.Tools.StringCase.None">
            <summary>
            不执行策略
            </summary>
        </member>
        <member name="T:CommonLib.Tools.SnakeCaseState">
            <summary>
            蛇形策略状态
            </summary>
        </member>
        <member name="F:CommonLib.Tools.SnakeCaseState.Start">
            <summary>
            开头
            </summary>
        </member>
        <member name="F:CommonLib.Tools.SnakeCaseState.Lower">
            <summary>
            小写
            </summary>
        </member>
        <member name="F:CommonLib.Tools.SnakeCaseState.Upper">
            <summary>
            大写
            </summary>
        </member>
        <member name="F:CommonLib.Tools.SnakeCaseState.NewWord">
            <summary>
            单词
            </summary>
        </member>
        <member name="T:CommonLib.Tools.TreeUtil`2">
            <summary>
            树工具类，用于构建树结构
            </summary>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.#ctor(System.Collections.Generic.List{CommonLib.Tools.TreeNode{`0,`1}})">
            <summary>
            构造函数
            </summary>
            <param name="nodes">树节点列表</param>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.BuildTree">
            <summary>
            构建树结构
            </summary>
            <returns>根节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetParents(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的所有父节点
            </summary>
            <param name="node">节点</param>
            <returns>父节点列表，从根节点到该节点的顺序</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetDepth(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的深度
            </summary>
            <param name="node">节点</param>
            <returns>节点深度，根节点的深度为0</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetDescendants(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的所有子孙节点
            </summary>
            <param name="node">节点</param>
            <returns>子孙节点列表</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetSiblings(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的所有兄弟节点
            </summary>
            <param name="node">节点</param>
            <returns>兄弟节点列表</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetSiblingCount(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的所有兄弟节点数量
            </summary>
            <param name="node">节点</param>
            <returns>兄弟节点数量</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.IsLeaf(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            判断某个节点是否是叶子节点
            </summary>
            <param name="node">节点</param>
            <returns>是否是叶子节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetMaxDepth">
            <summary>
            获取树的最大深度
            </summary>
            <returns>树的最大深度</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetMinDepth">
            <summary>
            获取树的最小深度
            </summary>
            <returns>树的最小深度</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetNextSibling(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的下一个兄弟节点
            </summary>
            <param name="node">节点</param>
            <returns>下一个兄弟节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetPreviousSibling(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的上一个兄弟节点
            </summary>
            <param name="node">节点</param>
            <returns>上一个兄弟节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetFirstChild(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的首个子节点
            </summary>
            <param name="node">节点</param>
            <returns>首个子节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetLastChild(CommonLib.Tools.TreeNode{`0,`1})">
            <summary>
            获取某个节点的最后一个子节点
            </summary>
            <param name="node">节点</param>
            <returns>最后一个子节点</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetNodeCount">
            <summary>
            获取树的所有节点数量
            </summary>
            <returns>树的所有节点数量</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetLeafCount">
            <summary>
            获取树的所有叶子节点数量
            </summary>
            <returns>树的所有叶子节点数量</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetTotalWeight">
            <summary>
            获取树的所有节点的权重和
            </summary>
            <returns>树的所有节点的权重和</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetLeafWeightTotal">
            <summary>
            获取树的所有叶子节点的权重和
            </summary>
            <returns>树的所有叶子节点的权重和</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetAverageDepth">
            <summary>
            获取树的平均深度
            </summary>
            <returns>树的平均深度</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetAverageWeight">
            <summary>
            获取树的平均节点权重
            </summary>
            <returns>树的平均节点权重</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetMaxWeight">
            <summary>
            获取树的最大节点权重
            </summary>
            <returns>树的最大节点权重</returns>
        </member>
        <member name="M:CommonLib.Tools.TreeUtil`2.GetMinWeight">
            <summary>
            获取树的最小节点权重
            </summary>
            <returns>树的最小节点权重</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.UnicodeToString(System.String)">
            <summary>
            将Unicode编码的字符串转换为普通字符串。
            </summary>
            <param name="unicodeStr">Unicode编码的字符串</param>
            <returns>普通字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.StringToUnicode(System.String)">
            <summary>
            将普通字符串转换为Unicode编码的字符串。
            </summary>
            <param name="str">普通字符串</param>
            <returns>Unicode编码的字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.UnicodeToChar(System.String)">
            <summary>
            将Unicode字符转换为普通字符。
            </summary>
            <param name="unicodeChar">Unicode字符</param>
            <returns>普通字符</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.CharToUnicode(System.Char)">
            <summary>
            将普通字符转换为Unicode字符。
            </summary>
            <param name="c">普通字符</param>
            <returns>Unicode字符</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.UnicodeCharsToString(System.Char[])">
            <summary>
            将Unicode编码的字符数组转换为普通字符串。
            </summary>
            <param name="unicodeChars">Unicode编码的字符数组</param>
            <returns>普通字符串</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.StringToUnicodeChars(System.String)">
            <summary>
            将普通字符串转换为Unicode编码的字符数组。
            </summary>
            <param name="str">普通字符串</param>
            <returns>Unicode编码的字符数组</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.UnicodeCharsToStringArray(System.Char[])">
            <summary>
            将Unicode编码的字符数组转换为普通字符串数组。
            </summary>
            <param name="unicodeChars">Unicode编码的字符数组</param>
            <returns>普通字符串数组</returns>
        </member>
        <member name="M:CommonLib.Tools.UnicodeUtil.StringArrayToUnicodeChars(System.String[])">
            <summary>
            将普通字符串数组转换为Unicode编码的字符数组。
            </summary>
            <param name="strs">普通字符串数组</param>
            <returns>Unicode编码的字符数组</returns>
        </member>
        <member name="T:CommonLib.TransactionHelper.TransactionScopeAsyncInterCeptor">
             <summary>
             事务处理 参考https://www.cnblogs.com/Fengge518/p/14347759.html
            
             也可以使用其他的https://github.com/wzl-bxg/NTcc-TransactionCore
             </summary>
        </member>
        <member name="T:CommonLib.YouMeng.Enums.UMengPushContentTypeEnum">
            <summary>
             友盟推送内容类型
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushContentTypeEnum.notification">
            <summary>
            通知
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushContentTypeEnum.message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:CommonLib.YouMeng.Enums.UMengPushNotiEnum">
            <summary>
             点击"通知"的后续行为，默认为打开app。
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushNotiEnum.go_app">
            <summary>
            打开应用
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushNotiEnum.go_url">
            <summary>
            跳转到URL
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushNotiEnum.go_activity">
            <summary>
             打开特定的activity
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushNotiEnum.go_custom">
            <summary>
            用户自定义内容。
            </summary>
        </member>
        <member name="T:CommonLib.YouMeng.Enums.UMengPushTypeEnum">
            <summary>
             友盟推送类型
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.unicast">
            <summary>
            单播
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.listcast">
            <summary>
            列播(要求不超过500个device_token)
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.filecast">
            <summary>
            文件播(多个device_token可通过文件形式批量发送）
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.broadcast">
            <summary>
            广播
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.groupcast">
            <summary>
            组播 (按照filter条件筛选特定用户群, 具体请参照filter参数) 
            </summary>
        </member>
        <member name="F:CommonLib.YouMeng.Enums.UMengPushTypeEnum.customizedcast">
            <summary>
            customizedcast(通过开发者自有的alias进行推送),包括以下两种case: 
            - alias: 对单个或者多个alias进行推送
            - file_id: 将alias存放到文件后，根据file_id来推送
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.Enums.UMengUrlList.ApiSend">
            <summary>
            消息发送
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.Enums.UMengUrlList.ApiStatus">
            <summary>
            任务状态查询
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.Enums.UMengUrlList.ApiCancel">
            <summary>
            任务取消
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.Enums.UMengUrlList.ApiUpload">
            <summary>
            文件上传接口
            </summary>
        </member>
        <member name="M:CommonLib.YouMeng.UMengAndroidPush.AndroidModelInit(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            初始化安卓通知实体
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengAndroidPush.PushNotoficationByDeviceTokens(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            通过多个设备号发送安卓推送
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengAndroidPush.PushNotoficationByUsers(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            通过多个用户发送安卓推送
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengIOSPush.IOSModelInit(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            初始化IOS通知实体
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengIOSPush.PushNotoficationByDeviceTokens(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            通过多个设备号发送ios推送
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengIOSPush.PushNotoficationByUsers(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            通过多个用户发送ios推送
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengPushHelper.PushNotoficationByDeviceTokens(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            推送通知（设备ID）
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengPushHelper.PushNotoficationByUsers(CommonLib.YouMeng.ViewModel.UMengSendMsgModel)">
            <summary>
            推送通知(用户ID)
            </summary>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.InitPushModelByDeviceTokens(CommonLib.YouMeng.ViewModel.UMengPushModel,System.Collections.Generic.List{System.String},CommonLib.YouMeng.Enums.EquipmentTypeEnum)">
            <summary>
            初始化类型
            </summary>
            <param name="pushModel"></param>
            <param name="deviceTokens"></param>
            <param name="equipmentType">文件播必传</param>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.InitPushModelByUsers(CommonLib.YouMeng.ViewModel.UMengPushModel,System.Collections.Generic.List{System.String},CommonLib.YouMeng.Enums.EquipmentTypeEnum)">
            <summary>
            初始化类型
            </summary>
            <param name="pushModel"></param>
            <param name="deviceTokens"></param>
            <param name="equipmentType">文件播必传</param>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.Upload(System.String,System.Collections.Generic.List{System.String},CommonLib.YouMeng.Enums.EquipmentTypeEnum)">
            <summary>
            调用文件上传接口，获取file_id
            </summary>
            <param name="appkey"></param>
            <param name="deviceTokens"></param>
            <param name="equipmentType"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.Sign(System.String,System.String,CommonLib.YouMeng.Enums.EquipmentTypeEnum)">
            <summary>
            签名并返回附带签名的url
            </summary>
            <param name="url"></param>
            <param name="postBody">请求参数json串</param>
            <param name="equipmentType">IOS/安卓</param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.MD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLib.YouMeng.UMengTools.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonLib.YouMeng.ViewModel.UMengPushAndroidContentModel">
            <summary>
            友盟安卓通知,消息Body实体
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidContentModel.display_type">
            <summary>
            必填 消息类型，值可以为: notification-通知，message-消息
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidContentModel.body">
            <summary>
            必填 消息体。display_type=message时,body的内容只需填写custom字段。
            display_type=notification时, body包含如下参数:
            </summary>
        </member>
        <member name="T:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel">
            <summary>
            body体，display_type=message时,body的内容只需填写custom字段。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.ticker">
            <summary>
            必填 通知栏提示文字
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.title">
            <summary>
            必填 通知标题
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.text">
            <summary>
            必填 通知文字描述 
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.icon">
            <summary>
            可选 状态栏图标ID, R.drawable.[smallIcon], 如果没有, 默认使用应用图标。
            图片要求为24*24dp的图标,或24*24px放在drawable-mdpi下。注意四周各留1个dp的空白像素
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.largeIcon">
            <summary>
            可选 通知栏拉开后左侧图标ID, R.drawable.[largeIcon].
            图片要求为64*64dp的图标,可设计一张64*64px放在drawable-mdpi下,
            注意图片四周留空，不至于显示太拥挤
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.img">
            <summary>
            可选 通知栏大图标的URL链接。该字段的优先级大于largeIcon。
            该字段要求以http或者https开头。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.sound">
            <summary>
            可选 通知声音，R.raw.[sound]. 
            如果该字段为空，采用SDK默认的声音, 即res/raw/下的umeng_push_notification_default_sound声音文件
            如果SDK默认声音文件不存在，则使用系统默认的Notification提示音。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.builder_id">
            <summary>
             可选 默认为0，用于标识该通知采用的样式。使用该参数时, 发者必须在SDK里面实现自定义通知栏样式。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.play_vibrate">
            <summary>
             必填，收到通知是否震动,默认为"true".注意，"true/false"为字符串
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.play_light">
            <summary>
            必填 收到通知是否闪灯,默认为"true".注意，"true/false"为字符串
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.play_sound">
            <summary>
            必填 收到通知是否发出声音,默认为"true".注意，"true/false"为字符串
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.after_open">
            <summary>
            点击"通知"的后续行为，默认为打开app。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.url">
            <summary>
            可选 当"after_open"为"go_url"时，必填。
            通知栏点击后跳转的URL，要求以http或者https开头  
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.activity">
            <summary>
            可选 当"after_open"为"go_activity"时，必填。通知栏点击后打开的Activity
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushAndroidBodyModel.custom">
            <summary>
            可选 display_type=message, 或者display_type=notification且 "after_open"为"go_custom"时，
            该字段必填。用户自定义内容, 可以为字符串或者JSON格式。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushIOSContentModel.aps">
            <summary>
            // 必填 严格按照APNs定义来填写
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushIOSApsModel.content_available">
            <summary>
            生成json后转为content-available
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushIOSApsModel.category">
            <summary>
            可选, 注意: ios8才支持该字段。
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.appkey">
            <summary>
            必填 应用唯一标识
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.timestamp">
            <summary>
            必填 时间戳，10位或者13位均可，时间戳有效期为10分钟
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.type">
            <summary>
             必填 消息发送类型,其值可以为:广播，单播，组播...
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.device_tokens">
            <summary>
             可选 
             设备唯一表示当type=unicast时,必填, 表示指定的单个设备
             当type=listcast时,必填,要求不超过500个, 多个device_token以英文逗号间隔
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.alias_type">
            <summary>
            可选 当type=customizedcast时，必填，alias的类型,  alias_type可由开发者自定义,
            开发者在SDK中调用setAlias(alias, alias_type)时所设置的alias_type
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.alias">
            <summary>
            可选 当type=customizedcast时, 开发者填写自己的alias。
            要求不超过50个alias,多个alias以英文逗号间隔。在SDK中调用setAlias(alias, alias_type)时所设置的alias
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.file_id">
             <summary>
             可选 当type=filecast时，file内容为多条device_token, 
             device_token以回车符分隔
             当type=customizedcast时，file内容为多条alias，
            alias以回车符分隔，注意同一个文件内的alias所对应 的alias_type必须和接口参数alias_type一致。
             注意，使用文件播前需要先调用文件上传接口获取file_id, 具体请参照"2.4文件上传接口"
             </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.filter">
             <summary>
            暂时不用
            可选终端用户筛选条件,如用户标签、地域、应用版本以及渠道等,  具体请参考附录G。
             </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.payload">
            <summary>
            必填 消息内容(Android最大为1840B), 包含参数说明如下(JSON格式):
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.production_mode">
             <summary>
            可选 true/false 正式/测试模式。测试模式下，只会将消息发给测试设备。
            测试设备需要到web上添加。 Android: 测试设备属于正式设备的一个子集。
             </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengPushModel.description">
            <summary>
            可选 发送消息描述，建议填写。
            </summary>
        </member>
        <member name="M:CommonLib.YouMeng.ViewModel.UMengPushModel.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengResponseModel.ret">
            <summary>
            返回结果，"SUCCESS"或者"FAIL
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengResponseDataModel.msg_id">
            <summary>
            当type为unicast、listcast或者customizedcast且alias不为空时:
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengResponseDataModel.task_id">
            <summary>
            当type为于broadcast、groupcast、filecast、customizedcast
            且file_id不为空的情况(任务)
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengResponseDataModel.file_id">
            <summary>
            上传文件成功返回file_id
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Text">
            <summary>
            通知文字描述
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Description">
            <summary>
            发送消息描述，建议填写
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.DeviceTokens">
            <summary>
            设备ID || 用户ID
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Activity">
            <summary>
            可选 当"after_open"为"go_activity"时，必填。通知栏点击后打开的Activity
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Url">
            <summary>
            可选 当"after_open"为"go_url"时，必填。
            通知栏点击后跳转的URL，要求以http或者https开头  
            </summary>
        </member>
        <member name="P:CommonLib.YouMeng.ViewModel.UMengSendMsgModel.Custom">
            <summary>
            可选 display_type=message, 或者display_type=notification且 "after_open"为"go_custom"时，
            该字段必填。用户自定义内容, 可以为字符串或者JSON格式。
            </summary>
        </member>
        <member name="T:Common.Extensions.GenericExtensions">
            <summary>
            通用扩展方法
            </summary>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.ToDictionary``1(``0,System.Boolean,System.Boolean)">
            <summary>
            将当前对象转成字典(属性名->属性值)
            </summary>
            <param name="object">原对象</param>
            <param name="includePrivate">是否包含私有属性，即: private string name { set; get; }</param>
            <param name="inherit">是否包含继承的属性</param>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.IsDefault``1(``0)">
            <summary>
            判断当前对象是否所属<seealso cref="T:System.Type"/>的默认值(<c>null</c>被认为是默认值)
            </summary>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.GetUninitializedInstance``1">
            <summary>
            返回一个未初始化的实例,注意: 未执行任何的初始化逻辑,比如 构造函数/字段初始化等，由于返回的对象不在一个正常的状态，请慎用。
            </summary>
            <remarks>参照：<see href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject.aspx"/></remarks>
            <example>
            <code>
            class Person { public Person(int Id) { this.Id = Id; } public int Id { get; set; } = 5; public string Name { get; set; } = "小明"; }
            var person = ExpressionExtensions.GetUninitializedInstance&lt;Person&gt;();
            //输出: "0,null"
            Console.WriteLine($"{person.Id},{person.Name ?? "null"}");
            </code>
            </example>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.GetPropertyNames``1(``0,System.Boolean,System.Boolean)">
            <summary>
            获取符合条件的属性名集合
            </summary>
            <param name="object"></param>
            <param name="includePrivate">是否包含私有属性</param>
            <param name="inherit">是否包含继承属性</param>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.Lock``1(``0,System.TimeSpan)">
            <summary>
            提供一个具有超时功能的锁
            </summary>
        </member>
        <member name="T:Common.Extensions.GenericExtensions.Locker">
            <summary>
            具有超时功能的锁
            </summary>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.Locker.#ctor(System.Object)">
            <summary>
            Returns an instance of <see cref="T:Common.Extensions.GenericExtensions.Locker"/>.
            </summary>
            <param name="obj">The <c>object</c> on which lock is taken.</param>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.Locker.Dispose">
            <summary>
            Releases any locks taken by this instance.
            </summary>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.ToCompletedTask``1(``0)">
            <summary>
            将当前对象封住为一个完成态的Task <c>Task.FromResult(this)</c>
            </summary>
        </member>
        <member name="M:Common.Extensions.GenericExtensions.ToCompletedValueTask``1(``0)">
            <summary>
            Creates a ValueTask that's completed successfully with the specified <paramref name="result"/>.
            </summary>
        </member>
        <member name="T:Common.LockHelper.UsingLock`1">
            <summary>
            使用using代替lock操作的对象,可指定写入和读取锁定模式
            参考:https://www.cnblogs.com/blqw/p/3475734.html
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Common.LockHelper.UsingLock`1.Lock">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Common.LockHelper.UsingLock`1.Lock._Lock">
            <summary> 读写锁对象
            </summary>
        </member>
        <member name="F:Common.LockHelper.UsingLock`1.Lock._IsWrite">
            <summary> 是否为写入模式
            </summary>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.Lock.#ctor(System.Threading.ReaderWriterLockSlim,System.Boolean)">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>构造函数</para>
            </summary>
            <param name="rwl">读写锁</param>
            <param name="isWrite">写入模式为true,读取模式为false</param>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.Lock.Dispose">
            <summary> 释放对象时退出指定锁定模式
            </summary>
        </member>
        <member name="T:Common.LockHelper.UsingLock`1.Disposable">
            <summary> 空的可释放对象,免去了调用时需要判断是否为null的问题
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Common.LockHelper.UsingLock`1.Disposable.Empty">
            <summary> 空的可释放对象
            </summary>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.Disposable.Dispose">
            <summary> 空的释放方法
            </summary>
        </member>
        <member name="F:Common.LockHelper.UsingLock`1._LockSlim">
            <summary> 读写锁
            </summary>
        </member>
        <member name="F:Common.LockHelper.UsingLock`1._Data">
            <summary> 保存数据
            </summary>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.#ctor">
            <summary> 使用using代替lock操作的对象,可指定写入和读取锁定模式
            <para>构造函数</para>
            </summary>
        </member>
        <member name="P:Common.LockHelper.UsingLock`1.Data">
            <summary> 获取或设置当前对象中保存数据的值
            </summary>
            <exception cref="T:System.MemberAccessException">获取数据时未进入读取或写入锁定模式</exception>
            <exception cref="T:System.MemberAccessException">设置数据时未进入写入锁定模式</exception>
        </member>
        <member name="P:Common.LockHelper.UsingLock`1.Enabled">
            <summary> 是否启用,当该值为false时,Read()和Write()方法将返回 Disposable.Empty
            </summary>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.Read">
            <summary> 进入读取锁定模式,该模式下允许多个读操作同时进行
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在读取或写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
        </member>
        <member name="M:Common.LockHelper.UsingLock`1.Write">
            <summary> 进入写入锁定模式,该模式下只允许同时执行一个读操作
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
            <exception cref="T:System.NotImplementedException">读取模式下不能进入写入锁定状态</exception>
        </member>
    </members>
</doc>
