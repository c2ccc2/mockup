using Mapster;
using Microsoft.Extensions.Logging;
using RuoYi.Common.Data;
using RuoYi.Framework.DependencyInjection;
using RuoYi.ProjectManager.Data.Dtos;
using RuoYi.ProjectManager.Repositories;
using Sys = System.Linq;
using RuoYi.ProjectManager.Data.Entities;
namespace RuoYi.ProjectManager.Services;

    /// <summary>
    ///  @Model.FunctionName Service
    ///  author 王晓琦
    ///  date   @Model.DateTime
    /// </summary>
  public partial class @(Model.ClassName)Service :  ITransient
    {
     

private  readonly   @(Model.ClassName)Manager manager = new @(Model.ClassName)Manager();

   /// <summary>
    ///查询@(Model.FunctionName)列表
    ////summary>
    ///<param name="dto"></param>
      public async Task<SqlSugarPagedList<@(Model.ClassName)>> GetCustomPagedListAsync(@(Model.ClassName)SearchDto dto)
    {



                    Sys.Expressions.Expression<Func<@(Model.ClassName), bool>> express = Expressionable.Create<@(Model.ClassName)>()
                            @{
                                @foreach (var column in Model.Columns)
                             {
                                    if (column.IsQuery == "1" && column.QueryType == "LIKE")
                                    {
                                       
                                                   <text> @(System.Environment.NewLine).AndIF(!string.IsNullOrEmpty(dto.@(column.NetField)), m => m.@(column.NetField).Contains(dto.@(column.NetField)))</text>
                                     }
                                     if (column.IsQuery == "1" && column.QueryType == "EQ")
                                    {
                                                    <text> @(System.Environment.NewLine).AndIF(dto.@(column.NetField).HasValue, m => m.@(column.NetField) == dto.@(column.NetField).Value)</text>
                                      }
            
                                    if (column.IsQuery == "1" && column.QueryType == "GTE")
                                    {
                                                        <text> @(System.Environment.NewLine).AndIF(dto.@(column.NetField).HasValue, m => m.@(column.NetField) >= dto.@(column.NetField).Value)</text>
                                       }
                                    if (column.IsQuery == "1" && column.QueryType == "LTE")
                                        {
                                                         <text> @(System.Environment.NewLine).AndIF(dto.@(column.NetField).HasValue, m => m.@(column.NetField) <= dto.@(column.NetField).Value)</text>
                                         }
                                     if (column.IsQuery == "1" && column.QueryType == "GT")
                                  {
                                                        <text> @(System.Environment.NewLine).AndIF(dto.@(column.NetField).HasValue, m => m.@(column.NetField) > dto.@(column.NetField).Value)</text>
                                         }
                                     if (column.IsQuery == "1" && column.QueryType == "LT")
                                         {
                                                        <text> @(System.Environment.NewLine).AndIF(dto.@(column.NetField).HasValue, m => m.@(column.NetField) < dto.@(column.NetField).Value)</text>
                                      }

                            }
                          }

                              

           .ToExpression();//拼接表达式
               SqlSugar.PageModel pageModel = dto.pageModel.Adapt<PageModel>();
                            return await manager.GetPageListAsync(express, pageModel);
                        }












    /// <summary>
    /// 通过id获取单条记录
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
  public  async Task<@(Model.ClassName)> GetDtoAsync(long id)
    {
      return await manager.GetByIdAsync(id);
    }

     /// <summary>
    ///通过ids删除
    /// </summary>
    /// <param name="ids"></param>
    /// <returns></returns>
        public  async Task<bool> DeleteAsync(List<long> ids)
    {
      return await manager.DeleteByIdAsync(ids);
    }

     /// <summary>
    /// 通过dto插入数据
    /// </summary>
    /// <param name="dto"></param>
    /// <returns></returns>
        public   async Task<bool> InsertAsync(@(Model.ClassName)Dto dto)
    {
      var entity = dto.Adapt<@(Model.ClassName)>();

      return await manager.InsertAsync(entity);
    }
     /// <summary>
    /// 通过原始mode插入
    /// </summary>
    /// <param name="dto"></param>
    /// <returns></returns>
      public   async Task<bool> InsertAsync(@(Model.ClassName) model)
    {
      return await manager.InsertAsync(model);
    }

    /// <summary>
    ///  通过id获取记录,返回默认的
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
       public   async Task<@(Model.ClassName)> GetDefaultAsync(long id)
    {
      return await manager.GetByIdAsync(id);
    }
    /// <summary>
    /// 通过原始model修改
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
       public   async Task<bool> UpdateAsync(@(Model.ClassName) model)
    {
      return await manager.UpdateAsync(model);
    }
     /// <summary>
    /// 通过dto修改
    /// </summary>
    /// <param name="dto"></param>
    /// <returns></returns>
    public   async Task<bool> UpdateAsync(@(Model.ClassName)Dto dto)
    {
      var model = dto.Adapt<@(Model.ClassName)>();
      return await manager.UpdateAsync(model);
    }


   



 






    }

