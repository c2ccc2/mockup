using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using RuoYi.Common.Enums;
using RuoYi.Common.Utils;
using RuoYi.Framework;
using RuoYi.Framework.Extensions;
using SqlSugar;
using System.ComponentModel.DataAnnotations;
using RuoYi.ProjectManager.Data.Dtos;
using RuoYi.ProjectManager.Services;


namespace RuoYi.ProjectManager.Controllers;

    /// <summary>
    /// @Model.FunctionName
    ///  author @Model.Author
    ///  date   @Model.DateTime
    /// </summary>
    [ApiDescriptionSettings("@(Model.ModuleName)")]
    [Route("@(Model.moduleName)/@(Model.businessName)")]
    public partial class @(Model.ClassName)Controller(
            @(Model.ClassName)Service @(Model.className)Service) : ControllerBase
    {
     
        private readonly @(Model.ClassName)Service _@(Model.className)Service= @(Model.className)Service;

    

        /// <summary>
        /// 查询@(Model.FunctionName)列表
        /// </summary>
        [HttpPost("list")]
        [AppAuthorize("@(Model.PermissionPrefix):list")]
        [RuoYi.System.Log(Title = "@(Model.FunctionName)列表", BusinessType = BusinessType.SEARCH)]

  @{
    if (Model.Table.IsCrud() || Model.Table.IsSub())
    {
        @:public async Task<SqlSugarPagedList<@(Model.ClassName)>> Get@(Model.ClassName)PagedList([FromBody] @(Model.ClassName)SearchDto dto)
        @:{
       
        @:   return await _@(Model.className)Service.GetCustomPagedListAsync(dto);
        @:}

    } else {
        @:public async Task<AjaxResult> Get@(Model.ClassName)List([FromQuery] @(Model.ClassName)Dto dto)
        @:{
        @:   var data = await _@(Model.className)Service.CustomPagedListAsync(dto);
        @:   return AjaxResult.Success(data);
        @:}
    }
        }

        /// <summary>
        /// 获取 @(Model.FunctionName) 详细信息
        /// </summary>
        [HttpGet("Get/{id}")]
        [AppAuthorize("@(Model.PermissionPrefix):query")]
         [RuoYi.System.Log(Title = "获取某个@(Model.FunctionName)记录", BusinessType = BusinessType.SEARCH)]
        public async Task<AjaxResult> Get(@(Model.PkColumn.NetType) id)
        {
            var data = await _@(Model.className)Service.GetDtoAsync(id);
            return AjaxResult.Success(data);
        }

        /// <summary>
        /// 新增 @(Model.FunctionName)
        /// </summary>
        [HttpPost("Add")]
        [AppAuthorize("@(Model.PermissionPrefix):add")]
        [TypeFilter(typeof(RuoYi.Framework.DataValidation.DataValidationFilter))]
        [RuoYi.System.Log(Title = "添加@(Model.FunctionName)", BusinessType = BusinessType.INSERT)]
        public async Task<AjaxResult> Add([FromBody] @(Model.ClassName)Dto dto)
        {
            @(Model.ClassName) model= dto.Adapt<@(Model.ClassName)>();
            model.CreateBy = SecurityUtils.GetUsername();
            model.CreateTime = DateTime.Now;



            var data = await _@(Model.className)Service.InsertAsync(model);
            return AjaxResult.Success(data);
        }

        /// <summary>
        /// 修改 @(Model.FunctionName)
        /// </summary>
        [HttpPut("Edit")]
        [AppAuthorize("@(Model.PermissionPrefix):edit")]
        [TypeFilter(typeof(RuoYi.Framework.DataValidation.DataValidationFilter))]
        [RuoYi.System.Log(Title = "修改@(Model.FunctionName)", BusinessType = BusinessType.UPDATE)]
        public async Task<AjaxResult> Edit([FromBody] @(Model.ClassName)Dto dto)
        {
            @(Model.ClassName) model= dto.Adapt<@(Model.ClassName)>();
 
            model.UpdateBy = SecurityUtils.GetUsername();
            model.UpdateTime = DateTime.Now;
            var data = await _@(Model.className)Service.UpdateAsync(model);
            return AjaxResult.Success(data);
        }

        /// <summary>
        /// 删除 @(Model.FunctionName)
        /// </summary>
        [HttpDelete("Remove/{ids}")]
        [AppAuthorize("@(Model.PermissionPrefix):remove")]
        [RuoYi.System.Log(Title = "删除@(Model.FunctionName)", BusinessType = BusinessType.DELETE)]
        public async Task<AjaxResult> Remove(string ids)
        {
            var idList = ids.SplitToList<long>();
            var data = await _@(Model.className)Service.DeleteAsync(idList);
            return AjaxResult.Success(data);
        }

   
    }

